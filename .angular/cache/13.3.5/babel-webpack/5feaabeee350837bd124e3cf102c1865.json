{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.augmentHostWithCaching = exports.augmentProgramWithVersioning = exports.augmentHostWithVersioning = exports.augmentHostWithSubstitutions = exports.augmentHostWithReplacements = exports.augmentHostWithNgcc = exports.augmentHostWithDependencyCollection = exports.augmentHostWithResources = void 0;\n\nconst crypto_1 = require(\"crypto\");\n\nconst path = __importStar(require(\"path\"));\n\nconst ts = __importStar(require(\"typescript\"));\n\nconst paths_1 = require(\"./paths\");\n\nfunction augmentHostWithResources(host, resourceLoader, options = {}) {\n  const resourceHost = host;\n\n  resourceHost.readResource = function (fileName) {\n    const filePath = (0, paths_1.normalizePath)(fileName);\n\n    if (options.directTemplateLoading && (filePath.endsWith('.html') || filePath.endsWith('.svg'))) {\n      const content = this.readFile(filePath);\n\n      if (content === undefined) {\n        throw new Error('Unable to locate component resource: ' + fileName);\n      }\n\n      resourceLoader.setAffectedResources(filePath, [filePath]);\n      return content;\n    } else {\n      return resourceLoader.get(filePath);\n    }\n  };\n\n  resourceHost.resourceNameToFileName = function (resourceName, containingFile) {\n    return path.join(path.dirname(containingFile), resourceName);\n  };\n\n  resourceHost.getModifiedResourceFiles = function () {\n    return resourceLoader.getModifiedResourceFiles();\n  };\n\n  resourceHost.transformResource = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (data, context) {\n      // Only inline style resources are supported currently\n      if (context.resourceFile || context.type !== 'style') {\n        return null;\n      }\n\n      if (options.inlineStyleFileExtension) {\n        const content = yield resourceLoader.process(data, options.inlineStyleFileExtension, context.type, context.containingFile);\n        return {\n          content\n        };\n      }\n\n      return null;\n    });\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n\nexports.augmentHostWithResources = augmentHostWithResources;\n\nfunction augmentResolveModuleNames(host, resolvedModuleModifier, moduleResolutionCache) {\n  if (host.resolveModuleNames) {\n    const baseResolveModuleNames = host.resolveModuleNames;\n\n    host.resolveModuleNames = function (moduleNames, ...parameters) {\n      return moduleNames.map(name => {\n        const result = baseResolveModuleNames.call(host, [name], ...parameters);\n        return resolvedModuleModifier(result[0], name);\n      });\n    };\n  } else {\n    host.resolveModuleNames = function (moduleNames, containingFile, _reusedNames, redirectedReference, options) {\n      return moduleNames.map(name => {\n        const result = ts.resolveModuleName(name, containingFile, options, host, moduleResolutionCache, redirectedReference).resolvedModule;\n        return resolvedModuleModifier(result, name);\n      });\n    };\n  }\n}\n/**\n * Augments a TypeScript Compiler Host's resolveModuleNames function to collect dependencies\n * of the containing file passed to the resolveModuleNames function. This process assumes\n * that consumers of the Compiler Host will only call resolveModuleNames with modules that are\n * actually present in a containing file.\n * This process is a workaround for gathering a TypeScript SourceFile's dependencies as there\n * is no currently exposed public method to do so. A BuilderProgram does have a `getAllDependencies`\n * function. However, that function returns all transitive dependencies as well which can cause\n * excessive Webpack rebuilds.\n *\n * @param host The CompilerHost to augment.\n * @param dependencies A Map which will be used to store file dependencies.\n * @param moduleResolutionCache An optional resolution cache to use when the host resolves a module.\n */\n\n\nfunction augmentHostWithDependencyCollection(host, dependencies, moduleResolutionCache) {\n  if (host.resolveModuleNames) {\n    const baseResolveModuleNames = host.resolveModuleNames;\n\n    host.resolveModuleNames = function (moduleNames, containingFile, ...parameters) {\n      const results = baseResolveModuleNames.call(host, moduleNames, containingFile, ...parameters);\n      const containingFilePath = (0, paths_1.normalizePath)(containingFile);\n\n      for (const result of results) {\n        if (result) {\n          const containingFileDependencies = dependencies.get(containingFilePath);\n\n          if (containingFileDependencies) {\n            containingFileDependencies.add(result.resolvedFileName);\n          } else {\n            dependencies.set(containingFilePath, new Set([result.resolvedFileName]));\n          }\n        }\n      }\n\n      return results;\n    };\n  } else {\n    host.resolveModuleNames = function (moduleNames, containingFile, _reusedNames, redirectedReference, options) {\n      return moduleNames.map(name => {\n        const result = ts.resolveModuleName(name, containingFile, options, host, moduleResolutionCache, redirectedReference).resolvedModule;\n\n        if (result) {\n          const containingFilePath = (0, paths_1.normalizePath)(containingFile);\n          const containingFileDependencies = dependencies.get(containingFilePath);\n\n          if (containingFileDependencies) {\n            containingFileDependencies.add(result.resolvedFileName);\n          } else {\n            dependencies.set(containingFilePath, new Set([result.resolvedFileName]));\n          }\n        }\n\n        return result;\n      });\n    };\n  }\n}\n\nexports.augmentHostWithDependencyCollection = augmentHostWithDependencyCollection;\n\nfunction augmentHostWithNgcc(host, ngcc, moduleResolutionCache) {\n  augmentResolveModuleNames(host, (resolvedModule, moduleName) => {\n    if (resolvedModule && ngcc) {\n      ngcc.processModule(moduleName, resolvedModule);\n    }\n\n    return resolvedModule;\n  }, moduleResolutionCache);\n\n  if (host.resolveTypeReferenceDirectives) {\n    const baseResolveTypeReferenceDirectives = host.resolveTypeReferenceDirectives;\n\n    host.resolveTypeReferenceDirectives = function (names, ...parameters) {\n      return names.map(name => {\n        const result = baseResolveTypeReferenceDirectives.call(host, [name], ...parameters);\n\n        if (result[0] && ngcc) {\n          ngcc.processModule(name, result[0]);\n        }\n\n        return result[0];\n      });\n    };\n  } else {\n    host.resolveTypeReferenceDirectives = function (moduleNames, containingFile, redirectedReference, options) {\n      return moduleNames.map(name => {\n        const result = ts.resolveTypeReferenceDirective(name, containingFile, options, host, redirectedReference).resolvedTypeReferenceDirective;\n\n        if (result && ngcc) {\n          ngcc.processModule(name, result);\n        }\n\n        return result;\n      });\n    };\n  }\n}\n\nexports.augmentHostWithNgcc = augmentHostWithNgcc;\n\nfunction augmentHostWithReplacements(host, replacements, moduleResolutionCache) {\n  if (Object.keys(replacements).length === 0) {\n    return;\n  }\n\n  const normalizedReplacements = {};\n\n  for (const [key, value] of Object.entries(replacements)) {\n    normalizedReplacements[(0, paths_1.normalizePath)(key)] = (0, paths_1.normalizePath)(value);\n  }\n\n  const tryReplace = resolvedModule => {\n    const replacement = resolvedModule && normalizedReplacements[resolvedModule.resolvedFileName];\n\n    if (replacement) {\n      return {\n        resolvedFileName: replacement,\n        isExternalLibraryImport: /[/\\\\]node_modules[/\\\\]/.test(replacement)\n      };\n    } else {\n      return resolvedModule;\n    }\n  };\n\n  augmentResolveModuleNames(host, tryReplace, moduleResolutionCache);\n}\n\nexports.augmentHostWithReplacements = augmentHostWithReplacements;\n\nfunction augmentHostWithSubstitutions(host, substitutions) {\n  const regexSubstitutions = [];\n\n  for (const [key, value] of Object.entries(substitutions)) {\n    regexSubstitutions.push([new RegExp(`\\\\b${key}\\\\b`, 'g'), value]);\n  }\n\n  if (regexSubstitutions.length === 0) {\n    return;\n  }\n\n  const baseReadFile = host.readFile;\n\n  host.readFile = function (...parameters) {\n    let file = baseReadFile.call(host, ...parameters);\n\n    if (file) {\n      for (const entry of regexSubstitutions) {\n        file = file.replace(entry[0], entry[1]);\n      }\n    }\n\n    return file;\n  };\n}\n\nexports.augmentHostWithSubstitutions = augmentHostWithSubstitutions;\n\nfunction augmentHostWithVersioning(host) {\n  const baseGetSourceFile = host.getSourceFile;\n\n  host.getSourceFile = function (...parameters) {\n    const file = baseGetSourceFile.call(host, ...parameters);\n\n    if (file && file.version === undefined) {\n      file.version = (0, crypto_1.createHash)('sha256').update(file.text).digest('hex');\n    }\n\n    return file;\n  };\n}\n\nexports.augmentHostWithVersioning = augmentHostWithVersioning;\n\nfunction augmentProgramWithVersioning(program) {\n  const baseGetSourceFiles = program.getSourceFiles;\n\n  program.getSourceFiles = function (...parameters) {\n    const files = baseGetSourceFiles(...parameters);\n\n    for (const file of files) {\n      if (file.version === undefined) {\n        file.version = (0, crypto_1.createHash)('sha256').update(file.text).digest('hex');\n      }\n    }\n\n    return files;\n  };\n}\n\nexports.augmentProgramWithVersioning = augmentProgramWithVersioning;\n\nfunction augmentHostWithCaching(host, cache) {\n  const baseGetSourceFile = host.getSourceFile;\n\n  host.getSourceFile = function (fileName, languageVersion, onError, shouldCreateNewSourceFile, ...parameters) {\n    if (!shouldCreateNewSourceFile && cache.has(fileName)) {\n      return cache.get(fileName);\n    }\n\n    const file = baseGetSourceFile.call(host, fileName, languageVersion, onError, true, ...parameters);\n\n    if (file) {\n      cache.set(fileName, file);\n    }\n\n    return file;\n  };\n}\n\nexports.augmentHostWithCaching = augmentHostWithCaching;","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/@ngtools/webpack/src/ivy/host.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","augmentHostWithCaching","augmentProgramWithVersioning","augmentHostWithVersioning","augmentHostWithSubstitutions","augmentHostWithReplacements","augmentHostWithNgcc","augmentHostWithDependencyCollection","augmentHostWithResources","crypto_1","require","path","ts","paths_1","host","resourceLoader","options","resourceHost","readResource","fileName","filePath","normalizePath","directTemplateLoading","endsWith","content","readFile","Error","setAffectedResources","resourceNameToFileName","resourceName","containingFile","join","dirname","getModifiedResourceFiles","transformResource","data","context","resourceFile","type","inlineStyleFileExtension","process","augmentResolveModuleNames","resolvedModuleModifier","moduleResolutionCache","resolveModuleNames","baseResolveModuleNames","moduleNames","parameters","map","name","_reusedNames","redirectedReference","resolveModuleName","resolvedModule","dependencies","results","containingFilePath","containingFileDependencies","add","resolvedFileName","set","Set","ngcc","moduleName","processModule","resolveTypeReferenceDirectives","baseResolveTypeReferenceDirectives","names","resolveTypeReferenceDirective","resolvedTypeReferenceDirective","replacements","keys","length","normalizedReplacements","key","entries","tryReplace","replacement","isExternalLibraryImport","test","substitutions","regexSubstitutions","push","RegExp","baseReadFile","file","entry","replace","baseGetSourceFile","getSourceFile","version","createHash","update","text","digest","program","baseGetSourceFiles","getSourceFiles","files","cache","languageVersion","onError","shouldCreateNewSourceFile","has"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.augmentHostWithCaching = exports.augmentProgramWithVersioning = exports.augmentHostWithVersioning = exports.augmentHostWithSubstitutions = exports.augmentHostWithReplacements = exports.augmentHostWithNgcc = exports.augmentHostWithDependencyCollection = exports.augmentHostWithResources = void 0;\nconst crypto_1 = require(\"crypto\");\nconst path = __importStar(require(\"path\"));\nconst ts = __importStar(require(\"typescript\"));\nconst paths_1 = require(\"./paths\");\nfunction augmentHostWithResources(host, resourceLoader, options = {}) {\n    const resourceHost = host;\n    resourceHost.readResource = function (fileName) {\n        const filePath = (0, paths_1.normalizePath)(fileName);\n        if (options.directTemplateLoading &&\n            (filePath.endsWith('.html') || filePath.endsWith('.svg'))) {\n            const content = this.readFile(filePath);\n            if (content === undefined) {\n                throw new Error('Unable to locate component resource: ' + fileName);\n            }\n            resourceLoader.setAffectedResources(filePath, [filePath]);\n            return content;\n        }\n        else {\n            return resourceLoader.get(filePath);\n        }\n    };\n    resourceHost.resourceNameToFileName = function (resourceName, containingFile) {\n        return path.join(path.dirname(containingFile), resourceName);\n    };\n    resourceHost.getModifiedResourceFiles = function () {\n        return resourceLoader.getModifiedResourceFiles();\n    };\n    resourceHost.transformResource = async function (data, context) {\n        // Only inline style resources are supported currently\n        if (context.resourceFile || context.type !== 'style') {\n            return null;\n        }\n        if (options.inlineStyleFileExtension) {\n            const content = await resourceLoader.process(data, options.inlineStyleFileExtension, context.type, context.containingFile);\n            return { content };\n        }\n        return null;\n    };\n}\nexports.augmentHostWithResources = augmentHostWithResources;\nfunction augmentResolveModuleNames(host, resolvedModuleModifier, moduleResolutionCache) {\n    if (host.resolveModuleNames) {\n        const baseResolveModuleNames = host.resolveModuleNames;\n        host.resolveModuleNames = function (moduleNames, ...parameters) {\n            return moduleNames.map((name) => {\n                const result = baseResolveModuleNames.call(host, [name], ...parameters);\n                return resolvedModuleModifier(result[0], name);\n            });\n        };\n    }\n    else {\n        host.resolveModuleNames = function (moduleNames, containingFile, _reusedNames, redirectedReference, options) {\n            return moduleNames.map((name) => {\n                const result = ts.resolveModuleName(name, containingFile, options, host, moduleResolutionCache, redirectedReference).resolvedModule;\n                return resolvedModuleModifier(result, name);\n            });\n        };\n    }\n}\n/**\n * Augments a TypeScript Compiler Host's resolveModuleNames function to collect dependencies\n * of the containing file passed to the resolveModuleNames function. This process assumes\n * that consumers of the Compiler Host will only call resolveModuleNames with modules that are\n * actually present in a containing file.\n * This process is a workaround for gathering a TypeScript SourceFile's dependencies as there\n * is no currently exposed public method to do so. A BuilderProgram does have a `getAllDependencies`\n * function. However, that function returns all transitive dependencies as well which can cause\n * excessive Webpack rebuilds.\n *\n * @param host The CompilerHost to augment.\n * @param dependencies A Map which will be used to store file dependencies.\n * @param moduleResolutionCache An optional resolution cache to use when the host resolves a module.\n */\nfunction augmentHostWithDependencyCollection(host, dependencies, moduleResolutionCache) {\n    if (host.resolveModuleNames) {\n        const baseResolveModuleNames = host.resolveModuleNames;\n        host.resolveModuleNames = function (moduleNames, containingFile, ...parameters) {\n            const results = baseResolveModuleNames.call(host, moduleNames, containingFile, ...parameters);\n            const containingFilePath = (0, paths_1.normalizePath)(containingFile);\n            for (const result of results) {\n                if (result) {\n                    const containingFileDependencies = dependencies.get(containingFilePath);\n                    if (containingFileDependencies) {\n                        containingFileDependencies.add(result.resolvedFileName);\n                    }\n                    else {\n                        dependencies.set(containingFilePath, new Set([result.resolvedFileName]));\n                    }\n                }\n            }\n            return results;\n        };\n    }\n    else {\n        host.resolveModuleNames = function (moduleNames, containingFile, _reusedNames, redirectedReference, options) {\n            return moduleNames.map((name) => {\n                const result = ts.resolveModuleName(name, containingFile, options, host, moduleResolutionCache, redirectedReference).resolvedModule;\n                if (result) {\n                    const containingFilePath = (0, paths_1.normalizePath)(containingFile);\n                    const containingFileDependencies = dependencies.get(containingFilePath);\n                    if (containingFileDependencies) {\n                        containingFileDependencies.add(result.resolvedFileName);\n                    }\n                    else {\n                        dependencies.set(containingFilePath, new Set([result.resolvedFileName]));\n                    }\n                }\n                return result;\n            });\n        };\n    }\n}\nexports.augmentHostWithDependencyCollection = augmentHostWithDependencyCollection;\nfunction augmentHostWithNgcc(host, ngcc, moduleResolutionCache) {\n    augmentResolveModuleNames(host, (resolvedModule, moduleName) => {\n        if (resolvedModule && ngcc) {\n            ngcc.processModule(moduleName, resolvedModule);\n        }\n        return resolvedModule;\n    }, moduleResolutionCache);\n    if (host.resolveTypeReferenceDirectives) {\n        const baseResolveTypeReferenceDirectives = host.resolveTypeReferenceDirectives;\n        host.resolveTypeReferenceDirectives = function (names, ...parameters) {\n            return names.map((name) => {\n                const result = baseResolveTypeReferenceDirectives.call(host, [name], ...parameters);\n                if (result[0] && ngcc) {\n                    ngcc.processModule(name, result[0]);\n                }\n                return result[0];\n            });\n        };\n    }\n    else {\n        host.resolveTypeReferenceDirectives = function (moduleNames, containingFile, redirectedReference, options) {\n            return moduleNames.map((name) => {\n                const result = ts.resolveTypeReferenceDirective(name, containingFile, options, host, redirectedReference).resolvedTypeReferenceDirective;\n                if (result && ngcc) {\n                    ngcc.processModule(name, result);\n                }\n                return result;\n            });\n        };\n    }\n}\nexports.augmentHostWithNgcc = augmentHostWithNgcc;\nfunction augmentHostWithReplacements(host, replacements, moduleResolutionCache) {\n    if (Object.keys(replacements).length === 0) {\n        return;\n    }\n    const normalizedReplacements = {};\n    for (const [key, value] of Object.entries(replacements)) {\n        normalizedReplacements[(0, paths_1.normalizePath)(key)] = (0, paths_1.normalizePath)(value);\n    }\n    const tryReplace = (resolvedModule) => {\n        const replacement = resolvedModule && normalizedReplacements[resolvedModule.resolvedFileName];\n        if (replacement) {\n            return {\n                resolvedFileName: replacement,\n                isExternalLibraryImport: /[/\\\\]node_modules[/\\\\]/.test(replacement),\n            };\n        }\n        else {\n            return resolvedModule;\n        }\n    };\n    augmentResolveModuleNames(host, tryReplace, moduleResolutionCache);\n}\nexports.augmentHostWithReplacements = augmentHostWithReplacements;\nfunction augmentHostWithSubstitutions(host, substitutions) {\n    const regexSubstitutions = [];\n    for (const [key, value] of Object.entries(substitutions)) {\n        regexSubstitutions.push([new RegExp(`\\\\b${key}\\\\b`, 'g'), value]);\n    }\n    if (regexSubstitutions.length === 0) {\n        return;\n    }\n    const baseReadFile = host.readFile;\n    host.readFile = function (...parameters) {\n        let file = baseReadFile.call(host, ...parameters);\n        if (file) {\n            for (const entry of regexSubstitutions) {\n                file = file.replace(entry[0], entry[1]);\n            }\n        }\n        return file;\n    };\n}\nexports.augmentHostWithSubstitutions = augmentHostWithSubstitutions;\nfunction augmentHostWithVersioning(host) {\n    const baseGetSourceFile = host.getSourceFile;\n    host.getSourceFile = function (...parameters) {\n        const file = baseGetSourceFile.call(host, ...parameters);\n        if (file && file.version === undefined) {\n            file.version = (0, crypto_1.createHash)('sha256').update(file.text).digest('hex');\n        }\n        return file;\n    };\n}\nexports.augmentHostWithVersioning = augmentHostWithVersioning;\nfunction augmentProgramWithVersioning(program) {\n    const baseGetSourceFiles = program.getSourceFiles;\n    program.getSourceFiles = function (...parameters) {\n        const files = baseGetSourceFiles(...parameters);\n        for (const file of files) {\n            if (file.version === undefined) {\n                file.version = (0, crypto_1.createHash)('sha256').update(file.text).digest('hex');\n            }\n        }\n        return files;\n    };\n}\nexports.augmentProgramWithVersioning = augmentProgramWithVersioning;\nfunction augmentHostWithCaching(host, cache) {\n    const baseGetSourceFile = host.getSourceFile;\n    host.getSourceFile = function (fileName, languageVersion, onError, shouldCreateNewSourceFile, ...parameters) {\n        if (!shouldCreateNewSourceFile && cache.has(fileName)) {\n            return cache.get(fileName);\n        }\n        const file = baseGetSourceFile.call(host, fileName, languageVersion, onError, true, ...parameters);\n        if (file) {\n            cache.set(fileName, file);\n        }\n        return file;\n    };\n}\nexports.augmentHostWithCaching = augmentHostWithCaching;\n"]},"metadata":{},"sourceType":"script"}