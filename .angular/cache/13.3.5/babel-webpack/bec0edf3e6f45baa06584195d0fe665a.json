{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nconst taskManager = require(\"./managers/tasks\");\n\nconst patternManager = require(\"./managers/patterns\");\n\nconst async_1 = require(\"./providers/async\");\n\nconst stream_1 = require(\"./providers/stream\");\n\nconst sync_1 = require(\"./providers/sync\");\n\nconst settings_1 = require(\"./settings\");\n\nconst utils = require(\"./utils\");\n\nfunction FastGlob(_x, _x2) {\n  return _FastGlob.apply(this, arguments);\n} // https://github.com/typescript-eslint/typescript-eslint/issues/60\n// eslint-disable-next-line no-redeclare\n\n\nfunction _FastGlob() {\n  _FastGlob = _asyncToGenerator(function* (source, options) {\n    assertPatternsInput(source);\n    const works = getWorks(source, async_1.default, options);\n    const result = yield Promise.all(works);\n    return utils.array.flatten(result);\n  });\n  return _FastGlob.apply(this, arguments);\n}\n\n(function (FastGlob) {\n  function sync(source, options) {\n    assertPatternsInput(source);\n    const works = getWorks(source, sync_1.default, options);\n    return utils.array.flatten(works);\n  }\n\n  FastGlob.sync = sync;\n\n  function stream(source, options) {\n    assertPatternsInput(source);\n    const works = getWorks(source, stream_1.default, options);\n    /**\n     * The stream returned by the provider cannot work with an asynchronous iterator.\n     * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.\n     * This affects performance (+25%). I don't see best solution right now.\n     */\n\n    return utils.stream.merge(works);\n  }\n\n  FastGlob.stream = stream;\n\n  function generateTasks(source, options) {\n    assertPatternsInput(source);\n    const patterns = patternManager.transform([].concat(source));\n    const settings = new settings_1.default(options);\n    return taskManager.generate(patterns, settings);\n  }\n\n  FastGlob.generateTasks = generateTasks;\n\n  function isDynamicPattern(source, options) {\n    assertPatternsInput(source);\n    const settings = new settings_1.default(options);\n    return utils.pattern.isDynamicPattern(source, settings);\n  }\n\n  FastGlob.isDynamicPattern = isDynamicPattern;\n\n  function escapePath(source) {\n    assertPatternsInput(source);\n    return utils.path.escape(source);\n  }\n\n  FastGlob.escapePath = escapePath;\n})(FastGlob || (FastGlob = {}));\n\nfunction getWorks(source, _Provider, options) {\n  const patterns = patternManager.transform([].concat(source));\n  const settings = new settings_1.default(options);\n  const tasks = taskManager.generate(patterns, settings);\n  const provider = new _Provider(settings);\n  return tasks.map(provider.read, provider);\n}\n\nfunction assertPatternsInput(input) {\n  const source = [].concat(input);\n  const isValidSource = source.every(item => utils.string.isString(item) && !utils.string.isEmpty(item));\n\n  if (!isValidSource) {\n    throw new TypeError('Patterns must be a string (non empty) or an array of strings');\n  }\n}\n\nmodule.exports = FastGlob;","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/fast-glob/out/index.js"],"names":["taskManager","require","patternManager","async_1","stream_1","sync_1","settings_1","utils","FastGlob","source","options","assertPatternsInput","works","getWorks","default","result","Promise","all","array","flatten","sync","stream","merge","generateTasks","patterns","transform","concat","settings","generate","isDynamicPattern","pattern","escapePath","path","escape","_Provider","tasks","provider","map","read","input","isValidSource","every","item","string","isString","isEmpty","TypeError","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst taskManager = require(\"./managers/tasks\");\nconst patternManager = require(\"./managers/patterns\");\nconst async_1 = require(\"./providers/async\");\nconst stream_1 = require(\"./providers/stream\");\nconst sync_1 = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nconst utils = require(\"./utils\");\nasync function FastGlob(source, options) {\n    assertPatternsInput(source);\n    const works = getWorks(source, async_1.default, options);\n    const result = await Promise.all(works);\n    return utils.array.flatten(result);\n}\n// https://github.com/typescript-eslint/typescript-eslint/issues/60\n// eslint-disable-next-line no-redeclare\n(function (FastGlob) {\n    function sync(source, options) {\n        assertPatternsInput(source);\n        const works = getWorks(source, sync_1.default, options);\n        return utils.array.flatten(works);\n    }\n    FastGlob.sync = sync;\n    function stream(source, options) {\n        assertPatternsInput(source);\n        const works = getWorks(source, stream_1.default, options);\n        /**\n         * The stream returned by the provider cannot work with an asynchronous iterator.\n         * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.\n         * This affects performance (+25%). I don't see best solution right now.\n         */\n        return utils.stream.merge(works);\n    }\n    FastGlob.stream = stream;\n    function generateTasks(source, options) {\n        assertPatternsInput(source);\n        const patterns = patternManager.transform([].concat(source));\n        const settings = new settings_1.default(options);\n        return taskManager.generate(patterns, settings);\n    }\n    FastGlob.generateTasks = generateTasks;\n    function isDynamicPattern(source, options) {\n        assertPatternsInput(source);\n        const settings = new settings_1.default(options);\n        return utils.pattern.isDynamicPattern(source, settings);\n    }\n    FastGlob.isDynamicPattern = isDynamicPattern;\n    function escapePath(source) {\n        assertPatternsInput(source);\n        return utils.path.escape(source);\n    }\n    FastGlob.escapePath = escapePath;\n})(FastGlob || (FastGlob = {}));\nfunction getWorks(source, _Provider, options) {\n    const patterns = patternManager.transform([].concat(source));\n    const settings = new settings_1.default(options);\n    const tasks = taskManager.generate(patterns, settings);\n    const provider = new _Provider(settings);\n    return tasks.map(provider.read, provider);\n}\nfunction assertPatternsInput(input) {\n    const source = [].concat(input);\n    const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));\n    if (!isValidSource) {\n        throw new TypeError('Patterns must be a string (non empty) or an array of strings');\n    }\n}\nmodule.exports = FastGlob;\n"]},"metadata":{},"sourceType":"script"}