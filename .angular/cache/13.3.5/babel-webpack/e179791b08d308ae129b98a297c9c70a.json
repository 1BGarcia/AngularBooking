{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.purgeStaleBuildCache = void 0;\n\nconst fs_1 = require(\"fs\");\n\nconst path_1 = require(\"path\");\n\nconst normalize_cache_1 = require(\"./normalize-cache\");\n/** Delete stale cache directories used by previous versions of build-angular. */\n\n\nfunction purgeStaleBuildCache(_x) {\n  return _purgeStaleBuildCache.apply(this, arguments);\n}\n\nfunction _purgeStaleBuildCache() {\n  _purgeStaleBuildCache = _asyncToGenerator(function* (context) {\n    var _a;\n\n    const projectName = (_a = context.target) === null || _a === void 0 ? void 0 : _a.project;\n\n    if (!projectName) {\n      return;\n    }\n\n    const metadata = yield context.getProjectMetadata(projectName);\n    const {\n      basePath,\n      path,\n      enabled\n    } = (0, normalize_cache_1.normalizeCacheOptions)(metadata, context.workspaceRoot);\n\n    if (!enabled || !(0, fs_1.existsSync)(basePath)) {\n      return;\n    } // The below should be removed and replaced with just `rm` when support for Node.Js 12 is removed.\n\n\n    const {\n      rm,\n      rmdir\n    } = fs_1.promises;\n    const entriesToDelete = (yield fs_1.promises.readdir(basePath, {\n      withFileTypes: true\n    })).filter(d => (0, path_1.join)(basePath, d.name) !== path && d.isDirectory()).map(d => {\n      const subPath = (0, path_1.join)(basePath, d.name);\n\n      try {\n        return rm ? rm(subPath, {\n          force: true,\n          recursive: true,\n          maxRetries: 3\n        }) : rmdir(subPath, {\n          recursive: true,\n          maxRetries: 3\n        });\n      } catch {}\n    });\n    yield Promise.all(entriesToDelete);\n  });\n  return _purgeStaleBuildCache.apply(this, arguments);\n}\n\nexports.purgeStaleBuildCache = purgeStaleBuildCache;","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/@angular-devkit/build-angular/src/utils/purge-cache.js"],"names":["Object","defineProperty","exports","value","purgeStaleBuildCache","fs_1","require","path_1","normalize_cache_1","context","_a","projectName","target","project","metadata","getProjectMetadata","basePath","path","enabled","normalizeCacheOptions","workspaceRoot","existsSync","rm","rmdir","promises","entriesToDelete","readdir","withFileTypes","filter","d","join","name","isDirectory","map","subPath","force","recursive","maxRetries","Promise","all"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+B,KAAK,CAApC;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,IAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,mBAAD,CAAjC;AACA;;;SACeF,oB;;;;;4CAAf,WAAoCK,OAApC,EAA6C;AACzC,QAAIC,EAAJ;;AACA,UAAMC,WAAW,GAAG,CAACD,EAAE,GAAGD,OAAO,CAACG,MAAd,MAA0B,IAA1B,IAAkCF,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACG,OAAlF;;AACA,QAAI,CAACF,WAAL,EAAkB;AACd;AACH;;AACD,UAAMG,QAAQ,SAASL,OAAO,CAACM,kBAAR,CAA2BJ,WAA3B,CAAvB;AACA,UAAM;AAAEK,MAAAA,QAAF;AAAYC,MAAAA,IAAZ;AAAkBC,MAAAA;AAAlB,QAA8B,CAAC,GAAGV,iBAAiB,CAACW,qBAAtB,EAA6CL,QAA7C,EAAuDL,OAAO,CAACW,aAA/D,CAApC;;AACA,QAAI,CAACF,OAAD,IAAY,CAAC,CAAC,GAAGb,IAAI,CAACgB,UAAT,EAAqBL,QAArB,CAAjB,EAAiD;AAC7C;AACH,KAVwC,CAWzC;;;AACA,UAAM;AAAEM,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAgBlB,IAAI,CAACmB,QAA3B;AACA,UAAMC,eAAe,GAAG,OAAOpB,IAAI,CAACmB,QAAL,CAAcE,OAAd,CAAsBV,QAAtB,EAAgC;AAAEW,MAAAA,aAAa,EAAE;AAAjB,KAAhC,CAAP,EACnBC,MADmB,CACXC,CAAD,IAAO,CAAC,GAAGtB,MAAM,CAACuB,IAAX,EAAiBd,QAAjB,EAA2Ba,CAAC,CAACE,IAA7B,MAAuCd,IAAvC,IAA+CY,CAAC,CAACG,WAAF,EAD1C,EAEnBC,GAFmB,CAEdJ,CAAD,IAAO;AACZ,YAAMK,OAAO,GAAG,CAAC,GAAG3B,MAAM,CAACuB,IAAX,EAAiBd,QAAjB,EAA2Ba,CAAC,CAACE,IAA7B,CAAhB;;AACA,UAAI;AACA,eAAOT,EAAE,GACHA,EAAE,CAACY,OAAD,EAAU;AAAEC,UAAAA,KAAK,EAAE,IAAT;AAAeC,UAAAA,SAAS,EAAE,IAA1B;AAAgCC,UAAAA,UAAU,EAAE;AAA5C,SAAV,CADC,GAEHd,KAAK,CAACW,OAAD,EAAU;AAAEE,UAAAA,SAAS,EAAE,IAAb;AAAmBC,UAAAA,UAAU,EAAE;AAA/B,SAAV,CAFX;AAGH,OAJD,CAKA,MAAM,CAAG;AACZ,KAVuB,CAAxB;AAWA,UAAMC,OAAO,CAACC,GAAR,CAAYd,eAAZ,CAAN;AACH,G;;;;AACDvB,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.purgeStaleBuildCache = void 0;\nconst fs_1 = require(\"fs\");\nconst path_1 = require(\"path\");\nconst normalize_cache_1 = require(\"./normalize-cache\");\n/** Delete stale cache directories used by previous versions of build-angular. */\nasync function purgeStaleBuildCache(context) {\n    var _a;\n    const projectName = (_a = context.target) === null || _a === void 0 ? void 0 : _a.project;\n    if (!projectName) {\n        return;\n    }\n    const metadata = await context.getProjectMetadata(projectName);\n    const { basePath, path, enabled } = (0, normalize_cache_1.normalizeCacheOptions)(metadata, context.workspaceRoot);\n    if (!enabled || !(0, fs_1.existsSync)(basePath)) {\n        return;\n    }\n    // The below should be removed and replaced with just `rm` when support for Node.Js 12 is removed.\n    const { rm, rmdir } = fs_1.promises;\n    const entriesToDelete = (await fs_1.promises.readdir(basePath, { withFileTypes: true }))\n        .filter((d) => (0, path_1.join)(basePath, d.name) !== path && d.isDirectory())\n        .map((d) => {\n        const subPath = (0, path_1.join)(basePath, d.name);\n        try {\n            return rm\n                ? rm(subPath, { force: true, recursive: true, maxRetries: 3 })\n                : rmdir(subPath, { recursive: true, maxRetries: 3 });\n        }\n        catch { }\n    });\n    await Promise.all(entriesToDelete);\n}\nexports.purgeStaleBuildCache = purgeStaleBuildCache;\n"]},"metadata":{},"sourceType":"script"}