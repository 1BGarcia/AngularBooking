{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nconst isStream = require('is-stream');\n\nconst getStream = require('get-stream');\n\nconst mergeStream = require('merge-stream'); // `input` option\n\n\nconst handleInput = (spawned, input) => {\n  // Checking for stdin is workaround for https://github.com/nodejs/node/issues/26852\n  // @todo remove `|| spawned.stdin === undefined` once we drop support for Node.js <=12.2.0\n  if (input === undefined || spawned.stdin === undefined) {\n    return;\n  }\n\n  if (isStream(input)) {\n    input.pipe(spawned.stdin);\n  } else {\n    spawned.stdin.end(input);\n  }\n}; // `all` interleaves `stdout` and `stderr`\n\n\nconst makeAllStream = (spawned, {\n  all\n}) => {\n  if (!all || !spawned.stdout && !spawned.stderr) {\n    return;\n  }\n\n  const mixed = mergeStream();\n\n  if (spawned.stdout) {\n    mixed.add(spawned.stdout);\n  }\n\n  if (spawned.stderr) {\n    mixed.add(spawned.stderr);\n  }\n\n  return mixed;\n}; // On failure, `result.stdout|stderr|all` should contain the currently buffered stream\n\n\nconst getBufferedData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (stream, streamPromise) {\n    if (!stream) {\n      return;\n    }\n\n    stream.destroy();\n\n    try {\n      return yield streamPromise;\n    } catch (error) {\n      return error.bufferedData;\n    }\n  });\n\n  return function getBufferedData(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst getStreamPromise = (stream, {\n  encoding,\n  buffer,\n  maxBuffer\n}) => {\n  if (!stream || !buffer) {\n    return;\n  }\n\n  if (encoding) {\n    return getStream(stream, {\n      encoding,\n      maxBuffer\n    });\n  }\n\n  return getStream.buffer(stream, {\n    maxBuffer\n  });\n}; // Retrieve result of child process: exit code, signal, error, streams (stdout/stderr/all)\n\n\nconst getSpawnedResult = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* ({\n    stdout,\n    stderr,\n    all\n  }, {\n    encoding,\n    buffer,\n    maxBuffer\n  }, processDone) {\n    const stdoutPromise = getStreamPromise(stdout, {\n      encoding,\n      buffer,\n      maxBuffer\n    });\n    const stderrPromise = getStreamPromise(stderr, {\n      encoding,\n      buffer,\n      maxBuffer\n    });\n    const allPromise = getStreamPromise(all, {\n      encoding,\n      buffer,\n      maxBuffer: maxBuffer * 2\n    });\n\n    try {\n      return yield Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);\n    } catch (error) {\n      return Promise.all([{\n        error,\n        signal: error.signal,\n        timedOut: error.timedOut\n      }, getBufferedData(stdout, stdoutPromise), getBufferedData(stderr, stderrPromise), getBufferedData(all, allPromise)]);\n    }\n  });\n\n  return function getSpawnedResult(_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nconst validateInputSync = ({\n  input\n}) => {\n  if (isStream(input)) {\n    throw new TypeError('The `input` option cannot be a stream in sync mode');\n  }\n};\n\nmodule.exports = {\n  handleInput,\n  makeAllStream,\n  getSpawnedResult,\n  validateInputSync\n};","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/execa/lib/stream.js"],"names":["isStream","require","getStream","mergeStream","handleInput","spawned","input","undefined","stdin","pipe","end","makeAllStream","all","stdout","stderr","mixed","add","getBufferedData","stream","streamPromise","destroy","error","bufferedData","getStreamPromise","encoding","buffer","maxBuffer","getSpawnedResult","processDone","stdoutPromise","stderrPromise","allPromise","Promise","signal","timedOut","validateInputSync","TypeError","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst isStream = require('is-stream');\nconst getStream = require('get-stream');\nconst mergeStream = require('merge-stream');\n\n// `input` option\nconst handleInput = (spawned, input) => {\n\t// Checking for stdin is workaround for https://github.com/nodejs/node/issues/26852\n\t// @todo remove `|| spawned.stdin === undefined` once we drop support for Node.js <=12.2.0\n\tif (input === undefined || spawned.stdin === undefined) {\n\t\treturn;\n\t}\n\n\tif (isStream(input)) {\n\t\tinput.pipe(spawned.stdin);\n\t} else {\n\t\tspawned.stdin.end(input);\n\t}\n};\n\n// `all` interleaves `stdout` and `stderr`\nconst makeAllStream = (spawned, {all}) => {\n\tif (!all || (!spawned.stdout && !spawned.stderr)) {\n\t\treturn;\n\t}\n\n\tconst mixed = mergeStream();\n\n\tif (spawned.stdout) {\n\t\tmixed.add(spawned.stdout);\n\t}\n\n\tif (spawned.stderr) {\n\t\tmixed.add(spawned.stderr);\n\t}\n\n\treturn mixed;\n};\n\n// On failure, `result.stdout|stderr|all` should contain the currently buffered stream\nconst getBufferedData = async (stream, streamPromise) => {\n\tif (!stream) {\n\t\treturn;\n\t}\n\n\tstream.destroy();\n\n\ttry {\n\t\treturn await streamPromise;\n\t} catch (error) {\n\t\treturn error.bufferedData;\n\t}\n};\n\nconst getStreamPromise = (stream, {encoding, buffer, maxBuffer}) => {\n\tif (!stream || !buffer) {\n\t\treturn;\n\t}\n\n\tif (encoding) {\n\t\treturn getStream(stream, {encoding, maxBuffer});\n\t}\n\n\treturn getStream.buffer(stream, {maxBuffer});\n};\n\n// Retrieve result of child process: exit code, signal, error, streams (stdout/stderr/all)\nconst getSpawnedResult = async ({stdout, stderr, all}, {encoding, buffer, maxBuffer}, processDone) => {\n\tconst stdoutPromise = getStreamPromise(stdout, {encoding, buffer, maxBuffer});\n\tconst stderrPromise = getStreamPromise(stderr, {encoding, buffer, maxBuffer});\n\tconst allPromise = getStreamPromise(all, {encoding, buffer, maxBuffer: maxBuffer * 2});\n\n\ttry {\n\t\treturn await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);\n\t} catch (error) {\n\t\treturn Promise.all([\n\t\t\t{error, signal: error.signal, timedOut: error.timedOut},\n\t\t\tgetBufferedData(stdout, stdoutPromise),\n\t\t\tgetBufferedData(stderr, stderrPromise),\n\t\t\tgetBufferedData(all, allPromise)\n\t\t]);\n\t}\n};\n\nconst validateInputSync = ({input}) => {\n\tif (isStream(input)) {\n\t\tthrow new TypeError('The `input` option cannot be a stream in sync mode');\n\t}\n};\n\nmodule.exports = {\n\thandleInput,\n\tmakeAllStream,\n\tgetSpawnedResult,\n\tvalidateInputSync\n};\n\n"]},"metadata":{},"sourceType":"script"}