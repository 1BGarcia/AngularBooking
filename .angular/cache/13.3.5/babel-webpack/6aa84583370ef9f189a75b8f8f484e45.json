{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.postcss = void 0;\n\nconst loader_utils_1 = require(\"loader-utils\");\n\nconst path = __importStar(require(\"path\"));\n\nconst url = __importStar(require(\"url\"));\n\nfunction wrapUrl(url) {\n  let wrappedUrl;\n  const hasSingleQuotes = url.indexOf(\"'\") >= 0;\n\n  if (hasSingleQuotes) {\n    wrappedUrl = `\"${url}\"`;\n  } else {\n    wrappedUrl = `'${url}'`;\n  }\n\n  return `url(${wrappedUrl})`;\n}\n\nfunction resolve(_x, _x2, _x3) {\n  return _resolve.apply(this, arguments);\n}\n\nfunction _resolve() {\n  _resolve = _asyncToGenerator(function* (file, base, resolver) {\n    try {\n      return yield resolver('./' + file, base);\n    } catch {\n      return resolver(file, base);\n    }\n  });\n  return _resolve.apply(this, arguments);\n}\n\nexports.postcss = true;\n\nfunction default_1(options) {\n  if (!options) {\n    throw new Error('No options were specified to \"postcss-cli-resources\".');\n  }\n\n  const {\n    deployUrl = '',\n    resourcesOutputPath = '',\n    filename,\n    loader,\n    emitFile,\n    extracted\n  } = options;\n\n  const process = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (inputUrl, context, resourceCache) {\n      // If root-relative, absolute or protocol relative url, leave as is\n      if (/^((?:\\w+:)?\\/\\/|data:|chrome:|#)/.test(inputUrl)) {\n        return inputUrl;\n      }\n\n      if (/^\\//.test(inputUrl)) {\n        return inputUrl;\n      } // If starts with a caret, remove and return remainder\n      // this supports bypassing asset processing\n\n\n      if (inputUrl.startsWith('^')) {\n        return inputUrl.substr(1);\n      }\n\n      const cacheKey = path.resolve(context, inputUrl);\n      const cachedUrl = resourceCache.get(cacheKey);\n\n      if (cachedUrl) {\n        return cachedUrl;\n      }\n\n      if (inputUrl.startsWith('~')) {\n        inputUrl = inputUrl.substr(1);\n      }\n\n      const {\n        pathname,\n        hash,\n        search\n      } = url.parse(inputUrl.replace(/\\\\/g, '/'));\n\n      const resolver = (file, base) => new Promise((resolve, reject) => {\n        loader.resolve(base, decodeURI(file), (err, result) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n\n          resolve(result);\n        });\n      });\n\n      const result = yield resolve(pathname, context, resolver);\n      return new Promise((resolve, reject) => {\n        loader.fs.readFile(result, (err, content) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n\n          let outputPath = (0, loader_utils_1.interpolateName)({\n            resourcePath: result\n          }, filename(result), {\n            content,\n            context: loader.context || loader.rootContext\n          }).replace(/\\\\|\\//g, '-');\n\n          if (resourcesOutputPath) {\n            outputPath = path.posix.join(resourcesOutputPath, outputPath);\n          }\n\n          loader.addDependency(result);\n\n          if (emitFile) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            loader.emitFile(outputPath, content, undefined, {\n              sourceFilename: result\n            });\n          }\n\n          let outputUrl = outputPath.replace(/\\\\/g, '/');\n\n          if (hash || search) {\n            outputUrl = url.format({\n              pathname: outputUrl,\n              hash,\n              search\n            });\n          }\n\n          if (deployUrl && !extracted) {\n            outputUrl = url.resolve(deployUrl, outputUrl);\n          }\n\n          resourceCache.set(cacheKey, outputUrl);\n          resolve(outputUrl);\n        });\n      });\n    });\n\n    return function process(_x4, _x5, _x6) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const resourceCache = new Map();\n  const processed = Symbol('postcss-cli-resources');\n  return {\n    postcssPlugin: 'postcss-cli-resources',\n\n    Declaration(decl) {\n      return _asyncToGenerator(function* () {\n        if (!decl.value.includes('url') || processed in decl) {\n          return;\n        }\n\n        const value = decl.value;\n        const urlRegex = /url\\(\\s*(?:\"([^\"]+)\"|'([^']+)'|(.+?))\\s*\\)/g;\n        const segments = [];\n        let match;\n        let lastIndex = 0;\n        let modified = false; // We want to load it relative to the file that imports\n\n        const inputFile = decl.source && decl.source.input.file;\n        const context = inputFile && path.dirname(inputFile) || loader.context; // eslint-disable-next-line no-cond-assign\n\n        while (match = urlRegex.exec(value)) {\n          const originalUrl = match[1] || match[2] || match[3];\n          let processedUrl;\n\n          try {\n            processedUrl = yield process(originalUrl, context, resourceCache);\n          } catch (err) {\n            loader.emitError(decl.error(err.message, {\n              word: originalUrl\n            }));\n            continue;\n          }\n\n          if (lastIndex < match.index) {\n            segments.push(value.slice(lastIndex, match.index));\n          }\n\n          if (!processedUrl || originalUrl === processedUrl) {\n            segments.push(match[0]);\n          } else {\n            segments.push(wrapUrl(processedUrl));\n            modified = true;\n          }\n\n          lastIndex = match.index + match[0].length;\n        }\n\n        if (lastIndex < value.length) {\n          segments.push(value.slice(lastIndex));\n        }\n\n        if (modified) {\n          decl.value = segments.join('');\n        }\n\n        decl[processed] = true;\n      })();\n    }\n\n  };\n}\n\nexports.default = default_1;","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/@angular-devkit/build-angular/src/webpack/plugins/postcss-cli-resources.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","postcss","loader_utils_1","require","path","url","wrapUrl","wrappedUrl","hasSingleQuotes","indexOf","resolve","file","base","resolver","default_1","options","Error","deployUrl","resourcesOutputPath","filename","loader","emitFile","extracted","process","inputUrl","context","resourceCache","test","startsWith","substr","cacheKey","cachedUrl","pathname","hash","search","parse","replace","Promise","reject","decodeURI","err","fs","readFile","content","outputPath","interpolateName","resourcePath","rootContext","posix","join","addDependency","sourceFilename","outputUrl","format","set","Map","processed","Symbol","postcssPlugin","Declaration","decl","includes","urlRegex","segments","match","lastIndex","modified","inputFile","source","input","dirname","exec","originalUrl","processedUrl","emitError","error","message","word","index","push","slice","length","default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,KAAmCC,MAAM,CAACC,MAAP,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,EAAlB,EAAsB;AAC5F,MAAIA,EAAE,KAAKC,SAAX,EAAsBD,EAAE,GAAGD,CAAL;AACtB,MAAIG,IAAI,GAAGP,MAAM,CAACQ,wBAAP,CAAgCL,CAAhC,EAAmCC,CAAnC,CAAX;;AACA,MAAI,CAACG,IAAD,KAAU,SAASA,IAAT,GAAgB,CAACJ,CAAC,CAACM,UAAnB,GAAgCF,IAAI,CAACG,QAAL,IAAiBH,IAAI,CAACI,YAAhE,CAAJ,EAAmF;AACjFJ,IAAAA,IAAI,GAAG;AAAEK,MAAAA,UAAU,EAAE,IAAd;AAAoBC,MAAAA,GAAG,EAAE,YAAW;AAAE,eAAOV,CAAC,CAACC,CAAD,CAAR;AAAc;AAApD,KAAP;AACD;;AACDJ,EAAAA,MAAM,CAACc,cAAP,CAAsBZ,CAAtB,EAAyBG,EAAzB,EAA6BE,IAA7B;AACH,CAPwD,GAOnD,UAASL,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,EAAlB,EAAsB;AACxB,MAAIA,EAAE,KAAKC,SAAX,EAAsBD,EAAE,GAAGD,CAAL;AACtBF,EAAAA,CAAC,CAACG,EAAD,CAAD,GAAQF,CAAC,CAACC,CAAD,CAAT;AACH,CAVqB,CAAtB;;AAWA,IAAIW,kBAAkB,GAAI,QAAQ,KAAKA,kBAAd,KAAsCf,MAAM,CAACC,MAAP,GAAiB,UAASC,CAAT,EAAYc,CAAZ,EAAe;AAC3FhB,EAAAA,MAAM,CAACc,cAAP,CAAsBZ,CAAtB,EAAyB,SAAzB,EAAoC;AAAEU,IAAAA,UAAU,EAAE,IAAd;AAAoBK,IAAAA,KAAK,EAAED;AAA3B,GAApC;AACH,CAF8D,GAE1D,UAASd,CAAT,EAAYc,CAAZ,EAAe;AAChBd,EAAAA,CAAC,CAAC,SAAD,CAAD,GAAec,CAAf;AACH,CAJwB,CAAzB;;AAKA,IAAIE,YAAY,GAAI,QAAQ,KAAKA,YAAd,IAA+B,UAAUC,GAAV,EAAe;AAC7D,MAAIA,GAAG,IAAIA,GAAG,CAACV,UAAf,EAA2B,OAAOU,GAAP;AAC3B,MAAIC,MAAM,GAAG,EAAb;AACA,MAAID,GAAG,IAAI,IAAX,EAAiB,KAAK,IAAIf,CAAT,IAAce,GAAd,EAAmB,IAAIf,CAAC,KAAK,SAAN,IAAmBJ,MAAM,CAACqB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,GAArC,EAA0Cf,CAA1C,CAAvB,EAAqEL,eAAe,CAACqB,MAAD,EAASD,GAAT,EAAcf,CAAd,CAAf;;AACzGW,EAAAA,kBAAkB,CAACK,MAAD,EAASD,GAAT,CAAlB;;AACA,SAAOC,MAAP;AACH,CAND;;AAOApB,MAAM,CAACc,cAAP,CAAsBU,OAAtB,EAA+B,YAA/B,EAA6C;AAAEP,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAO,OAAO,CAACC,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,cAAD,CAA9B;;AACA,MAAMC,IAAI,GAAGV,YAAY,CAACS,OAAO,CAAC,MAAD,CAAR,CAAzB;;AACA,MAAME,GAAG,GAAGX,YAAY,CAACS,OAAO,CAAC,KAAD,CAAR,CAAxB;;AACA,SAASG,OAAT,CAAiBD,GAAjB,EAAsB;AAClB,MAAIE,UAAJ;AACA,QAAMC,eAAe,GAAGH,GAAG,CAACI,OAAJ,CAAY,GAAZ,KAAoB,CAA5C;;AACA,MAAID,eAAJ,EAAqB;AACjBD,IAAAA,UAAU,GAAI,IAAGF,GAAI,GAArB;AACH,GAFD,MAGK;AACDE,IAAAA,UAAU,GAAI,IAAGF,GAAI,GAArB;AACH;;AACD,SAAQ,OAAME,UAAW,GAAzB;AACH;;SACcG,O;;;;;+BAAf,WAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,QAAnC,EAA6C;AACzC,QAAI;AACA,mBAAaA,QAAQ,CAAC,OAAOF,IAAR,EAAcC,IAAd,CAArB;AACH,KAFD,CAGA,MAAM;AACF,aAAOC,QAAQ,CAACF,IAAD,EAAOC,IAAP,CAAf;AACH;AACJ,G;;;;AACDZ,OAAO,CAACC,OAAR,GAAkB,IAAlB;;AACA,SAASa,SAAT,CAAmBC,OAAnB,EAA4B;AACxB,MAAI,CAACA,OAAL,EAAc;AACV,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;AACD,QAAM;AAAEC,IAAAA,SAAS,GAAG,EAAd;AAAkBC,IAAAA,mBAAmB,GAAG,EAAxC;AAA4CC,IAAAA,QAA5C;AAAsDC,IAAAA,MAAtD;AAA8DC,IAAAA,QAA9D;AAAwEC,IAAAA;AAAxE,MAAuFP,OAA7F;;AACA,QAAMQ,OAAO;AAAA,iCAAG,WAAOC,QAAP,EAAiBC,OAAjB,EAA0BC,aAA1B,EAA4C;AACxD;AACA,UAAI,mCAAmCC,IAAnC,CAAwCH,QAAxC,CAAJ,EAAuD;AACnD,eAAOA,QAAP;AACH;;AACD,UAAI,MAAMG,IAAN,CAAWH,QAAX,CAAJ,EAA0B;AACtB,eAAOA,QAAP;AACH,OAPuD,CAQxD;AACA;;;AACA,UAAIA,QAAQ,CAACI,UAAT,CAAoB,GAApB,CAAJ,EAA8B;AAC1B,eAAOJ,QAAQ,CAACK,MAAT,CAAgB,CAAhB,CAAP;AACH;;AACD,YAAMC,QAAQ,GAAG1B,IAAI,CAACM,OAAL,CAAae,OAAb,EAAsBD,QAAtB,CAAjB;AACA,YAAMO,SAAS,GAAGL,aAAa,CAACrC,GAAd,CAAkByC,QAAlB,CAAlB;;AACA,UAAIC,SAAJ,EAAe;AACX,eAAOA,SAAP;AACH;;AACD,UAAIP,QAAQ,CAACI,UAAT,CAAoB,GAApB,CAAJ,EAA8B;AAC1BJ,QAAAA,QAAQ,GAAGA,QAAQ,CAACK,MAAT,CAAgB,CAAhB,CAAX;AACH;;AACD,YAAM;AAAEG,QAAAA,QAAF;AAAYC,QAAAA,IAAZ;AAAkBC,QAAAA;AAAlB,UAA6B7B,GAAG,CAAC8B,KAAJ,CAAUX,QAAQ,CAACY,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAAV,CAAnC;;AACA,YAAMvB,QAAQ,GAAG,CAACF,IAAD,EAAOC,IAAP,KAAgB,IAAIyB,OAAJ,CAAY,CAAC3B,OAAD,EAAU4B,MAAV,KAAqB;AAC9DlB,QAAAA,MAAM,CAACV,OAAP,CAAeE,IAAf,EAAqB2B,SAAS,CAAC5B,IAAD,CAA9B,EAAsC,CAAC6B,GAAD,EAAM5C,MAAN,KAAiB;AACnD,cAAI4C,GAAJ,EAAS;AACLF,YAAAA,MAAM,CAACE,GAAD,CAAN;AACA;AACH;;AACD9B,UAAAA,OAAO,CAACd,MAAD,CAAP;AACH,SAND;AAOH,OARgC,CAAjC;;AASA,YAAMA,MAAM,SAASc,OAAO,CAACsB,QAAD,EAAWP,OAAX,EAAoBZ,QAApB,CAA5B;AACA,aAAO,IAAIwB,OAAJ,CAAY,CAAC3B,OAAD,EAAU4B,MAAV,KAAqB;AACpClB,QAAAA,MAAM,CAACqB,EAAP,CAAUC,QAAV,CAAmB9C,MAAnB,EAA2B,CAAC4C,GAAD,EAAMG,OAAN,KAAkB;AACzC,cAAIH,GAAJ,EAAS;AACLF,YAAAA,MAAM,CAACE,GAAD,CAAN;AACA;AACH;;AACD,cAAII,UAAU,GAAG,CAAC,GAAG1C,cAAc,CAAC2C,eAAnB,EAAoC;AAAEC,YAAAA,YAAY,EAAElD;AAAhB,WAApC,EAA8DuB,QAAQ,CAACvB,MAAD,CAAtE,EAAgF;AAC7F+C,YAAAA,OAD6F;AAE7FlB,YAAAA,OAAO,EAAEL,MAAM,CAACK,OAAP,IAAkBL,MAAM,CAAC2B;AAF2D,WAAhF,EAGdX,OAHc,CAGN,QAHM,EAGI,GAHJ,CAAjB;;AAIA,cAAIlB,mBAAJ,EAAyB;AACrB0B,YAAAA,UAAU,GAAGxC,IAAI,CAAC4C,KAAL,CAAWC,IAAX,CAAgB/B,mBAAhB,EAAqC0B,UAArC,CAAb;AACH;;AACDxB,UAAAA,MAAM,CAAC8B,aAAP,CAAqBtD,MAArB;;AACA,cAAIyB,QAAJ,EAAc;AACV;AACAD,YAAAA,MAAM,CAACC,QAAP,CAAgBuB,UAAhB,EAA4BD,OAA5B,EAAqC7D,SAArC,EAAgD;AAAEqE,cAAAA,cAAc,EAAEvD;AAAlB,aAAhD;AACH;;AACD,cAAIwD,SAAS,GAAGR,UAAU,CAACR,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAhB;;AACA,cAAIH,IAAI,IAAIC,MAAZ,EAAoB;AAChBkB,YAAAA,SAAS,GAAG/C,GAAG,CAACgD,MAAJ,CAAW;AAAErB,cAAAA,QAAQ,EAAEoB,SAAZ;AAAuBnB,cAAAA,IAAvB;AAA6BC,cAAAA;AAA7B,aAAX,CAAZ;AACH;;AACD,cAAIjB,SAAS,IAAI,CAACK,SAAlB,EAA6B;AACzB8B,YAAAA,SAAS,GAAG/C,GAAG,CAACK,OAAJ,CAAYO,SAAZ,EAAuBmC,SAAvB,CAAZ;AACH;;AACD1B,UAAAA,aAAa,CAAC4B,GAAd,CAAkBxB,QAAlB,EAA4BsB,SAA5B;AACA1C,UAAAA,OAAO,CAAC0C,SAAD,CAAP;AACH,SA1BD;AA2BH,OA5BM,CAAP;AA6BH,KA7DY;;AAAA,oBAAP7B,OAAO;AAAA;AAAA;AAAA,KAAb;;AA8DA,QAAMG,aAAa,GAAG,IAAI6B,GAAJ,EAAtB;AACA,QAAMC,SAAS,GAAGC,MAAM,CAAC,uBAAD,CAAxB;AACA,SAAO;AACHC,IAAAA,aAAa,EAAE,uBADZ;;AAEGC,IAAAA,WAAN,CAAkBC,IAAlB,EAAwB;AAAA;AACpB,YAAI,CAACA,IAAI,CAACnE,KAAL,CAAWoE,QAAX,CAAoB,KAApB,CAAD,IAA+BL,SAAS,IAAII,IAAhD,EAAsD;AAClD;AACH;;AACD,cAAMnE,KAAK,GAAGmE,IAAI,CAACnE,KAAnB;AACA,cAAMqE,QAAQ,GAAG,6CAAjB;AACA,cAAMC,QAAQ,GAAG,EAAjB;AACA,YAAIC,KAAJ;AACA,YAAIC,SAAS,GAAG,CAAhB;AACA,YAAIC,QAAQ,GAAG,KAAf,CAToB,CAUpB;;AACA,cAAMC,SAAS,GAAGP,IAAI,CAACQ,MAAL,IAAeR,IAAI,CAACQ,MAAL,CAAYC,KAAZ,CAAkB1D,IAAnD;AACA,cAAMc,OAAO,GAAI0C,SAAS,IAAI/D,IAAI,CAACkE,OAAL,CAAaH,SAAb,CAAd,IAA0C/C,MAAM,CAACK,OAAjE,CAZoB,CAapB;;AACA,eAAQuC,KAAK,GAAGF,QAAQ,CAACS,IAAT,CAAc9E,KAAd,CAAhB,EAAuC;AACnC,gBAAM+E,WAAW,GAAGR,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAjB,IAAwBA,KAAK,CAAC,CAAD,CAAjD;AACA,cAAIS,YAAJ;;AACA,cAAI;AACAA,YAAAA,YAAY,SAASlD,OAAO,CAACiD,WAAD,EAAc/C,OAAd,EAAuBC,aAAvB,CAA5B;AACH,WAFD,CAGA,OAAOc,GAAP,EAAY;AACRpB,YAAAA,MAAM,CAACsD,SAAP,CAAiBd,IAAI,CAACe,KAAL,CAAWnC,GAAG,CAACoC,OAAf,EAAwB;AAAEC,cAAAA,IAAI,EAAEL;AAAR,aAAxB,CAAjB;AACA;AACH;;AACD,cAAIP,SAAS,GAAGD,KAAK,CAACc,KAAtB,EAA6B;AACzBf,YAAAA,QAAQ,CAACgB,IAAT,CAActF,KAAK,CAACuF,KAAN,CAAYf,SAAZ,EAAuBD,KAAK,CAACc,KAA7B,CAAd;AACH;;AACD,cAAI,CAACL,YAAD,IAAiBD,WAAW,KAAKC,YAArC,EAAmD;AAC/CV,YAAAA,QAAQ,CAACgB,IAAT,CAAcf,KAAK,CAAC,CAAD,CAAnB;AACH,WAFD,MAGK;AACDD,YAAAA,QAAQ,CAACgB,IAAT,CAAczE,OAAO,CAACmE,YAAD,CAArB;AACAP,YAAAA,QAAQ,GAAG,IAAX;AACH;;AACDD,UAAAA,SAAS,GAAGD,KAAK,CAACc,KAAN,GAAcd,KAAK,CAAC,CAAD,CAAL,CAASiB,MAAnC;AACH;;AACD,YAAIhB,SAAS,GAAGxE,KAAK,CAACwF,MAAtB,EAA8B;AAC1BlB,UAAAA,QAAQ,CAACgB,IAAT,CAActF,KAAK,CAACuF,KAAN,CAAYf,SAAZ,CAAd;AACH;;AACD,YAAIC,QAAJ,EAAc;AACVN,UAAAA,IAAI,CAACnE,KAAL,GAAasE,QAAQ,CAACd,IAAT,CAAc,EAAd,CAAb;AACH;;AACDW,QAAAA,IAAI,CAACJ,SAAD,CAAJ,GAAkB,IAAlB;AA1CoB;AA2CvB;;AA7CE,GAAP;AA+CH;;AACDxD,OAAO,CAACkF,OAAR,GAAkBpE,SAAlB","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.postcss = void 0;\nconst loader_utils_1 = require(\"loader-utils\");\nconst path = __importStar(require(\"path\"));\nconst url = __importStar(require(\"url\"));\nfunction wrapUrl(url) {\n    let wrappedUrl;\n    const hasSingleQuotes = url.indexOf(\"'\") >= 0;\n    if (hasSingleQuotes) {\n        wrappedUrl = `\"${url}\"`;\n    }\n    else {\n        wrappedUrl = `'${url}'`;\n    }\n    return `url(${wrappedUrl})`;\n}\nasync function resolve(file, base, resolver) {\n    try {\n        return await resolver('./' + file, base);\n    }\n    catch {\n        return resolver(file, base);\n    }\n}\nexports.postcss = true;\nfunction default_1(options) {\n    if (!options) {\n        throw new Error('No options were specified to \"postcss-cli-resources\".');\n    }\n    const { deployUrl = '', resourcesOutputPath = '', filename, loader, emitFile, extracted, } = options;\n    const process = async (inputUrl, context, resourceCache) => {\n        // If root-relative, absolute or protocol relative url, leave as is\n        if (/^((?:\\w+:)?\\/\\/|data:|chrome:|#)/.test(inputUrl)) {\n            return inputUrl;\n        }\n        if (/^\\//.test(inputUrl)) {\n            return inputUrl;\n        }\n        // If starts with a caret, remove and return remainder\n        // this supports bypassing asset processing\n        if (inputUrl.startsWith('^')) {\n            return inputUrl.substr(1);\n        }\n        const cacheKey = path.resolve(context, inputUrl);\n        const cachedUrl = resourceCache.get(cacheKey);\n        if (cachedUrl) {\n            return cachedUrl;\n        }\n        if (inputUrl.startsWith('~')) {\n            inputUrl = inputUrl.substr(1);\n        }\n        const { pathname, hash, search } = url.parse(inputUrl.replace(/\\\\/g, '/'));\n        const resolver = (file, base) => new Promise((resolve, reject) => {\n            loader.resolve(base, decodeURI(file), (err, result) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve(result);\n            });\n        });\n        const result = await resolve(pathname, context, resolver);\n        return new Promise((resolve, reject) => {\n            loader.fs.readFile(result, (err, content) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                let outputPath = (0, loader_utils_1.interpolateName)({ resourcePath: result }, filename(result), {\n                    content,\n                    context: loader.context || loader.rootContext,\n                }).replace(/\\\\|\\//g, '-');\n                if (resourcesOutputPath) {\n                    outputPath = path.posix.join(resourcesOutputPath, outputPath);\n                }\n                loader.addDependency(result);\n                if (emitFile) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    loader.emitFile(outputPath, content, undefined, { sourceFilename: result });\n                }\n                let outputUrl = outputPath.replace(/\\\\/g, '/');\n                if (hash || search) {\n                    outputUrl = url.format({ pathname: outputUrl, hash, search });\n                }\n                if (deployUrl && !extracted) {\n                    outputUrl = url.resolve(deployUrl, outputUrl);\n                }\n                resourceCache.set(cacheKey, outputUrl);\n                resolve(outputUrl);\n            });\n        });\n    };\n    const resourceCache = new Map();\n    const processed = Symbol('postcss-cli-resources');\n    return {\n        postcssPlugin: 'postcss-cli-resources',\n        async Declaration(decl) {\n            if (!decl.value.includes('url') || processed in decl) {\n                return;\n            }\n            const value = decl.value;\n            const urlRegex = /url\\(\\s*(?:\"([^\"]+)\"|'([^']+)'|(.+?))\\s*\\)/g;\n            const segments = [];\n            let match;\n            let lastIndex = 0;\n            let modified = false;\n            // We want to load it relative to the file that imports\n            const inputFile = decl.source && decl.source.input.file;\n            const context = (inputFile && path.dirname(inputFile)) || loader.context;\n            // eslint-disable-next-line no-cond-assign\n            while ((match = urlRegex.exec(value))) {\n                const originalUrl = match[1] || match[2] || match[3];\n                let processedUrl;\n                try {\n                    processedUrl = await process(originalUrl, context, resourceCache);\n                }\n                catch (err) {\n                    loader.emitError(decl.error(err.message, { word: originalUrl }));\n                    continue;\n                }\n                if (lastIndex < match.index) {\n                    segments.push(value.slice(lastIndex, match.index));\n                }\n                if (!processedUrl || originalUrl === processedUrl) {\n                    segments.push(match[0]);\n                }\n                else {\n                    segments.push(wrapUrl(processedUrl));\n                    modified = true;\n                }\n                lastIndex = match.index + match[0].length;\n            }\n            if (lastIndex < value.length) {\n                segments.push(value.slice(lastIndex));\n            }\n            if (modified) {\n                decl.value = segments.join('');\n            }\n            decl[processed] = true;\n        },\n    };\n}\nexports.default = default_1;\n"]},"metadata":{},"sourceType":"script"}