{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst assert = require('assert');\n\nconst logger = require('./logger');\n\nconst log = logger.create('config');\n\nconst helper = require('./helper');\n\nconst constant = require('./constants');\n\nconst _ = require('lodash');\n\nlet COFFEE_SCRIPT_AVAILABLE = false;\nlet LIVE_SCRIPT_AVAILABLE = false;\nlet TYPE_SCRIPT_AVAILABLE = false;\n\ntry {\n  require('coffeescript').register();\n\n  COFFEE_SCRIPT_AVAILABLE = true;\n} catch {} // LiveScript is required here to enable config files written in LiveScript.\n// It's not directly used in this file.\n\n\ntry {\n  require('LiveScript');\n\n  LIVE_SCRIPT_AVAILABLE = true;\n} catch {}\n\ntry {\n  require('ts-node');\n\n  TYPE_SCRIPT_AVAILABLE = true;\n} catch {}\n\nclass Pattern {\n  constructor(pattern, served, included, watched, nocache, type, isBinary) {\n    this.pattern = pattern;\n    this.served = helper.isDefined(served) ? served : true;\n    this.included = helper.isDefined(included) ? included : true;\n    this.watched = helper.isDefined(watched) ? watched : true;\n    this.nocache = helper.isDefined(nocache) ? nocache : false;\n    this.weight = helper.mmPatternWeight(pattern);\n    this.type = type;\n    this.isBinary = isBinary;\n  }\n\n  compare(other) {\n    return helper.mmComparePatternWeights(this.weight, other.weight);\n  }\n\n}\n\nclass UrlPattern extends Pattern {\n  constructor(url, type) {\n    super(url, false, true, false, false, type);\n  }\n\n}\n\nfunction createPatternObject(pattern) {\n  if (pattern && helper.isString(pattern)) {\n    return helper.isUrlAbsolute(pattern) ? new UrlPattern(pattern) : new Pattern(pattern);\n  } else if (helper.isObject(pattern) && pattern.pattern && helper.isString(pattern.pattern)) {\n    return helper.isUrlAbsolute(pattern.pattern) ? new UrlPattern(pattern.pattern, pattern.type) : new Pattern(pattern.pattern, pattern.served, pattern.included, pattern.watched, pattern.nocache, pattern.type);\n  } else {\n    log.warn(`Invalid pattern ${pattern}!\\n\\tExpected string or object with \"pattern\" property.`);\n    return new Pattern(null, false, false, false, false);\n  }\n}\n\nfunction normalizeUrl(url) {\n  if (!url.startsWith('/')) {\n    url = `/${url}`;\n  }\n\n  if (!url.endsWith('/')) {\n    url = url + '/';\n  }\n\n  return url;\n}\n\nfunction normalizeUrlRoot(urlRoot) {\n  const normalizedUrlRoot = normalizeUrl(urlRoot);\n\n  if (normalizedUrlRoot !== urlRoot) {\n    log.warn(`urlRoot normalized to \"${normalizedUrlRoot}\"`);\n  }\n\n  return normalizedUrlRoot;\n}\n\nfunction normalizeProxyPath(proxyPath) {\n  const normalizedProxyPath = normalizeUrl(proxyPath);\n\n  if (normalizedProxyPath !== proxyPath) {\n    log.warn(`proxyPath normalized to \"${normalizedProxyPath}\"`);\n  }\n\n  return normalizedProxyPath;\n}\n\nfunction normalizeConfig(config, configFilePath) {\n  function basePathResolve(relativePath) {\n    if (helper.isUrlAbsolute(relativePath)) {\n      return relativePath;\n    } else if (helper.isDefined(config.basePath) && helper.isDefined(relativePath)) {\n      return path.resolve(config.basePath, relativePath);\n    } else {\n      return '';\n    }\n  }\n\n  function createPatternMapper(resolve) {\n    return objectPattern => Object.assign(objectPattern, {\n      pattern: resolve(objectPattern.pattern)\n    });\n  }\n\n  if (helper.isString(configFilePath)) {\n    config.basePath = path.resolve(path.dirname(configFilePath), config.basePath); // resolve basePath\n\n    config.exclude.push(configFilePath); // always ignore the config file itself\n  } else {\n    config.basePath = path.resolve(config.basePath || '.');\n  }\n\n  config.files = config.files.map(createPatternObject).map(createPatternMapper(basePathResolve));\n  config.exclude = config.exclude.map(basePathResolve);\n  config.customContextFile = config.customContextFile && basePathResolve(config.customContextFile);\n  config.customDebugFile = config.customDebugFile && basePathResolve(config.customDebugFile);\n  config.customClientContextFile = config.customClientContextFile && basePathResolve(config.customClientContextFile); // normalize paths on windows\n\n  config.basePath = helper.normalizeWinPath(config.basePath);\n  config.files = config.files.map(createPatternMapper(helper.normalizeWinPath));\n  config.exclude = config.exclude.map(helper.normalizeWinPath);\n  config.customContextFile = helper.normalizeWinPath(config.customContextFile);\n  config.customDebugFile = helper.normalizeWinPath(config.customDebugFile);\n  config.customClientContextFile = helper.normalizeWinPath(config.customClientContextFile); // normalize urlRoot\n\n  config.urlRoot = normalizeUrlRoot(config.urlRoot); // normalize and default upstream proxy settings if given\n\n  if (config.upstreamProxy) {\n    const proxy = config.upstreamProxy;\n    proxy.path = helper.isDefined(proxy.path) ? normalizeProxyPath(proxy.path) : '/';\n    proxy.hostname = helper.isDefined(proxy.hostname) ? proxy.hostname : 'localhost';\n    proxy.port = helper.isDefined(proxy.port) ? proxy.port : 9875; // force protocol to end with ':'\n\n    proxy.protocol = (proxy.protocol || 'http').split(':')[0] + ':';\n\n    if (proxy.protocol.match(/https?:/) === null) {\n      log.warn(`\"${proxy.protocol}\" is not a supported upstream proxy protocol, defaulting to \"http:\"`);\n      proxy.protocol = 'http:';\n    }\n  } // force protocol to end with ':'\n\n\n  config.protocol = (config.protocol || 'http').split(':')[0] + ':';\n\n  if (config.protocol.match(/https?:/) === null) {\n    log.warn(`\"${config.protocol}\" is not a supported protocol, defaulting to \"http:\"`);\n    config.protocol = 'http:';\n  }\n\n  if (config.proxies && Object.prototype.hasOwnProperty.call(config.proxies, config.urlRoot)) {\n    log.warn(`\"${config.urlRoot}\" is proxied, you should probably change urlRoot to avoid conflicts`);\n  }\n\n  if (config.singleRun && config.autoWatch) {\n    log.debug('autoWatch set to false, because of singleRun');\n    config.autoWatch = false;\n  }\n\n  if (config.runInParent) {\n    log.debug('useIframe set to false, because using runInParent');\n    config.useIframe = false;\n  }\n\n  if (!config.singleRun && !config.useIframe && config.runInParent) {\n    log.debug('singleRun set to true, because using runInParent');\n    config.singleRun = true;\n  }\n\n  if (helper.isString(config.reporters)) {\n    config.reporters = config.reporters.split(',');\n  }\n\n  if (config.client && config.client.args) {\n    assert(Array.isArray(config.client.args), 'Invalid configuration: client.args must be an array of strings');\n  }\n\n  if (config.browsers) {\n    assert(Array.isArray(config.browsers), 'Invalid configuration: browsers option must be an array');\n  }\n\n  if (config.formatError) {\n    assert(helper.isFunction(config.formatError), 'Invalid configuration: formatError option must be a function.');\n  }\n\n  if (config.processKillTimeout) {\n    assert(helper.isNumber(config.processKillTimeout), 'Invalid configuration: processKillTimeout option must be a number.');\n  }\n\n  if (config.browserSocketTimeout) {\n    assert(helper.isNumber(config.browserSocketTimeout), 'Invalid configuration: browserSocketTimeout option must be a number.');\n  }\n\n  if (config.pingTimeout) {\n    assert(helper.isNumber(config.pingTimeout), 'Invalid configuration: pingTimeout option must be a number.');\n  }\n\n  const defaultClient = config.defaultClient || {};\n  Object.keys(defaultClient).forEach(function (key) {\n    const option = config.client[key];\n    config.client[key] = helper.isDefined(option) ? option : defaultClient[key];\n  }); // normalize preprocessors\n\n  const preprocessors = config.preprocessors || {};\n  const normalizedPreprocessors = config.preprocessors = Object.create(null);\n  Object.keys(preprocessors).forEach(function (pattern) {\n    const normalizedPattern = helper.normalizeWinPath(basePathResolve(pattern));\n    normalizedPreprocessors[normalizedPattern] = helper.isString(preprocessors[pattern]) ? [preprocessors[pattern]] : preprocessors[pattern];\n  }); // define custom launchers/preprocessors/reporters - create a new plugin\n\n  const module = Object.create(null);\n  let hasSomeInlinedPlugin = false;\n  const types = ['launcher', 'preprocessor', 'reporter'];\n  types.forEach(function (type) {\n    const definitions = config[`custom${helper.ucFirst(type)}s`] || {};\n    Object.keys(definitions).forEach(function (name) {\n      const definition = definitions[name];\n\n      if (!helper.isObject(definition)) {\n        return log.warn(`Can not define ${type} ${name}. Definition has to be an object.`);\n      }\n\n      if (!helper.isString(definition.base)) {\n        return log.warn(`Can not define ${type} ${name}. Missing base ${type}.`);\n      }\n\n      const token = type + ':' + definition.base;\n      const locals = {\n        args: ['value', definition]\n      };\n      module[type + ':' + name] = ['factory', function (injector) {\n        const plugin = injector.createChild([locals], [token]).get(token);\n\n        if (type === 'launcher' && helper.isDefined(definition.displayName)) {\n          plugin.displayName = definition.displayName;\n        }\n\n        return plugin;\n      }];\n      hasSomeInlinedPlugin = true;\n    });\n  });\n\n  if (hasSomeInlinedPlugin) {\n    config.plugins.push(module);\n  }\n\n  return config;\n}\n/**\n * @class\n */\n\n\nclass Config {\n  constructor() {\n    this.LOG_DISABLE = constant.LOG_DISABLE;\n    this.LOG_ERROR = constant.LOG_ERROR;\n    this.LOG_WARN = constant.LOG_WARN;\n    this.LOG_INFO = constant.LOG_INFO;\n    this.LOG_DEBUG = constant.LOG_DEBUG; // DEFAULT CONFIG\n\n    this.frameworks = [];\n    this.protocol = 'http:';\n    this.port = constant.DEFAULT_PORT;\n    this.listenAddress = constant.DEFAULT_LISTEN_ADDR;\n    this.hostname = constant.DEFAULT_HOSTNAME;\n    this.httpsServerConfig = {};\n    this.basePath = '';\n    this.files = [];\n    this.browserConsoleLogOptions = {\n      level: 'debug',\n      format: '%b %T: %m',\n      terminal: true\n    };\n    this.customContextFile = null;\n    this.customDebugFile = null;\n    this.customClientContextFile = null;\n    this.exclude = [];\n    this.logLevel = constant.LOG_INFO;\n    this.colors = true;\n    this.autoWatch = true;\n    this.autoWatchBatchDelay = 250;\n    this.restartOnFileChange = false;\n    this.usePolling = process.platform === 'linux';\n    this.reporters = ['progress'];\n    this.singleRun = false;\n    this.browsers = [];\n    this.captureTimeout = 60000;\n    this.pingTimeout = 5000;\n    this.proxies = {};\n    this.proxyValidateSSL = true;\n    this.preprocessors = {};\n    this.preprocessor_priority = {};\n    this.urlRoot = '/';\n    this.upstreamProxy = undefined;\n    this.reportSlowerThan = 0;\n    this.loggers = [constant.CONSOLE_APPENDER];\n    this.transports = ['polling', 'websocket'];\n    this.forceJSONP = false;\n    this.plugins = ['karma-*'];\n    this.defaultClient = this.client = {\n      args: [],\n      useIframe: true,\n      runInParent: false,\n      captureConsole: true,\n      clearContext: true,\n      allowedReturnUrlPatterns: ['^https?://']\n    };\n    this.browserDisconnectTimeout = 2000;\n    this.browserDisconnectTolerance = 0;\n    this.browserNoActivityTimeout = 30000;\n    this.processKillTimeout = 2000;\n    this.concurrency = Infinity;\n    this.failOnEmptyTestSuite = true;\n    this.retryLimit = 2;\n    this.detached = false;\n    this.crossOriginAttribute = true;\n    this.browserSocketTimeout = 20000;\n  }\n\n  set(newConfig) {\n    _.mergeWith(this, newConfig, (obj, src) => {\n      // Overwrite arrays to keep consistent with #283\n      if (Array.isArray(src)) {\n        return src;\n      }\n    });\n  }\n\n}\n\nconst CONFIG_SYNTAX_HELP = '  module.exports = function(config) {\\n' + '    config.set({\\n' + '      // your config\\n' + '    });\\n' + '  };\\n';\n/**\n * Retrieve a parsed and finalized Karma `Config` instance. This `karmaConfig`\n * object may be used to configure public API methods such a `Server`,\n * `runner.run`, and `stopper.stop`.\n *\n * @param {?string} [configFilePath=null]\n *     A string representing a file system path pointing to the config file\n *     whose default export is a function that will be used to set Karma\n *     configuration options. This function will be passed an instance of the\n *     `Config` class as its first argument. If this option is not provided,\n *     then only the options provided by the `cliOptions` argument will be\n *     set.\n * @param {Object} cliOptions\n *     An object whose values will take priority over options set in the\n *     config file. The config object passed to function exported by the\n *     config file will already have these options applied. Any changes the\n *     config file makes to these options will effectively be ignored in the\n *     final configuration.\n *\n *     `cliOptions` all the same options as the config file and is applied\n *     using the same `config.set()` method.\n * @param {Object} parseOptions\n * @param {boolean} [parseOptions.promiseConfig=false]\n *     When `true`, a promise that resolves to a `Config` object will be\n *     returned. This also allows the function exported by config files (if\n *     provided) to be asynchronous by returning a promise. Resolving this\n *     promise indicates that all async activity has completed. The resolution\n *     value itself is ignored, all configuration must be done with\n *     `config.set`.\n * @param {boolean} [parseOptions.throwErrors=false]\n *     When `true`, process exiting on critical failures will be disabled. In\n *     The error will be thrown as an exception. If\n *     `parseOptions.promiseConfig` is also `true`, then the error will\n *     instead be used as the promise's reject reason.\n * @returns {Config|Promise<Config>}\n */\n\nfunction parseConfig(configFilePath, cliOptions, parseOptions) {\n  const promiseConfig = parseOptions && parseOptions.promiseConfig === true;\n  const throwErrors = parseOptions && parseOptions.throwErrors === true;\n  const shouldSetupLoggerEarly = promiseConfig;\n\n  if (shouldSetupLoggerEarly) {\n    // `setupFromConfig` provides defaults for `colors` and `logLevel`.\n    // `setup` provides defaults for `appenders`\n    // The first argument MUST BE an object\n    logger.setupFromConfig({});\n  }\n\n  function fail() {\n    log.error(...arguments);\n\n    if (throwErrors) {\n      const errorMessage = Array.from(arguments).join(' ');\n      const err = new Error(errorMessage);\n\n      if (promiseConfig) {\n        return Promise.reject(err);\n      }\n\n      throw err;\n    } else {\n      const warningMessage = 'The `parseConfig()` function historically called `process.exit(1)`' + ' when it failed. This behavior is now deprecated and function will' + ' throw an error in the next major release. To suppress this warning' + ' pass `throwErrors: true` as a third argument to opt-in into the new' + ' behavior and adjust your code to respond to the exception' + ' accordingly.' + ' Example: `parseConfig(path, cliOptions, { throwErrors: true })`';\n      log.warn(warningMessage);\n      process.exit(1);\n    }\n  }\n\n  let configModule;\n\n  if (configFilePath) {\n    try {\n      if (path.extname(configFilePath) === '.ts' && TYPE_SCRIPT_AVAILABLE) {\n        require('ts-node').register();\n      }\n\n      configModule = require(configFilePath);\n\n      if (typeof configModule === 'object' && typeof configModule.default !== 'undefined') {\n        configModule = configModule.default;\n      }\n    } catch (e) {\n      const extension = path.extname(configFilePath);\n\n      if (extension === '.coffee' && !COFFEE_SCRIPT_AVAILABLE) {\n        log.error('You need to install CoffeeScript.\\n  npm install coffeescript --save-dev');\n      } else if (extension === '.ls' && !LIVE_SCRIPT_AVAILABLE) {\n        log.error('You need to install LiveScript.\\n  npm install LiveScript --save-dev');\n      } else if (extension === '.ts' && !TYPE_SCRIPT_AVAILABLE) {\n        log.error('You need to install TypeScript.\\n  npm install typescript ts-node --save-dev');\n      }\n\n      return fail('Error in config file!\\n  ' + e.stack || e);\n    }\n\n    if (!helper.isFunction(configModule)) {\n      return fail('Config file must export a function!\\n' + CONFIG_SYNTAX_HELP);\n    }\n  } else {\n    configModule = () => {}; // if no config file path is passed, we define a dummy config module.\n\n  }\n\n  const config = new Config(); // save and reset hostname and listenAddress so we can detect if the user\n  // changed them\n\n  const defaultHostname = config.hostname;\n  config.hostname = null;\n  const defaultListenAddress = config.listenAddress;\n  config.listenAddress = null; // add the user's configuration in\n\n  config.set(cliOptions);\n  let configModuleReturn;\n\n  try {\n    configModuleReturn = configModule(config);\n  } catch (e) {\n    return fail('Error in config file!\\n', e);\n  }\n\n  function finalizeConfig(config) {\n    // merge the config from config file and cliOptions (precedence)\n    config.set(cliOptions); // if the user changed listenAddress, but didn't set a hostname, warn them\n\n    if (config.hostname === null && config.listenAddress !== null) {\n      log.warn(`ListenAddress was set to ${config.listenAddress} but hostname was left as the default: ` + `${defaultHostname}. If your browsers fail to connect, consider changing the hostname option.`);\n    } // restore values that weren't overwritten by the user\n\n\n    if (config.hostname === null) {\n      config.hostname = defaultHostname;\n    }\n\n    if (config.listenAddress === null) {\n      config.listenAddress = defaultListenAddress;\n    } // configure the logger as soon as we can\n\n\n    logger.setup(config.logLevel, config.colors, config.loggers);\n    log.debug(configFilePath ? `Loading config ${configFilePath}` : 'No config file specified.');\n    return normalizeConfig(config, configFilePath);\n  }\n  /**\n   * Return value is a function or (non-null) object that has a `then` method.\n   *\n   * @type {boolean}\n   * @see {@link https://promisesaplus.com/}\n   */\n\n\n  const returnIsThenable = (configModuleReturn != null && typeof configModuleReturn === 'object' || typeof configModuleReturn === 'function') && typeof configModuleReturn.then === 'function';\n\n  if (returnIsThenable) {\n    if (promiseConfig !== true) {\n      const errorMessage = 'The `parseOptions.promiseConfig` option must be set to `true` to ' + 'enable promise return values from configuration files. ' + 'Example: `parseConfig(path, cliOptions, { promiseConfig: true })`';\n      return fail(errorMessage);\n    }\n\n    return configModuleReturn.then(function\n      /* ignoredResolutionValue */\n    onKarmaConfigModuleFulfilled() {\n      return finalizeConfig(config);\n    }, function onKarmaConfigModuleRejected(reason) {\n      return fail('Error in config file!\\n', reason);\n    });\n  } else {\n    if (promiseConfig) {\n      try {\n        return Promise.resolve(finalizeConfig(config));\n      } catch (exception) {\n        return Promise.reject(exception);\n      }\n    } else {\n      return finalizeConfig(config);\n    }\n  }\n} // PUBLIC API\n\n\nexports.parseConfig = parseConfig;\nexports.Pattern = Pattern;\nexports.createPatternObject = createPatternObject;\nexports.Config = Config;","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/karma/lib/config.js"],"names":["path","require","assert","logger","log","create","helper","constant","_","COFFEE_SCRIPT_AVAILABLE","LIVE_SCRIPT_AVAILABLE","TYPE_SCRIPT_AVAILABLE","register","Pattern","constructor","pattern","served","included","watched","nocache","type","isBinary","isDefined","weight","mmPatternWeight","compare","other","mmComparePatternWeights","UrlPattern","url","createPatternObject","isString","isUrlAbsolute","isObject","warn","normalizeUrl","startsWith","endsWith","normalizeUrlRoot","urlRoot","normalizedUrlRoot","normalizeProxyPath","proxyPath","normalizedProxyPath","normalizeConfig","config","configFilePath","basePathResolve","relativePath","basePath","resolve","createPatternMapper","objectPattern","Object","assign","dirname","exclude","push","files","map","customContextFile","customDebugFile","customClientContextFile","normalizeWinPath","upstreamProxy","proxy","hostname","port","protocol","split","match","proxies","prototype","hasOwnProperty","call","singleRun","autoWatch","debug","runInParent","useIframe","reporters","client","args","Array","isArray","browsers","formatError","isFunction","processKillTimeout","isNumber","browserSocketTimeout","pingTimeout","defaultClient","keys","forEach","key","option","preprocessors","normalizedPreprocessors","normalizedPattern","module","hasSomeInlinedPlugin","types","definitions","ucFirst","name","definition","base","token","locals","injector","plugin","createChild","get","displayName","plugins","Config","LOG_DISABLE","LOG_ERROR","LOG_WARN","LOG_INFO","LOG_DEBUG","frameworks","DEFAULT_PORT","listenAddress","DEFAULT_LISTEN_ADDR","DEFAULT_HOSTNAME","httpsServerConfig","browserConsoleLogOptions","level","format","terminal","logLevel","colors","autoWatchBatchDelay","restartOnFileChange","usePolling","process","platform","captureTimeout","proxyValidateSSL","preprocessor_priority","undefined","reportSlowerThan","loggers","CONSOLE_APPENDER","transports","forceJSONP","captureConsole","clearContext","allowedReturnUrlPatterns","browserDisconnectTimeout","browserDisconnectTolerance","browserNoActivityTimeout","concurrency","Infinity","failOnEmptyTestSuite","retryLimit","detached","crossOriginAttribute","set","newConfig","mergeWith","obj","src","CONFIG_SYNTAX_HELP","parseConfig","cliOptions","parseOptions","promiseConfig","throwErrors","shouldSetupLoggerEarly","setupFromConfig","fail","error","arguments","errorMessage","from","join","err","Error","Promise","reject","warningMessage","exit","configModule","extname","default","e","extension","stack","defaultHostname","defaultListenAddress","configModuleReturn","finalizeConfig","setup","returnIsThenable","then","onKarmaConfigModuleFulfilled","onKarmaConfigModuleRejected","reason","exception","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst path = require('path')\nconst assert = require('assert')\n\nconst logger = require('./logger')\nconst log = logger.create('config')\nconst helper = require('./helper')\nconst constant = require('./constants')\n\nconst _ = require('lodash')\n\nlet COFFEE_SCRIPT_AVAILABLE = false\nlet LIVE_SCRIPT_AVAILABLE = false\nlet TYPE_SCRIPT_AVAILABLE = false\n\ntry {\n  require('coffeescript').register()\n  COFFEE_SCRIPT_AVAILABLE = true\n} catch {}\n\n// LiveScript is required here to enable config files written in LiveScript.\n// It's not directly used in this file.\ntry {\n  require('LiveScript')\n  LIVE_SCRIPT_AVAILABLE = true\n} catch {}\n\ntry {\n  require('ts-node')\n  TYPE_SCRIPT_AVAILABLE = true\n} catch {}\n\nclass Pattern {\n  constructor (pattern, served, included, watched, nocache, type, isBinary) {\n    this.pattern = pattern\n    this.served = helper.isDefined(served) ? served : true\n    this.included = helper.isDefined(included) ? included : true\n    this.watched = helper.isDefined(watched) ? watched : true\n    this.nocache = helper.isDefined(nocache) ? nocache : false\n    this.weight = helper.mmPatternWeight(pattern)\n    this.type = type\n    this.isBinary = isBinary\n  }\n\n  compare (other) {\n    return helper.mmComparePatternWeights(this.weight, other.weight)\n  }\n}\n\nclass UrlPattern extends Pattern {\n  constructor (url, type) {\n    super(url, false, true, false, false, type)\n  }\n}\n\nfunction createPatternObject (pattern) {\n  if (pattern && helper.isString(pattern)) {\n    return helper.isUrlAbsolute(pattern)\n      ? new UrlPattern(pattern)\n      : new Pattern(pattern)\n  } else if (helper.isObject(pattern) && pattern.pattern && helper.isString(pattern.pattern)) {\n    return helper.isUrlAbsolute(pattern.pattern)\n      ? new UrlPattern(pattern.pattern, pattern.type)\n      : new Pattern(pattern.pattern, pattern.served, pattern.included, pattern.watched, pattern.nocache, pattern.type)\n  } else {\n    log.warn(`Invalid pattern ${pattern}!\\n\\tExpected string or object with \"pattern\" property.`)\n    return new Pattern(null, false, false, false, false)\n  }\n}\n\nfunction normalizeUrl (url) {\n  if (!url.startsWith('/')) {\n    url = `/${url}`\n  }\n\n  if (!url.endsWith('/')) {\n    url = url + '/'\n  }\n\n  return url\n}\n\nfunction normalizeUrlRoot (urlRoot) {\n  const normalizedUrlRoot = normalizeUrl(urlRoot)\n\n  if (normalizedUrlRoot !== urlRoot) {\n    log.warn(`urlRoot normalized to \"${normalizedUrlRoot}\"`)\n  }\n\n  return normalizedUrlRoot\n}\n\nfunction normalizeProxyPath (proxyPath) {\n  const normalizedProxyPath = normalizeUrl(proxyPath)\n\n  if (normalizedProxyPath !== proxyPath) {\n    log.warn(`proxyPath normalized to \"${normalizedProxyPath}\"`)\n  }\n\n  return normalizedProxyPath\n}\n\nfunction normalizeConfig (config, configFilePath) {\n  function basePathResolve (relativePath) {\n    if (helper.isUrlAbsolute(relativePath)) {\n      return relativePath\n    } else if (helper.isDefined(config.basePath) && helper.isDefined(relativePath)) {\n      return path.resolve(config.basePath, relativePath)\n    } else {\n      return ''\n    }\n  }\n\n  function createPatternMapper (resolve) {\n    return (objectPattern) => Object.assign(objectPattern, { pattern: resolve(objectPattern.pattern) })\n  }\n\n  if (helper.isString(configFilePath)) {\n    config.basePath = path.resolve(path.dirname(configFilePath), config.basePath) // resolve basePath\n    config.exclude.push(configFilePath) // always ignore the config file itself\n  } else {\n    config.basePath = path.resolve(config.basePath || '.')\n  }\n\n  config.files = config.files.map(createPatternObject).map(createPatternMapper(basePathResolve))\n  config.exclude = config.exclude.map(basePathResolve)\n  config.customContextFile = config.customContextFile && basePathResolve(config.customContextFile)\n  config.customDebugFile = config.customDebugFile && basePathResolve(config.customDebugFile)\n  config.customClientContextFile = config.customClientContextFile && basePathResolve(config.customClientContextFile)\n\n  // normalize paths on windows\n  config.basePath = helper.normalizeWinPath(config.basePath)\n  config.files = config.files.map(createPatternMapper(helper.normalizeWinPath))\n  config.exclude = config.exclude.map(helper.normalizeWinPath)\n  config.customContextFile = helper.normalizeWinPath(config.customContextFile)\n  config.customDebugFile = helper.normalizeWinPath(config.customDebugFile)\n  config.customClientContextFile = helper.normalizeWinPath(config.customClientContextFile)\n\n  // normalize urlRoot\n  config.urlRoot = normalizeUrlRoot(config.urlRoot)\n\n  // normalize and default upstream proxy settings if given\n  if (config.upstreamProxy) {\n    const proxy = config.upstreamProxy\n    proxy.path = helper.isDefined(proxy.path) ? normalizeProxyPath(proxy.path) : '/'\n    proxy.hostname = helper.isDefined(proxy.hostname) ? proxy.hostname : 'localhost'\n    proxy.port = helper.isDefined(proxy.port) ? proxy.port : 9875\n\n    // force protocol to end with ':'\n    proxy.protocol = (proxy.protocol || 'http').split(':')[0] + ':'\n    if (proxy.protocol.match(/https?:/) === null) {\n      log.warn(`\"${proxy.protocol}\" is not a supported upstream proxy protocol, defaulting to \"http:\"`)\n      proxy.protocol = 'http:'\n    }\n  }\n\n  // force protocol to end with ':'\n  config.protocol = (config.protocol || 'http').split(':')[0] + ':'\n  if (config.protocol.match(/https?:/) === null) {\n    log.warn(`\"${config.protocol}\" is not a supported protocol, defaulting to \"http:\"`)\n    config.protocol = 'http:'\n  }\n\n  if (config.proxies && Object.prototype.hasOwnProperty.call(config.proxies, config.urlRoot)) {\n    log.warn(`\"${config.urlRoot}\" is proxied, you should probably change urlRoot to avoid conflicts`)\n  }\n\n  if (config.singleRun && config.autoWatch) {\n    log.debug('autoWatch set to false, because of singleRun')\n    config.autoWatch = false\n  }\n\n  if (config.runInParent) {\n    log.debug('useIframe set to false, because using runInParent')\n    config.useIframe = false\n  }\n\n  if (!config.singleRun && !config.useIframe && config.runInParent) {\n    log.debug('singleRun set to true, because using runInParent')\n    config.singleRun = true\n  }\n\n  if (helper.isString(config.reporters)) {\n    config.reporters = config.reporters.split(',')\n  }\n\n  if (config.client && config.client.args) {\n    assert(Array.isArray(config.client.args), 'Invalid configuration: client.args must be an array of strings')\n  }\n\n  if (config.browsers) {\n    assert(Array.isArray(config.browsers), 'Invalid configuration: browsers option must be an array')\n  }\n\n  if (config.formatError) {\n    assert(helper.isFunction(config.formatError), 'Invalid configuration: formatError option must be a function.')\n  }\n\n  if (config.processKillTimeout) {\n    assert(helper.isNumber(config.processKillTimeout), 'Invalid configuration: processKillTimeout option must be a number.')\n  }\n\n  if (config.browserSocketTimeout) {\n    assert(helper.isNumber(config.browserSocketTimeout), 'Invalid configuration: browserSocketTimeout option must be a number.')\n  }\n\n  if (config.pingTimeout) {\n    assert(helper.isNumber(config.pingTimeout), 'Invalid configuration: pingTimeout option must be a number.')\n  }\n\n  const defaultClient = config.defaultClient || {}\n  Object.keys(defaultClient).forEach(function (key) {\n    const option = config.client[key]\n    config.client[key] = helper.isDefined(option) ? option : defaultClient[key]\n  })\n\n  // normalize preprocessors\n  const preprocessors = config.preprocessors || {}\n  const normalizedPreprocessors = config.preprocessors = Object.create(null)\n\n  Object.keys(preprocessors).forEach(function (pattern) {\n    const normalizedPattern = helper.normalizeWinPath(basePathResolve(pattern))\n\n    normalizedPreprocessors[normalizedPattern] = helper.isString(preprocessors[pattern])\n      ? [preprocessors[pattern]] : preprocessors[pattern]\n  })\n\n  // define custom launchers/preprocessors/reporters - create a new plugin\n  const module = Object.create(null)\n  let hasSomeInlinedPlugin = false\n  const types = ['launcher', 'preprocessor', 'reporter']\n\n  types.forEach(function (type) {\n    const definitions = config[`custom${helper.ucFirst(type)}s`] || {}\n\n    Object.keys(definitions).forEach(function (name) {\n      const definition = definitions[name]\n\n      if (!helper.isObject(definition)) {\n        return log.warn(`Can not define ${type} ${name}. Definition has to be an object.`)\n      }\n\n      if (!helper.isString(definition.base)) {\n        return log.warn(`Can not define ${type} ${name}. Missing base ${type}.`)\n      }\n\n      const token = type + ':' + definition.base\n      const locals = {\n        args: ['value', definition]\n      }\n\n      module[type + ':' + name] = ['factory', function (injector) {\n        const plugin = injector.createChild([locals], [token]).get(token)\n        if (type === 'launcher' && helper.isDefined(definition.displayName)) {\n          plugin.displayName = definition.displayName\n        }\n        return plugin\n      }]\n      hasSomeInlinedPlugin = true\n    })\n  })\n\n  if (hasSomeInlinedPlugin) {\n    config.plugins.push(module)\n  }\n\n  return config\n}\n\n/**\n * @class\n */\nclass Config {\n  constructor () {\n    this.LOG_DISABLE = constant.LOG_DISABLE\n    this.LOG_ERROR = constant.LOG_ERROR\n    this.LOG_WARN = constant.LOG_WARN\n    this.LOG_INFO = constant.LOG_INFO\n    this.LOG_DEBUG = constant.LOG_DEBUG\n\n    // DEFAULT CONFIG\n    this.frameworks = []\n    this.protocol = 'http:'\n    this.port = constant.DEFAULT_PORT\n    this.listenAddress = constant.DEFAULT_LISTEN_ADDR\n    this.hostname = constant.DEFAULT_HOSTNAME\n    this.httpsServerConfig = {}\n    this.basePath = ''\n    this.files = []\n    this.browserConsoleLogOptions = {\n      level: 'debug',\n      format: '%b %T: %m',\n      terminal: true\n    }\n    this.customContextFile = null\n    this.customDebugFile = null\n    this.customClientContextFile = null\n    this.exclude = []\n    this.logLevel = constant.LOG_INFO\n    this.colors = true\n    this.autoWatch = true\n    this.autoWatchBatchDelay = 250\n    this.restartOnFileChange = false\n    this.usePolling = process.platform === 'linux'\n    this.reporters = ['progress']\n    this.singleRun = false\n    this.browsers = []\n    this.captureTimeout = 60000\n    this.pingTimeout = 5000\n    this.proxies = {}\n    this.proxyValidateSSL = true\n    this.preprocessors = {}\n    this.preprocessor_priority = {}\n    this.urlRoot = '/'\n    this.upstreamProxy = undefined\n    this.reportSlowerThan = 0\n    this.loggers = [constant.CONSOLE_APPENDER]\n    this.transports = ['polling', 'websocket']\n    this.forceJSONP = false\n    this.plugins = ['karma-*']\n    this.defaultClient = this.client = {\n      args: [],\n      useIframe: true,\n      runInParent: false,\n      captureConsole: true,\n      clearContext: true,\n      allowedReturnUrlPatterns: ['^https?://']\n    }\n    this.browserDisconnectTimeout = 2000\n    this.browserDisconnectTolerance = 0\n    this.browserNoActivityTimeout = 30000\n    this.processKillTimeout = 2000\n    this.concurrency = Infinity\n    this.failOnEmptyTestSuite = true\n    this.retryLimit = 2\n    this.detached = false\n    this.crossOriginAttribute = true\n    this.browserSocketTimeout = 20000\n  }\n\n  set (newConfig) {\n    _.mergeWith(this, newConfig, (obj, src) => {\n      // Overwrite arrays to keep consistent with #283\n      if (Array.isArray(src)) {\n        return src\n      }\n    })\n  }\n}\n\nconst CONFIG_SYNTAX_HELP = '  module.exports = function(config) {\\n' +\n  '    config.set({\\n' +\n  '      // your config\\n' +\n  '    });\\n' +\n  '  };\\n'\n\n/**\n * Retrieve a parsed and finalized Karma `Config` instance. This `karmaConfig`\n * object may be used to configure public API methods such a `Server`,\n * `runner.run`, and `stopper.stop`.\n *\n * @param {?string} [configFilePath=null]\n *     A string representing a file system path pointing to the config file\n *     whose default export is a function that will be used to set Karma\n *     configuration options. This function will be passed an instance of the\n *     `Config` class as its first argument. If this option is not provided,\n *     then only the options provided by the `cliOptions` argument will be\n *     set.\n * @param {Object} cliOptions\n *     An object whose values will take priority over options set in the\n *     config file. The config object passed to function exported by the\n *     config file will already have these options applied. Any changes the\n *     config file makes to these options will effectively be ignored in the\n *     final configuration.\n *\n *     `cliOptions` all the same options as the config file and is applied\n *     using the same `config.set()` method.\n * @param {Object} parseOptions\n * @param {boolean} [parseOptions.promiseConfig=false]\n *     When `true`, a promise that resolves to a `Config` object will be\n *     returned. This also allows the function exported by config files (if\n *     provided) to be asynchronous by returning a promise. Resolving this\n *     promise indicates that all async activity has completed. The resolution\n *     value itself is ignored, all configuration must be done with\n *     `config.set`.\n * @param {boolean} [parseOptions.throwErrors=false]\n *     When `true`, process exiting on critical failures will be disabled. In\n *     The error will be thrown as an exception. If\n *     `parseOptions.promiseConfig` is also `true`, then the error will\n *     instead be used as the promise's reject reason.\n * @returns {Config|Promise<Config>}\n */\nfunction parseConfig (configFilePath, cliOptions, parseOptions) {\n  const promiseConfig = parseOptions && parseOptions.promiseConfig === true\n  const throwErrors = parseOptions && parseOptions.throwErrors === true\n  const shouldSetupLoggerEarly = promiseConfig\n  if (shouldSetupLoggerEarly) {\n    // `setupFromConfig` provides defaults for `colors` and `logLevel`.\n    // `setup` provides defaults for `appenders`\n    // The first argument MUST BE an object\n    logger.setupFromConfig({})\n  }\n  function fail () {\n    log.error(...arguments)\n    if (throwErrors) {\n      const errorMessage = Array.from(arguments).join(' ')\n      const err = new Error(errorMessage)\n      if (promiseConfig) {\n        return Promise.reject(err)\n      }\n      throw err\n    } else {\n      const warningMessage =\n        'The `parseConfig()` function historically called `process.exit(1)`' +\n        ' when it failed. This behavior is now deprecated and function will' +\n        ' throw an error in the next major release. To suppress this warning' +\n        ' pass `throwErrors: true` as a third argument to opt-in into the new' +\n        ' behavior and adjust your code to respond to the exception' +\n        ' accordingly.' +\n        ' Example: `parseConfig(path, cliOptions, { throwErrors: true })`'\n      log.warn(warningMessage)\n      process.exit(1)\n    }\n  }\n\n  let configModule\n  if (configFilePath) {\n    try {\n      if (path.extname(configFilePath) === '.ts' && TYPE_SCRIPT_AVAILABLE) {\n        require('ts-node').register()\n      }\n      configModule = require(configFilePath)\n      if (typeof configModule === 'object' && typeof configModule.default !== 'undefined') {\n        configModule = configModule.default\n      }\n    } catch (e) {\n      const extension = path.extname(configFilePath)\n      if (extension === '.coffee' && !COFFEE_SCRIPT_AVAILABLE) {\n        log.error('You need to install CoffeeScript.\\n  npm install coffeescript --save-dev')\n      } else if (extension === '.ls' && !LIVE_SCRIPT_AVAILABLE) {\n        log.error('You need to install LiveScript.\\n  npm install LiveScript --save-dev')\n      } else if (extension === '.ts' && !TYPE_SCRIPT_AVAILABLE) {\n        log.error('You need to install TypeScript.\\n  npm install typescript ts-node --save-dev')\n      }\n      return fail('Error in config file!\\n  ' + e.stack || e)\n    }\n    if (!helper.isFunction(configModule)) {\n      return fail('Config file must export a function!\\n' + CONFIG_SYNTAX_HELP)\n    }\n  } else {\n    configModule = () => {} // if no config file path is passed, we define a dummy config module.\n  }\n\n  const config = new Config()\n\n  // save and reset hostname and listenAddress so we can detect if the user\n  // changed them\n  const defaultHostname = config.hostname\n  config.hostname = null\n  const defaultListenAddress = config.listenAddress\n  config.listenAddress = null\n\n  // add the user's configuration in\n  config.set(cliOptions)\n\n  let configModuleReturn\n  try {\n    configModuleReturn = configModule(config)\n  } catch (e) {\n    return fail('Error in config file!\\n', e)\n  }\n  function finalizeConfig (config) {\n    // merge the config from config file and cliOptions (precedence)\n    config.set(cliOptions)\n\n    // if the user changed listenAddress, but didn't set a hostname, warn them\n    if (config.hostname === null && config.listenAddress !== null) {\n      log.warn(`ListenAddress was set to ${config.listenAddress} but hostname was left as the default: ` +\n      `${defaultHostname}. If your browsers fail to connect, consider changing the hostname option.`)\n    }\n    // restore values that weren't overwritten by the user\n    if (config.hostname === null) {\n      config.hostname = defaultHostname\n    }\n    if (config.listenAddress === null) {\n      config.listenAddress = defaultListenAddress\n    }\n\n    // configure the logger as soon as we can\n    logger.setup(config.logLevel, config.colors, config.loggers)\n\n    log.debug(configFilePath ? `Loading config ${configFilePath}` : 'No config file specified.')\n\n    return normalizeConfig(config, configFilePath)\n  }\n\n  /**\n   * Return value is a function or (non-null) object that has a `then` method.\n   *\n   * @type {boolean}\n   * @see {@link https://promisesaplus.com/}\n   */\n  const returnIsThenable = (\n    (\n      (configModuleReturn != null && typeof configModuleReturn === 'object') ||\n      typeof configModuleReturn === 'function'\n    ) && typeof configModuleReturn.then === 'function'\n  )\n  if (returnIsThenable) {\n    if (promiseConfig !== true) {\n      const errorMessage =\n        'The `parseOptions.promiseConfig` option must be set to `true` to ' +\n        'enable promise return values from configuration files. ' +\n        'Example: `parseConfig(path, cliOptions, { promiseConfig: true })`'\n      return fail(errorMessage)\n    }\n    return configModuleReturn.then(\n      function onKarmaConfigModuleFulfilled (/* ignoredResolutionValue */) {\n        return finalizeConfig(config)\n      },\n      function onKarmaConfigModuleRejected (reason) {\n        return fail('Error in config file!\\n', reason)\n      }\n    )\n  } else {\n    if (promiseConfig) {\n      try {\n        return Promise.resolve(finalizeConfig(config))\n      } catch (exception) {\n        return Promise.reject(exception)\n      }\n    } else {\n      return finalizeConfig(config)\n    }\n  }\n}\n\n// PUBLIC API\nexports.parseConfig = parseConfig\nexports.Pattern = Pattern\nexports.createPatternObject = createPatternObject\nexports.Config = Config\n"]},"metadata":{},"sourceType":"script"}