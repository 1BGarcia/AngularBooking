{"ast":null,"code":"var _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar path = _interopDefault(require('path'));\n\nvar fs = require('fs');\n\nvar prettyBytes = _interopDefault(require('pretty-bytes'));\n\nvar parse5 = _interopDefault(require('parse5'));\n\nvar cssSelect = require('css-select');\n\nvar treeAdapter = _interopDefault(require('parse5-htmlparser2-tree-adapter'));\n\nvar postcss = require('postcss');\n\nvar chalk = _interopDefault(require('chalk'));\n/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n\nconst PARSE5_OPTS = {\n  treeAdapter\n};\n/**\n * Parse HTML into a mutable, serializable DOM Document.\n * The DOM implementation is an htmlparser2 DOM enhanced with basic DOM mutation methods.\n * @param {String} html   HTML to parse into a Document instance\n */\n\nfunction createDocument(html) {\n  const document =\n  /** @type {HTMLDocument} */\n  parse5.parse(html, PARSE5_OPTS);\n  defineProperties(document, DocumentExtensions); // Extend Element.prototype with DOM manipulation methods.\n\n  const scratch = document.createElement('div'); // Get a reference to the base Node class - used by createTextNode()\n\n  document.$$Node = scratch.constructor;\n  const elementProto = Object.getPrototypeOf(scratch);\n  defineProperties(elementProto, ElementExtensions);\n  elementProto.ownerDocument = document;\n  return document;\n}\n/**\n * Serialize a Document to an HTML String\n * @param {HTMLDocument} document   A Document, such as one created via `createDocument()`\n */\n\n\nfunction serializeDocument(document) {\n  return parse5.serialize(document, PARSE5_OPTS);\n}\n/** @typedef {treeAdapter.Document & typeof ElementExtensions} HTMLDocument */\n\n/**\n * Methods and descriptors to mix into Element.prototype\n * @private\n */\n\n\nconst ElementExtensions = {\n  /** @extends treeAdapter.Element.prototype */\n  nodeName: {\n    get() {\n      return this.tagName.toUpperCase();\n    }\n\n  },\n  id: reflectedProperty('id'),\n  className: reflectedProperty('class'),\n\n  insertBefore(child, referenceNode) {\n    if (!referenceNode) return this.appendChild(child);\n    treeAdapter.insertBefore(this, child, referenceNode);\n    return child;\n  },\n\n  appendChild(child) {\n    treeAdapter.appendChild(this, child);\n    return child;\n  },\n\n  removeChild(child) {\n    treeAdapter.detachNode(child);\n  },\n\n  remove() {\n    treeAdapter.detachNode(this);\n  },\n\n  textContent: {\n    get() {\n      return getText(this);\n    },\n\n    set(text) {\n      this.children = [];\n      treeAdapter.insertText(this, text);\n    }\n\n  },\n\n  setAttribute(name, value) {\n    if (this.attribs == null) this.attribs = {};\n    if (value == null) value = '';\n    this.attribs[name] = value;\n  },\n\n  removeAttribute(name) {\n    if (this.attribs != null) {\n      delete this.attribs[name];\n    }\n  },\n\n  getAttribute(name) {\n    return this.attribs != null && this.attribs[name];\n  },\n\n  hasAttribute(name) {\n    return this.attribs != null && this.attribs[name] != null;\n  },\n\n  getAttributeNode(name) {\n    const value = this.getAttribute(name);\n    if (value != null) return {\n      specified: true,\n      value\n    };\n  }\n\n};\n/**\n * Methods and descriptors to mix into the global document instance\n * @private\n */\n\nconst DocumentExtensions = {\n  /** @extends treeAdapter.Document.prototype */\n  // document is just an Element in htmlparser2, giving it a nodeType of ELEMENT_NODE.\n  // TODO: verify if these are needed for css-select\n  nodeType: {\n    get() {\n      return 9;\n    }\n\n  },\n  contentType: {\n    get() {\n      return 'text/html';\n    }\n\n  },\n  nodeName: {\n    get() {\n      return '#document';\n    }\n\n  },\n  documentElement: {\n    get() {\n      // Find the first <html> element within the document\n      return this.childNodes.filter(child => String(child.tagName).toLowerCase() === 'html');\n    }\n\n  },\n  compatMode: {\n    get() {\n      const compatMode = {\n        'no-quirks': 'CSS1Compat',\n        quirks: 'BackCompat',\n        'limited-quirks': 'CSS1Compat'\n      };\n      return compatMode[treeAdapter.getDocumentMode(this)];\n    }\n\n  },\n  head: {\n    get() {\n      return this.querySelector('head');\n    }\n\n  },\n  body: {\n    get() {\n      return this.querySelector('body');\n    }\n\n  },\n\n  createElement(name) {\n    return treeAdapter.createElement(name, null, []);\n  },\n\n  createTextNode(text) {\n    // there is no dedicated createTextNode equivalent exposed in htmlparser2's DOM\n    const Node = this.$$Node;\n    return new Node({\n      type: 'text',\n      data: text,\n      parent: null,\n      prev: null,\n      next: null\n    });\n  },\n\n  querySelector(sel) {\n    return cssSelect.selectOne(sel, this.documentElement);\n  },\n\n  querySelectorAll(sel) {\n    if (sel === ':root') {\n      return this;\n    }\n\n    return cssSelect.selectAll(sel, this.documentElement);\n  }\n\n};\n/**\n * Essentially `Object.defineProperties()`, except function values are assigned as value descriptors for convenience.\n * @private\n */\n\nfunction defineProperties(obj, properties) {\n  for (const i in properties) {\n    const value = properties[i];\n    Object.defineProperty(obj, i, typeof value === 'function' ? {\n      value\n    } : value);\n  }\n}\n/**\n * Create a property descriptor defining a getter/setter pair alias for a named attribute.\n * @private\n */\n\n\nfunction reflectedProperty(attributeName) {\n  return {\n    get() {\n      return this.getAttribute(attributeName);\n    },\n\n    set(value) {\n      this.setAttribute(attributeName, value);\n    }\n\n  };\n}\n/**\n * Helper to get the text content of a node\n * https://github.com/fb55/domutils/blob/master/src/stringify.ts#L21\n * @private\n */\n\n\nfunction getText(node) {\n  if (Array.isArray(node)) return node.map(getText).join('');\n  if (treeAdapter.isElementNode(node)) return node.name === 'br' ? '\\n' : getText(node.children);\n  if (treeAdapter.isTextNode(node)) return node.data;\n  return '';\n}\n/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n/**\n * Parse a textual CSS Stylesheet into a Stylesheet instance.\n * Stylesheet is a mutable postcss AST with format similar to CSSOM.\n * @see https://github.com/postcss/postcss/\n * @private\n * @param {String} stylesheet\n * @returns {css.Stylesheet} ast\n */\n\n\nfunction parseStylesheet(stylesheet) {\n  return postcss.parse(stylesheet);\n}\n/**\n * Serialize a postcss Stylesheet to a String of CSS.\n * @private\n * @param {css.Stylesheet} ast          A Stylesheet to serialize, such as one returned from `parseStylesheet()`\n * @param {Object} options              Options used by the stringify logic\n * @param {Boolean} [options.compress]  Compress CSS output (removes comments, whitespace, etc)\n */\n\n\nfunction serializeStylesheet(ast, options) {\n  let cssStr = '';\n  postcss.stringify(ast, (result, node, type) => {\n    var _node$raws;\n\n    if (!options.compress) {\n      cssStr += result;\n      return;\n    } // Simple minification logic\n\n\n    if ((node == null ? void 0 : node.type) === 'comment') return;\n\n    if ((node == null ? void 0 : node.type) === 'decl') {\n      const prefix = node.prop + node.raws.between;\n      cssStr += result.replace(prefix, prefix.trim());\n      return;\n    }\n\n    if (type === 'start') {\n      if (node.type === 'rule' && node.selectors) {\n        cssStr += node.selectors.join(',') + '{';\n      } else {\n        cssStr += result.replace(/\\s\\{$/, '{');\n      }\n\n      return;\n    }\n\n    if (type === 'end' && result === '}' && node != null && (_node$raws = node.raws) != null && _node$raws.semicolon) {\n      cssStr = cssStr.slice(0, -1);\n    }\n\n    cssStr += result.trim();\n  });\n  return cssStr;\n}\n/**\n * Converts a walkStyleRules() iterator to mark nodes with `.$$remove=true` instead of actually removing them.\n * This means they can be removed in a second pass, allowing the first pass to be nondestructive (eg: to preserve mirrored sheets).\n * @private\n * @param {Function} iterator   Invoked on each node in the tree. Return `false` to remove that node.\n * @returns {(rule) => void} nonDestructiveIterator\n */\n\n\nfunction markOnly(predicate) {\n  return rule => {\n    const sel = rule.selectors;\n\n    if (predicate(rule) === false) {\n      rule.$$remove = true;\n    }\n\n    rule.$$markedSelectors = rule.selectors;\n\n    if (rule._other) {\n      rule._other.$$markedSelectors = rule._other.selectors;\n    }\n\n    rule.selectors = sel;\n  };\n}\n/**\n * Apply filtered selectors to a rule from a previous markOnly run.\n * @private\n * @param {css.Rule} rule The Rule to apply marked selectors to (if they exist).\n */\n\n\nfunction applyMarkedSelectors(rule) {\n  if (rule.$$markedSelectors) {\n    rule.selectors = rule.$$markedSelectors;\n  }\n\n  if (rule._other) {\n    applyMarkedSelectors(rule._other);\n  }\n}\n/**\n * Recursively walk all rules in a stylesheet.\n * @private\n * @param {css.Rule} node       A Stylesheet or Rule to descend into.\n * @param {Function} iterator   Invoked on each node in the tree. Return `false` to remove that node.\n */\n\n\nfunction walkStyleRules(node, iterator) {\n  node.nodes = node.nodes.filter(rule => {\n    if (hasNestedRules(rule)) {\n      walkStyleRules(rule, iterator);\n    }\n\n    rule._other = undefined;\n    rule.filterSelectors = filterSelectors;\n    return iterator(rule) !== false;\n  });\n}\n/**\n * Recursively walk all rules in two identical stylesheets, filtering nodes into one or the other based on a predicate.\n * @private\n * @param {css.Rule} node       A Stylesheet or Rule to descend into.\n * @param {css.Rule} node2      A second tree identical to `node`\n * @param {Function} iterator   Invoked on each node in the tree. Return `false` to remove that node from the first tree, true to remove it from the second.\n */\n\n\nfunction walkStyleRulesWithReverseMirror(node, node2, iterator) {\n  if (node2 === null) return walkStyleRules(node, iterator);\n  [node.nodes, node2.nodes] = splitFilter(node.nodes, node2.nodes, (rule, index, rules, rules2) => {\n    const rule2 = rules2[index];\n\n    if (hasNestedRules(rule)) {\n      walkStyleRulesWithReverseMirror(rule, rule2, iterator);\n    }\n\n    rule._other = rule2;\n    rule.filterSelectors = filterSelectors;\n    return iterator(rule) !== false;\n  });\n} // Checks if a node has nested rules, like @media\n// @keyframes are an exception since they are evaluated as a whole\n\n\nfunction hasNestedRules(rule) {\n  return rule.nodes && rule.nodes.length && rule.nodes.some(n => n.type === 'rule' || n.type === 'atrule') && rule.name !== 'keyframes' && rule.name !== '-webkit-keyframes';\n} // Like [].filter(), but applies the opposite filtering result to a second copy of the Array without a second pass.\n// This is just a quicker version of generating the compliment of the set returned from a filter operation.\n\n\nfunction splitFilter(a, b, predicate) {\n  const aOut = [];\n  const bOut = [];\n\n  for (let index = 0; index < a.length; index++) {\n    if (predicate(a[index], index, a, b)) {\n      aOut.push(a[index]);\n    } else {\n      bOut.push(a[index]);\n    }\n  }\n\n  return [aOut, bOut];\n} // can be invoked on a style rule to subset its selectors (with reverse mirroring)\n\n\nfunction filterSelectors(predicate) {\n  if (this._other) {\n    const [a, b] = splitFilter(this.selectors, this._other.selectors, predicate);\n    this.selectors = a;\n    this._other.selectors = b;\n  } else {\n    this.selectors = this.selectors.filter(predicate);\n  }\n}\n\nconst LOG_LEVELS = ['trace', 'debug', 'info', 'warn', 'error', 'silent'];\nconst defaultLogger = {\n  trace(msg) {\n    console.trace(msg);\n  },\n\n  debug(msg) {\n    console.debug(msg);\n  },\n\n  warn(msg) {\n    console.warn(chalk.yellow(msg));\n  },\n\n  error(msg) {\n    console.error(chalk.bold.red(msg));\n  },\n\n  info(msg) {\n    console.info(chalk.bold.blue(msg));\n  },\n\n  silent() {}\n\n};\n\nfunction createLogger(logLevel) {\n  const logLevelIdx = LOG_LEVELS.indexOf(logLevel);\n  return LOG_LEVELS.reduce((logger, type, index) => {\n    if (index >= logLevelIdx) {\n      logger[type] = defaultLogger[type];\n    } else {\n      logger[type] = defaultLogger.silent;\n    }\n\n    return logger;\n  }, {});\n}\n/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n/**\n * The mechanism to use for lazy-loading stylesheets.\n *\n * Note: <kbd>JS</kbd> indicates a strategy requiring JavaScript (falls back to `<noscript>` unless disabled).\n *\n * - **default:** Move stylesheet links to the end of the document and insert preload meta tags in their place.\n * - **\"body\":** Move all external stylesheet links to the end of the document.\n * - **\"media\":** Load stylesheets asynchronously by adding `media=\"not x\"` and removing once loaded. <kbd>JS</kbd>\n * - **\"swap\":** Convert stylesheet links to preloads that swap to `rel=\"stylesheet\"` once loaded ([details](https://www.filamentgroup.com/lab/load-css-simpler/#the-code)). <kbd>JS</kbd>\n * - **\"swap-high\":** Use `<link rel=\"alternate stylesheet preload\">` and swap to `rel=\"stylesheet\"` once loaded ([details](http://filamentgroup.github.io/loadCSS/test/new-high.html)). <kbd>JS</kbd>\n * - **\"js\":** Inject an asynchronous CSS loader similar to [LoadCSS](https://github.com/filamentgroup/loadCSS) and use it to load stylesheets. <kbd>JS</kbd>\n * - **\"js-lazy\":** Like `\"js\"`, but the stylesheet is disabled until fully loaded.\n * - **false:** Disables adding preload tags.\n * @typedef {(default|'body'|'media'|'swap'|'swap-high'|'js'|'js-lazy')} PreloadStrategy\n * @public\n */\n\n/**\n * Controls which keyframes rules are inlined.\n *\n * - **\"critical\":** _(default)_ inline keyframes rules that are used by the critical CSS.\n * - **\"all\":** Inline all keyframes rules.\n * - **\"none\":** Remove all keyframes rules.\n * @typedef {('critical'|'all'|'none')} KeyframeStrategy\n * @private\n * @property {String} keyframes     Which {@link KeyframeStrategy keyframe strategy} to use (default: `critical`)_\n */\n\n/**\n * Controls log level of the plugin. Specifies the level the logger should use. A logger will\n * not produce output for any log level beneath the specified level. Available levels and order\n * are:\n *\n * - **\"info\"** _(default)_\n * - **\"warn\"**\n * - **\"error\"**\n * - **\"trace\"**\n * - **\"debug\"**\n * - **\"silent\"**\n * @typedef {('info'|'warn'|'error'|'trace'|'debug'|'silent')} LogLevel\n * @public\n */\n\n/**\n * Custom logger interface:\n * @typedef {object} Logger\n * @public\n * @property {function(String)} trace - Prints a trace message\n * @property {function(String)} debug - Prints a debug message\n * @property {function(String)} info - Prints an information message\n * @property {function(String)} warn - Prints a warning message\n * @property {function(String)} error - Prints an error message\n */\n\n/**\n * All optional. Pass them to `new Critters({ ... })`.\n * @public\n * @typedef Options\n * @property {String} path     Base path location of the CSS files _(default: `''`)_\n * @property {String} publicPath     Public path of the CSS resources. This prefix is removed from the href _(default: `''`)_\n * @property {Boolean} external     Inline styles from external stylesheets _(default: `true`)_\n * @property {Number} inlineThreshold Inline external stylesheets smaller than a given size _(default: `0`)_\n * @property {Number} minimumExternalSize If the non-critical external stylesheet would be below this size, just inline it _(default: `0`)_\n * @property {Boolean} pruneSource  Remove inlined rules from the external stylesheet _(default: `false`)_\n * @property {Boolean} mergeStylesheets Merged inlined stylesheets into a single `<style>` tag _(default: `true`)_\n * @property {String[]} additionalStylesheets Glob for matching other stylesheets to be used while looking for critical CSS.\n * @property {String} preload       Which {@link PreloadStrategy preload strategy} to use\n * @property {Boolean} noscriptFallback Add `<noscript>` fallback to JS-based strategies\n * @property {Boolean} inlineFonts  Inline critical font-face rules _(default: `false`)_\n * @property {Boolean} preloadFonts Preloads critical fonts _(default: `true`)_\n * @property {Boolean} fonts        Shorthand for setting `inlineFonts` + `preloadFonts`\n *  - Values:\n *  - `true` to inline critical font-face rules and preload the fonts\n *  - `false` to don't inline any font-face rules and don't preload fonts\n * @property {String} keyframes     Controls which keyframes rules are inlined.\n *  - Values:\n *  - `\"critical\"`: _(default)_ inline keyframes rules used by the critical CSS\n *  - `\"all\"` inline all keyframes rules\n *  - `\"none\"` remove all keyframes rules\n * @property {Boolean} compress     Compress resulting critical CSS _(default: `true`)_\n * @property {String} logLevel      Controls {@link LogLevel log level} of the plugin _(default: `\"info\"`)_\n * @property {object} logger        Provide a custom logger interface {@link Logger logger}\n */\n\n\nclass Critters {\n  /** @private */\n  constructor(options) {\n    this.options = Object.assign({\n      logLevel: 'info',\n      path: '',\n      publicPath: '',\n      reduceInlineStyles: true,\n      pruneSource: false,\n      additionalStylesheets: []\n    }, options || {});\n    this.urlFilter = this.options.filter;\n\n    if (this.urlFilter instanceof RegExp) {\n      this.urlFilter = this.urlFilter.test.bind(this.urlFilter);\n    }\n\n    this.logger = this.options.logger || createLogger(this.options.logLevel);\n  }\n  /**\n   * Read the contents of a file from the specified filesystem or disk\n   */\n\n\n  readFile(filename) {\n    const fs$1 = this.fs;\n    return new Promise((resolve, reject) => {\n      const callback = (err, data) => {\n        if (err) reject(err);else resolve(data);\n      };\n\n      if (fs$1 && fs$1.readFile) {\n        fs$1.readFile(filename, callback);\n      } else {\n        fs.readFile(filename, 'utf8', callback);\n      }\n    });\n  }\n  /**\n   * Apply critical CSS processing to the html\n   */\n\n\n  process(html) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const start = process.hrtime.bigint(); // Parse the generated HTML in a DOM we can mutate\n\n      const document = createDocument(html);\n\n      if (_this.options.additionalStylesheets.length > 0) {\n        _this.embedAdditionalStylesheet(document);\n      } // `external:false` skips processing of external sheets\n\n\n      if (_this.options.external !== false) {\n        const externalSheets = [].slice.call(document.querySelectorAll('link[rel=\"stylesheet\"]'));\n        yield Promise.all(externalSheets.map(link => _this.embedLinkedStylesheet(link, document)));\n      } // go through all the style tags in the document and reduce them to only critical CSS\n\n\n      const styles = _this.getAffectedStyleTags(document);\n\n      yield Promise.all(styles.map(style => _this.processStyle(style, document)));\n\n      if (_this.options.mergeStylesheets !== false && styles.length !== 0) {\n        yield _this.mergeStylesheets(document);\n      } // serialize the document back to HTML and we're done\n\n\n      const output = serializeDocument(document);\n      const end = process.hrtime.bigint();\n\n      _this.logger.info('Time ' + parseFloat(end - start) / 1000000.0);\n\n      return output;\n    })();\n  }\n  /**\n   * Get the style tags that need processing\n   */\n\n\n  getAffectedStyleTags(document) {\n    const styles = [].slice.call(document.querySelectorAll('style')); // `inline:false` skips processing of inline stylesheets\n\n    if (this.options.reduceInlineStyles === false) {\n      return styles.filter(style => style.$$external);\n    }\n\n    return styles;\n  }\n\n  mergeStylesheets(document) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const styles = _this2.getAffectedStyleTags(document);\n\n      if (styles.length === 0) {\n        _this2.logger.warn('Merging inline stylesheets into a single <style> tag skipped, no inline stylesheets to merge');\n\n        return;\n      }\n\n      const first = styles[0];\n      let sheet = first.textContent;\n\n      for (let i = 1; i < styles.length; i++) {\n        const node = styles[i];\n        sheet += node.textContent;\n        node.remove();\n      }\n\n      first.textContent = sheet;\n    })();\n  }\n  /**\n   * Given href, find the corresponding CSS asset\n   */\n\n\n  getCssAsset(href) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const outputPath = _this3.options.path;\n      const publicPath = _this3.options.publicPath; // CHECK - the output path\n      // path on disk (with output.publicPath removed)\n\n      let normalizedPath = href.replace(/^\\//, '');\n      const pathPrefix = (publicPath || '').replace(/(^\\/|\\/$)/g, '') + '/';\n\n      if (normalizedPath.indexOf(pathPrefix) === 0) {\n        normalizedPath = normalizedPath.substring(pathPrefix.length).replace(/^\\//, '');\n      } // Ignore remote stylesheets\n\n\n      if (/^https?:\\/\\//.test(normalizedPath) || href.startsWith('//')) {\n        return undefined;\n      }\n\n      const filename = path.resolve(outputPath, normalizedPath);\n      let sheet;\n\n      try {\n        sheet = yield _this3.readFile(filename);\n      } catch (e) {\n        _this3.logger.warn(`Unable to locate stylesheet: ${filename}`);\n      }\n\n      return sheet;\n    })();\n  }\n\n  checkInlineThreshold(link, style, sheet) {\n    if (this.options.inlineThreshold && sheet.length < this.options.inlineThreshold) {\n      const href = style.$$name;\n      style.$$reduce = false;\n      this.logger.info(`\\u001b[32mInlined all of ${href} (${sheet.length} was below the threshold of ${this.options.inlineThreshold})\\u001b[39m`);\n      link.remove();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Inline the stylesheets from options.additionalStylesheets (assuming it passes `options.filter`)\n   */\n\n\n  embedAdditionalStylesheet(document) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const styleSheetsIncluded = [];\n      const sources = yield Promise.all(_this4.options.additionalStylesheets.map(cssFile => {\n        if (styleSheetsIncluded.includes(cssFile)) {\n          return;\n        }\n\n        styleSheetsIncluded.push(cssFile);\n        const style = document.createElement('style');\n        style.$$external = true;\n        return _this4.getCssAsset(cssFile, style).then(sheet => [sheet, style]);\n      }));\n      sources.forEach(([sheet, style]) => {\n        if (!sheet) return;\n        style.textContent = sheet;\n        document.head.appendChild(style);\n      });\n    })();\n  }\n  /**\n   * Inline the target stylesheet referred to by a <link rel=\"stylesheet\"> (assuming it passes `options.filter`)\n   */\n\n\n  embedLinkedStylesheet(link, document) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const href = link.getAttribute('href');\n      const media = link.getAttribute('media');\n      const preloadMode = _this5.options.preload; // skip filtered resources, or network resources if no filter is provided\n\n      if (_this5.urlFilter ? _this5.urlFilter(href) : !(href || '').match(/\\.css$/)) {\n        return Promise.resolve();\n      } // the reduced critical CSS gets injected into a new <style> tag\n\n\n      const style = document.createElement('style');\n      style.$$external = true;\n      const sheet = yield _this5.getCssAsset(href, style);\n\n      if (!sheet) {\n        return;\n      }\n\n      style.textContent = sheet;\n      style.$$name = href;\n      style.$$links = [link];\n      link.parentNode.insertBefore(style, link);\n\n      if (_this5.checkInlineThreshold(link, style, sheet)) {\n        return;\n      } // CSS loader is only injected for the first sheet, then this becomes an empty string\n\n\n      let cssLoaderPreamble = \"function $loadcss(u,m,l){(l=document.createElement('link')).rel='stylesheet';l.href=u;document.head.appendChild(l)}\";\n      const lazy = preloadMode === 'js-lazy';\n\n      if (lazy) {\n        cssLoaderPreamble = cssLoaderPreamble.replace('l.href', \"l.media='print';l.onload=function(){l.media=m};l.href\");\n      } // Allow disabling any mutation of the stylesheet link:\n\n\n      if (preloadMode === false) return;\n      let noscriptFallback = false;\n\n      if (preloadMode === 'body') {\n        document.body.appendChild(link);\n      } else {\n        link.setAttribute('rel', 'preload');\n        link.setAttribute('as', 'style');\n\n        if (preloadMode === 'js' || preloadMode === 'js-lazy') {\n          const script = document.createElement('script');\n          const js = `${cssLoaderPreamble}$loadcss(${JSON.stringify(href)}${lazy ? ',' + JSON.stringify(media || 'all') : ''})`; // script.appendChild(document.createTextNode(js));\n\n          script.textContent = js;\n          link.parentNode.insertBefore(script, link.nextSibling);\n          style.$$links.push(script);\n          cssLoaderPreamble = '';\n          noscriptFallback = true;\n        } else if (preloadMode === 'media') {\n          // @see https://github.com/filamentgroup/loadCSS/blob/af1106cfe0bf70147e22185afa7ead96c01dec48/src/loadCSS.js#L26\n          link.setAttribute('rel', 'stylesheet');\n          link.removeAttribute('as');\n          link.setAttribute('media', 'print');\n          link.setAttribute('onload', `this.media='${media || 'all'}'`);\n          noscriptFallback = true;\n        } else if (preloadMode === 'swap-high') {\n          // @see http://filamentgroup.github.io/loadCSS/test/new-high.html\n          link.setAttribute('rel', 'alternate stylesheet preload');\n          link.setAttribute('title', 'styles');\n          link.setAttribute('onload', `this.title='';this.rel='stylesheet'`);\n          noscriptFallback = true;\n        } else if (preloadMode === 'swap') {\n          link.setAttribute('onload', \"this.rel='stylesheet'\");\n          noscriptFallback = true;\n        } else {\n          const bodyLink = document.createElement('link');\n          bodyLink.setAttribute('rel', 'stylesheet');\n          if (media) bodyLink.setAttribute('media', media);\n          bodyLink.setAttribute('href', href);\n          document.body.appendChild(bodyLink);\n          style.$$links.push(bodyLink);\n        }\n      }\n\n      if (_this5.options.noscriptFallback !== false && noscriptFallback) {\n        const noscript = document.createElement('noscript');\n        const noscriptLink = document.createElement('link');\n        noscriptLink.setAttribute('rel', 'stylesheet');\n        noscriptLink.setAttribute('href', href);\n        if (media) noscriptLink.setAttribute('media', media);\n        noscript.appendChild(noscriptLink);\n        link.parentNode.insertBefore(noscript, link.nextSibling);\n        style.$$links.push(noscript);\n      }\n    })();\n  }\n  /**\n   * Prune the source CSS files\n   */\n\n\n  pruneSource(style, before, sheetInverse) {\n    // if external stylesheet would be below minimum size, just inline everything\n    const minSize = this.options.minimumExternalSize;\n    const name = style.$$name;\n\n    if (minSize && sheetInverse.length < minSize) {\n      this.logger.info(`\\u001b[32mInlined all of ${name} (non-critical external stylesheet would have been ${sheetInverse.length}b, which was below the threshold of ${minSize})\\u001b[39m`);\n      style.textContent = before; // remove any associated external resources/loaders:\n\n      if (style.$$links) {\n        for (const link of style.$$links) {\n          const parent = link.parentNode;\n          if (parent) parent.removeChild(link);\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Parse the stylesheet within a <style> element, then reduce it to contain only rules used by the document.\n   */\n\n\n  processStyle(style, document) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      if (style.$$reduce === false) return;\n      const name = style.$$name ? style.$$name.replace(/^\\//, '') : 'inline CSS';\n      const options = _this6.options; // const document = style.ownerDocument;\n\n      let keyframesMode = options.keyframes || 'critical'; // we also accept a boolean value for options.keyframes\n\n      if (keyframesMode === true) keyframesMode = 'all';\n      if (keyframesMode === false) keyframesMode = 'none';\n      let sheet = style.textContent; // store a reference to the previous serialized stylesheet for reporting stats\n\n      const before = sheet; // Skip empty stylesheets\n\n      if (!sheet) return;\n      const ast = parseStylesheet(sheet);\n      const astInverse = options.pruneSource ? parseStylesheet(sheet) : null; // a string to search for font names (very loose)\n\n      let criticalFonts = '';\n      const failedSelectors = [];\n      const criticalKeyframeNames = []; // Walk all CSS rules, marking unused rules with `.$$remove=true` for removal in the second pass.\n      // This first pass is also used to collect font and keyframe usage used in the second pass.\n\n      walkStyleRules(ast, markOnly(rule => {\n        if (rule.type === 'rule') {\n          // Filter the selector list down to only those match\n          rule.filterSelectors(sel => {\n            // Strip pseudo-elements and pseudo-classes, since we only care that their associated elements exist.\n            // This means any selector for a pseudo-element or having a pseudo-class will be inlined if the rest of the selector matches.\n            if (sel === ':root' || sel.match(/^::?(before|after)$/)) {\n              return true;\n            }\n\n            sel = sel.replace(/(?<!\\\\)::?[a-z-]+(?![a-z-(])/gi, '').replace(/::?not\\(\\s*\\)/g, '').trim();\n            if (!sel) return false;\n\n            try {\n              return document.querySelector(sel) != null;\n            } catch (e) {\n              failedSelectors.push(sel + ' -> ' + e.message);\n              return false;\n            }\n          }); // If there are no matched selectors, remove the rule:\n\n          if (!rule.selector) {\n            return false;\n          }\n\n          if (rule.nodes) {\n            for (let i = 0; i < rule.nodes.length; i++) {\n              const decl = rule.nodes[i]; // detect used fonts\n\n              if (decl.prop && decl.prop.match(/\\bfont(-family)?\\b/i)) {\n                criticalFonts += ' ' + decl.value;\n              } // detect used keyframes\n\n\n              if (decl.prop === 'animation' || decl.prop === 'animation-name') {\n                // @todo: parse animation declarations and extract only the name. for now we'll do a lazy match.\n                const names = decl.value.split(/\\s+/);\n\n                for (let j = 0; j < names.length; j++) {\n                  const name = names[j].trim();\n                  if (name) criticalKeyframeNames.push(name);\n                }\n              }\n            }\n          }\n        } // keep font rules, they're handled in the second pass:\n\n\n        if (rule.type === 'atrule' && rule.name === 'font-face') return; // If there are no remaining rules, remove the whole rule:\n\n        const rules = rule.nodes && rule.nodes.filter(rule => !rule.$$remove);\n        return !rules || rules.length !== 0;\n      }));\n\n      if (failedSelectors.length !== 0) {\n        _this6.logger.warn(`${failedSelectors.length} rules skipped due to selector errors:\\n  ${failedSelectors.join('\\n  ')}`);\n      }\n\n      const shouldPreloadFonts = options.fonts === true || options.preloadFonts === true;\n      const shouldInlineFonts = options.fonts !== false && options.inlineFonts === true;\n      const preloadedFonts = []; // Second pass, using data picked up from the first\n\n      walkStyleRulesWithReverseMirror(ast, astInverse, rule => {\n        // remove any rules marked in the first pass\n        if (rule.$$remove === true) return false;\n        applyMarkedSelectors(rule); // prune @keyframes rules\n\n        if (rule.type === 'atrule' && rule.name === 'keyframes') {\n          if (keyframesMode === 'none') return false;\n          if (keyframesMode === 'all') return true;\n          return criticalKeyframeNames.indexOf(rule.params) !== -1;\n        } // prune @font-face rules\n\n\n        if (rule.type === 'atrule' && rule.name === 'font-face') {\n          let family, src;\n\n          for (let i = 0; i < rule.nodes.length; i++) {\n            const decl = rule.nodes[i];\n\n            if (decl.prop === 'src') {\n              // @todo parse this properly and generate multiple preloads with type=\"font/woff2\" etc\n              src = (decl.value.match(/url\\s*\\(\\s*(['\"]?)(.+?)\\1\\s*\\)/) || [])[2];\n            } else if (decl.prop === 'font-family') {\n              family = decl.value;\n            }\n          }\n\n          if (src && shouldPreloadFonts && preloadedFonts.indexOf(src) === -1) {\n            preloadedFonts.push(src);\n            const preload = document.createElement('link');\n            preload.setAttribute('rel', 'preload');\n            preload.setAttribute('as', 'font');\n            preload.setAttribute('crossorigin', 'anonymous');\n            preload.setAttribute('href', src.trim());\n            document.head.appendChild(preload);\n          } // if we're missing info, if the font is unused, or if critical font inlining is disabled, remove the rule:\n\n\n          if (!family || !src || criticalFonts.indexOf(family) === -1 || !shouldInlineFonts) {\n            return false;\n          }\n        }\n      });\n      sheet = serializeStylesheet(ast, {\n        compress: _this6.options.compress !== false\n      }); // If all rules were removed, get rid of the style element entirely\n\n      if (sheet.trim().length === 0) {\n        if (style.parentNode) {\n          style.remove();\n        }\n\n        return;\n      }\n\n      let afterText = '';\n      let styleInlinedCompletely = false;\n\n      if (options.pruneSource) {\n        const sheetInverse = serializeStylesheet(astInverse, {\n          compress: _this6.options.compress !== false\n        });\n        styleInlinedCompletely = _this6.pruneSource(style, before, sheetInverse);\n\n        if (styleInlinedCompletely) {\n          const percent = sheetInverse.length / before.length * 100;\n          afterText = `, reducing non-inlined size ${percent | 0}% to ${prettyBytes(sheetInverse.length)}`;\n        }\n      } // replace the inline stylesheet with its critical'd counterpart\n\n\n      if (!styleInlinedCompletely) {\n        style.textContent = sheet;\n      } // output stats\n\n\n      const percent = sheet.length / before.length * 100 | 0;\n\n      _this6.logger.info('\\u001b[32mInlined ' + prettyBytes(sheet.length) + ' (' + percent + '% of original ' + prettyBytes(before.length) + ') of ' + name + afterText + '.\\u001b[39m');\n    })();\n  }\n\n}\n\nmodule.exports = Critters;","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/critters/dist/critters.js"],"names":["_interopDefault","ex","path","require","fs","prettyBytes","parse5","cssSelect","treeAdapter","postcss","chalk","PARSE5_OPTS","createDocument","html","document","parse","defineProperties","DocumentExtensions","scratch","createElement","$$Node","constructor","elementProto","Object","getPrototypeOf","ElementExtensions","ownerDocument","serializeDocument","serialize","nodeName","get","tagName","toUpperCase","id","reflectedProperty","className","insertBefore","child","referenceNode","appendChild","removeChild","detachNode","remove","textContent","getText","set","text","children","insertText","setAttribute","name","value","attribs","removeAttribute","getAttribute","hasAttribute","getAttributeNode","specified","nodeType","contentType","documentElement","childNodes","filter","String","toLowerCase","compatMode","quirks","getDocumentMode","head","querySelector","body","createTextNode","Node","type","data","parent","prev","next","sel","selectOne","querySelectorAll","selectAll","obj","properties","i","defineProperty","attributeName","node","Array","isArray","map","join","isElementNode","isTextNode","parseStylesheet","stylesheet","serializeStylesheet","ast","options","cssStr","stringify","result","_node$raws","compress","prefix","prop","raws","between","replace","trim","selectors","semicolon","slice","markOnly","predicate","rule","$$remove","$$markedSelectors","_other","applyMarkedSelectors","walkStyleRules","iterator","nodes","hasNestedRules","undefined","filterSelectors","walkStyleRulesWithReverseMirror","node2","splitFilter","index","rules","rules2","rule2","length","some","n","a","b","aOut","bOut","push","LOG_LEVELS","defaultLogger","trace","msg","console","debug","warn","yellow","error","bold","red","info","blue","silent","createLogger","logLevel","logLevelIdx","indexOf","reduce","logger","Critters","assign","publicPath","reduceInlineStyles","pruneSource","additionalStylesheets","urlFilter","RegExp","test","bind","readFile","filename","fs$1","Promise","resolve","reject","callback","err","process","start","hrtime","bigint","embedAdditionalStylesheet","external","externalSheets","call","all","link","embedLinkedStylesheet","styles","getAffectedStyleTags","style","processStyle","mergeStylesheets","output","end","parseFloat","$$external","first","sheet","getCssAsset","href","outputPath","normalizedPath","pathPrefix","substring","startsWith","e","checkInlineThreshold","inlineThreshold","$$name","$$reduce","styleSheetsIncluded","sources","cssFile","includes","then","forEach","media","preloadMode","preload","match","$$links","parentNode","cssLoaderPreamble","lazy","noscriptFallback","script","js","JSON","nextSibling","bodyLink","noscript","noscriptLink","before","sheetInverse","minSize","minimumExternalSize","keyframesMode","keyframes","astInverse","criticalFonts","failedSelectors","criticalKeyframeNames","message","selector","decl","names","split","j","shouldPreloadFonts","fonts","preloadFonts","shouldInlineFonts","inlineFonts","preloadedFonts","params","family","src","afterText","styleInlinedCompletely","percent","module","exports"],"mappings":"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AACC,MAAD,EAASvF,IAAT,EAAewD,KAAf,KAAyB;AAChD,QAAIA,KAAK,IAAI4B,WAAb,EAA0B;AACxBG,MAAAA,MAAM,CAACvF,IAAD,CAAN,GAAeqE,aAAa,CAACrE,IAAD,CAA5B;AACD,KAFD,MAEO;AACLuF,MAAAA,MAAM,CAACvF,IAAD,CAAN,GAAeqE,aAAa,CAACY,MAA7B;AACD;;AAED,WAAOM,MAAP;AACD,GARM,EAQJ,EARI,CAAP;AASD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,QAAN,CAAe;AACb;AACA5I,EAAAA,WAAW,CAAC6E,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAe3E,MAAM,CAAC2I,MAAP,CAAc;AAC3BN,MAAAA,QAAQ,EAAE,MADiB;AAE3B1J,MAAAA,IAAI,EAAE,EAFqB;AAG3BiK,MAAAA,UAAU,EAAE,EAHe;AAI3BC,MAAAA,kBAAkB,EAAE,IAJO;AAK3BC,MAAAA,WAAW,EAAE,KALc;AAM3BC,MAAAA,qBAAqB,EAAE;AANI,KAAd,EAOZpE,OAAO,IAAI,EAPC,CAAf;AAQA,SAAKqE,SAAL,GAAiB,KAAKrE,OAAL,CAAapC,MAA9B;;AAEA,QAAI,KAAKyG,SAAL,YAA0BC,MAA9B,EAAsC;AACpC,WAAKD,SAAL,GAAiB,KAAKA,SAAL,CAAeE,IAAf,CAAoBC,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","sourcesContent":["function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar path = _interopDefault(require('path'));\nvar fs = require('fs');\nvar prettyBytes = _interopDefault(require('pretty-bytes'));\nvar parse5 = _interopDefault(require('parse5'));\nvar cssSelect = require('css-select');\nvar treeAdapter = _interopDefault(require('parse5-htmlparser2-tree-adapter'));\nvar postcss = require('postcss');\nvar chalk = _interopDefault(require('chalk'));\n\n/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nconst PARSE5_OPTS = {\n  treeAdapter\n};\n/**\n * Parse HTML into a mutable, serializable DOM Document.\n * The DOM implementation is an htmlparser2 DOM enhanced with basic DOM mutation methods.\n * @param {String} html   HTML to parse into a Document instance\n */\n\nfunction createDocument(html) {\n  const document =\n  /** @type {HTMLDocument} */\n  parse5.parse(html, PARSE5_OPTS);\n  defineProperties(document, DocumentExtensions); // Extend Element.prototype with DOM manipulation methods.\n\n  const scratch = document.createElement('div'); // Get a reference to the base Node class - used by createTextNode()\n\n  document.$$Node = scratch.constructor;\n  const elementProto = Object.getPrototypeOf(scratch);\n  defineProperties(elementProto, ElementExtensions);\n  elementProto.ownerDocument = document;\n  return document;\n}\n/**\n * Serialize a Document to an HTML String\n * @param {HTMLDocument} document   A Document, such as one created via `createDocument()`\n */\n\nfunction serializeDocument(document) {\n  return parse5.serialize(document, PARSE5_OPTS);\n}\n/** @typedef {treeAdapter.Document & typeof ElementExtensions} HTMLDocument */\n\n/**\n * Methods and descriptors to mix into Element.prototype\n * @private\n */\n\nconst ElementExtensions = {\n  /** @extends treeAdapter.Element.prototype */\n  nodeName: {\n    get() {\n      return this.tagName.toUpperCase();\n    }\n\n  },\n  id: reflectedProperty('id'),\n  className: reflectedProperty('class'),\n\n  insertBefore(child, referenceNode) {\n    if (!referenceNode) return this.appendChild(child);\n    treeAdapter.insertBefore(this, child, referenceNode);\n    return child;\n  },\n\n  appendChild(child) {\n    treeAdapter.appendChild(this, child);\n    return child;\n  },\n\n  removeChild(child) {\n    treeAdapter.detachNode(child);\n  },\n\n  remove() {\n    treeAdapter.detachNode(this);\n  },\n\n  textContent: {\n    get() {\n      return getText(this);\n    },\n\n    set(text) {\n      this.children = [];\n      treeAdapter.insertText(this, text);\n    }\n\n  },\n\n  setAttribute(name, value) {\n    if (this.attribs == null) this.attribs = {};\n    if (value == null) value = '';\n    this.attribs[name] = value;\n  },\n\n  removeAttribute(name) {\n    if (this.attribs != null) {\n      delete this.attribs[name];\n    }\n  },\n\n  getAttribute(name) {\n    return this.attribs != null && this.attribs[name];\n  },\n\n  hasAttribute(name) {\n    return this.attribs != null && this.attribs[name] != null;\n  },\n\n  getAttributeNode(name) {\n    const value = this.getAttribute(name);\n    if (value != null) return {\n      specified: true,\n      value\n    };\n  }\n\n};\n/**\n * Methods and descriptors to mix into the global document instance\n * @private\n */\n\nconst DocumentExtensions = {\n  /** @extends treeAdapter.Document.prototype */\n  // document is just an Element in htmlparser2, giving it a nodeType of ELEMENT_NODE.\n  // TODO: verify if these are needed for css-select\n  nodeType: {\n    get() {\n      return 9;\n    }\n\n  },\n  contentType: {\n    get() {\n      return 'text/html';\n    }\n\n  },\n  nodeName: {\n    get() {\n      return '#document';\n    }\n\n  },\n  documentElement: {\n    get() {\n      // Find the first <html> element within the document\n      return this.childNodes.filter(child => String(child.tagName).toLowerCase() === 'html');\n    }\n\n  },\n  compatMode: {\n    get() {\n      const compatMode = {\n        'no-quirks': 'CSS1Compat',\n        quirks: 'BackCompat',\n        'limited-quirks': 'CSS1Compat'\n      };\n      return compatMode[treeAdapter.getDocumentMode(this)];\n    }\n\n  },\n  head: {\n    get() {\n      return this.querySelector('head');\n    }\n\n  },\n  body: {\n    get() {\n      return this.querySelector('body');\n    }\n\n  },\n\n  createElement(name) {\n    return treeAdapter.createElement(name, null, []);\n  },\n\n  createTextNode(text) {\n    // there is no dedicated createTextNode equivalent exposed in htmlparser2's DOM\n    const Node = this.$$Node;\n    return new Node({\n      type: 'text',\n      data: text,\n      parent: null,\n      prev: null,\n      next: null\n    });\n  },\n\n  querySelector(sel) {\n    return cssSelect.selectOne(sel, this.documentElement);\n  },\n\n  querySelectorAll(sel) {\n    if (sel === ':root') {\n      return this;\n    }\n\n    return cssSelect.selectAll(sel, this.documentElement);\n  }\n\n};\n/**\n * Essentially `Object.defineProperties()`, except function values are assigned as value descriptors for convenience.\n * @private\n */\n\nfunction defineProperties(obj, properties) {\n  for (const i in properties) {\n    const value = properties[i];\n    Object.defineProperty(obj, i, typeof value === 'function' ? {\n      value\n    } : value);\n  }\n}\n/**\n * Create a property descriptor defining a getter/setter pair alias for a named attribute.\n * @private\n */\n\n\nfunction reflectedProperty(attributeName) {\n  return {\n    get() {\n      return this.getAttribute(attributeName);\n    },\n\n    set(value) {\n      this.setAttribute(attributeName, value);\n    }\n\n  };\n}\n/**\n * Helper to get the text content of a node\n * https://github.com/fb55/domutils/blob/master/src/stringify.ts#L21\n * @private\n */\n\n\nfunction getText(node) {\n  if (Array.isArray(node)) return node.map(getText).join('');\n  if (treeAdapter.isElementNode(node)) return node.name === 'br' ? '\\n' : getText(node.children);\n  if (treeAdapter.isTextNode(node)) return node.data;\n  return '';\n}\n\n/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n/**\n * Parse a textual CSS Stylesheet into a Stylesheet instance.\n * Stylesheet is a mutable postcss AST with format similar to CSSOM.\n * @see https://github.com/postcss/postcss/\n * @private\n * @param {String} stylesheet\n * @returns {css.Stylesheet} ast\n */\n\nfunction parseStylesheet(stylesheet) {\n  return postcss.parse(stylesheet);\n}\n/**\n * Serialize a postcss Stylesheet to a String of CSS.\n * @private\n * @param {css.Stylesheet} ast          A Stylesheet to serialize, such as one returned from `parseStylesheet()`\n * @param {Object} options              Options used by the stringify logic\n * @param {Boolean} [options.compress]  Compress CSS output (removes comments, whitespace, etc)\n */\n\nfunction serializeStylesheet(ast, options) {\n  let cssStr = '';\n  postcss.stringify(ast, (result, node, type) => {\n    var _node$raws;\n\n    if (!options.compress) {\n      cssStr += result;\n      return;\n    } // Simple minification logic\n\n\n    if ((node == null ? void 0 : node.type) === 'comment') return;\n\n    if ((node == null ? void 0 : node.type) === 'decl') {\n      const prefix = node.prop + node.raws.between;\n      cssStr += result.replace(prefix, prefix.trim());\n      return;\n    }\n\n    if (type === 'start') {\n      if (node.type === 'rule' && node.selectors) {\n        cssStr += node.selectors.join(',') + '{';\n      } else {\n        cssStr += result.replace(/\\s\\{$/, '{');\n      }\n\n      return;\n    }\n\n    if (type === 'end' && result === '}' && node != null && (_node$raws = node.raws) != null && _node$raws.semicolon) {\n      cssStr = cssStr.slice(0, -1);\n    }\n\n    cssStr += result.trim();\n  });\n  return cssStr;\n}\n/**\n * Converts a walkStyleRules() iterator to mark nodes with `.$$remove=true` instead of actually removing them.\n * This means they can be removed in a second pass, allowing the first pass to be nondestructive (eg: to preserve mirrored sheets).\n * @private\n * @param {Function} iterator   Invoked on each node in the tree. Return `false` to remove that node.\n * @returns {(rule) => void} nonDestructiveIterator\n */\n\nfunction markOnly(predicate) {\n  return rule => {\n    const sel = rule.selectors;\n\n    if (predicate(rule) === false) {\n      rule.$$remove = true;\n    }\n\n    rule.$$markedSelectors = rule.selectors;\n\n    if (rule._other) {\n      rule._other.$$markedSelectors = rule._other.selectors;\n    }\n\n    rule.selectors = sel;\n  };\n}\n/**\n * Apply filtered selectors to a rule from a previous markOnly run.\n * @private\n * @param {css.Rule} rule The Rule to apply marked selectors to (if they exist).\n */\n\nfunction applyMarkedSelectors(rule) {\n  if (rule.$$markedSelectors) {\n    rule.selectors = rule.$$markedSelectors;\n  }\n\n  if (rule._other) {\n    applyMarkedSelectors(rule._other);\n  }\n}\n/**\n * Recursively walk all rules in a stylesheet.\n * @private\n * @param {css.Rule} node       A Stylesheet or Rule to descend into.\n * @param {Function} iterator   Invoked on each node in the tree. Return `false` to remove that node.\n */\n\nfunction walkStyleRules(node, iterator) {\n  node.nodes = node.nodes.filter(rule => {\n    if (hasNestedRules(rule)) {\n      walkStyleRules(rule, iterator);\n    }\n\n    rule._other = undefined;\n    rule.filterSelectors = filterSelectors;\n    return iterator(rule) !== false;\n  });\n}\n/**\n * Recursively walk all rules in two identical stylesheets, filtering nodes into one or the other based on a predicate.\n * @private\n * @param {css.Rule} node       A Stylesheet or Rule to descend into.\n * @param {css.Rule} node2      A second tree identical to `node`\n * @param {Function} iterator   Invoked on each node in the tree. Return `false` to remove that node from the first tree, true to remove it from the second.\n */\n\nfunction walkStyleRulesWithReverseMirror(node, node2, iterator) {\n  if (node2 === null) return walkStyleRules(node, iterator);\n  [node.nodes, node2.nodes] = splitFilter(node.nodes, node2.nodes, (rule, index, rules, rules2) => {\n    const rule2 = rules2[index];\n\n    if (hasNestedRules(rule)) {\n      walkStyleRulesWithReverseMirror(rule, rule2, iterator);\n    }\n\n    rule._other = rule2;\n    rule.filterSelectors = filterSelectors;\n    return iterator(rule) !== false;\n  });\n} // Checks if a node has nested rules, like @media\n// @keyframes are an exception since they are evaluated as a whole\n\nfunction hasNestedRules(rule) {\n  return rule.nodes && rule.nodes.length && rule.nodes.some(n => n.type === 'rule' || n.type === 'atrule') && rule.name !== 'keyframes' && rule.name !== '-webkit-keyframes';\n} // Like [].filter(), but applies the opposite filtering result to a second copy of the Array without a second pass.\n// This is just a quicker version of generating the compliment of the set returned from a filter operation.\n\n\nfunction splitFilter(a, b, predicate) {\n  const aOut = [];\n  const bOut = [];\n\n  for (let index = 0; index < a.length; index++) {\n    if (predicate(a[index], index, a, b)) {\n      aOut.push(a[index]);\n    } else {\n      bOut.push(a[index]);\n    }\n  }\n\n  return [aOut, bOut];\n} // can be invoked on a style rule to subset its selectors (with reverse mirroring)\n\n\nfunction filterSelectors(predicate) {\n  if (this._other) {\n    const [a, b] = splitFilter(this.selectors, this._other.selectors, predicate);\n    this.selectors = a;\n    this._other.selectors = b;\n  } else {\n    this.selectors = this.selectors.filter(predicate);\n  }\n}\n\nconst LOG_LEVELS = ['trace', 'debug', 'info', 'warn', 'error', 'silent'];\nconst defaultLogger = {\n  trace(msg) {\n    console.trace(msg);\n  },\n\n  debug(msg) {\n    console.debug(msg);\n  },\n\n  warn(msg) {\n    console.warn(chalk.yellow(msg));\n  },\n\n  error(msg) {\n    console.error(chalk.bold.red(msg));\n  },\n\n  info(msg) {\n    console.info(chalk.bold.blue(msg));\n  },\n\n  silent() {}\n\n};\nfunction createLogger(logLevel) {\n  const logLevelIdx = LOG_LEVELS.indexOf(logLevel);\n  return LOG_LEVELS.reduce((logger, type, index) => {\n    if (index >= logLevelIdx) {\n      logger[type] = defaultLogger[type];\n    } else {\n      logger[type] = defaultLogger.silent;\n    }\n\n    return logger;\n  }, {});\n}\n\n/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n/**\n * The mechanism to use for lazy-loading stylesheets.\n *\n * Note: <kbd>JS</kbd> indicates a strategy requiring JavaScript (falls back to `<noscript>` unless disabled).\n *\n * - **default:** Move stylesheet links to the end of the document and insert preload meta tags in their place.\n * - **\"body\":** Move all external stylesheet links to the end of the document.\n * - **\"media\":** Load stylesheets asynchronously by adding `media=\"not x\"` and removing once loaded. <kbd>JS</kbd>\n * - **\"swap\":** Convert stylesheet links to preloads that swap to `rel=\"stylesheet\"` once loaded ([details](https://www.filamentgroup.com/lab/load-css-simpler/#the-code)). <kbd>JS</kbd>\n * - **\"swap-high\":** Use `<link rel=\"alternate stylesheet preload\">` and swap to `rel=\"stylesheet\"` once loaded ([details](http://filamentgroup.github.io/loadCSS/test/new-high.html)). <kbd>JS</kbd>\n * - **\"js\":** Inject an asynchronous CSS loader similar to [LoadCSS](https://github.com/filamentgroup/loadCSS) and use it to load stylesheets. <kbd>JS</kbd>\n * - **\"js-lazy\":** Like `\"js\"`, but the stylesheet is disabled until fully loaded.\n * - **false:** Disables adding preload tags.\n * @typedef {(default|'body'|'media'|'swap'|'swap-high'|'js'|'js-lazy')} PreloadStrategy\n * @public\n */\n\n/**\n * Controls which keyframes rules are inlined.\n *\n * - **\"critical\":** _(default)_ inline keyframes rules that are used by the critical CSS.\n * - **\"all\":** Inline all keyframes rules.\n * - **\"none\":** Remove all keyframes rules.\n * @typedef {('critical'|'all'|'none')} KeyframeStrategy\n * @private\n * @property {String} keyframes     Which {@link KeyframeStrategy keyframe strategy} to use (default: `critical`)_\n */\n\n/**\n * Controls log level of the plugin. Specifies the level the logger should use. A logger will\n * not produce output for any log level beneath the specified level. Available levels and order\n * are:\n *\n * - **\"info\"** _(default)_\n * - **\"warn\"**\n * - **\"error\"**\n * - **\"trace\"**\n * - **\"debug\"**\n * - **\"silent\"**\n * @typedef {('info'|'warn'|'error'|'trace'|'debug'|'silent')} LogLevel\n * @public\n */\n\n/**\n * Custom logger interface:\n * @typedef {object} Logger\n * @public\n * @property {function(String)} trace - Prints a trace message\n * @property {function(String)} debug - Prints a debug message\n * @property {function(String)} info - Prints an information message\n * @property {function(String)} warn - Prints a warning message\n * @property {function(String)} error - Prints an error message\n */\n\n/**\n * All optional. Pass them to `new Critters({ ... })`.\n * @public\n * @typedef Options\n * @property {String} path     Base path location of the CSS files _(default: `''`)_\n * @property {String} publicPath     Public path of the CSS resources. This prefix is removed from the href _(default: `''`)_\n * @property {Boolean} external     Inline styles from external stylesheets _(default: `true`)_\n * @property {Number} inlineThreshold Inline external stylesheets smaller than a given size _(default: `0`)_\n * @property {Number} minimumExternalSize If the non-critical external stylesheet would be below this size, just inline it _(default: `0`)_\n * @property {Boolean} pruneSource  Remove inlined rules from the external stylesheet _(default: `false`)_\n * @property {Boolean} mergeStylesheets Merged inlined stylesheets into a single `<style>` tag _(default: `true`)_\n * @property {String[]} additionalStylesheets Glob for matching other stylesheets to be used while looking for critical CSS.\n * @property {String} preload       Which {@link PreloadStrategy preload strategy} to use\n * @property {Boolean} noscriptFallback Add `<noscript>` fallback to JS-based strategies\n * @property {Boolean} inlineFonts  Inline critical font-face rules _(default: `false`)_\n * @property {Boolean} preloadFonts Preloads critical fonts _(default: `true`)_\n * @property {Boolean} fonts        Shorthand for setting `inlineFonts` + `preloadFonts`\n *  - Values:\n *  - `true` to inline critical font-face rules and preload the fonts\n *  - `false` to don't inline any font-face rules and don't preload fonts\n * @property {String} keyframes     Controls which keyframes rules are inlined.\n *  - Values:\n *  - `\"critical\"`: _(default)_ inline keyframes rules used by the critical CSS\n *  - `\"all\"` inline all keyframes rules\n *  - `\"none\"` remove all keyframes rules\n * @property {Boolean} compress     Compress resulting critical CSS _(default: `true`)_\n * @property {String} logLevel      Controls {@link LogLevel log level} of the plugin _(default: `\"info\"`)_\n * @property {object} logger        Provide a custom logger interface {@link Logger logger}\n */\n\nclass Critters {\n  /** @private */\n  constructor(options) {\n    this.options = Object.assign({\n      logLevel: 'info',\n      path: '',\n      publicPath: '',\n      reduceInlineStyles: true,\n      pruneSource: false,\n      additionalStylesheets: []\n    }, options || {});\n    this.urlFilter = this.options.filter;\n\n    if (this.urlFilter instanceof RegExp) {\n      this.urlFilter = this.urlFilter.test.bind(this.urlFilter);\n    }\n\n    this.logger = this.options.logger || createLogger(this.options.logLevel);\n  }\n  /**\n   * Read the contents of a file from the specified filesystem or disk\n   */\n\n\n  readFile(filename) {\n    const fs$1 = this.fs;\n    return new Promise((resolve, reject) => {\n      const callback = (err, data) => {\n        if (err) reject(err);else resolve(data);\n      };\n\n      if (fs$1 && fs$1.readFile) {\n        fs$1.readFile(filename, callback);\n      } else {\n        fs.readFile(filename, 'utf8', callback);\n      }\n    });\n  }\n  /**\n   * Apply critical CSS processing to the html\n   */\n\n\n  async process(html) {\n    const start = process.hrtime.bigint(); // Parse the generated HTML in a DOM we can mutate\n\n    const document = createDocument(html);\n\n    if (this.options.additionalStylesheets.length > 0) {\n      this.embedAdditionalStylesheet(document);\n    } // `external:false` skips processing of external sheets\n\n\n    if (this.options.external !== false) {\n      const externalSheets = [].slice.call(document.querySelectorAll('link[rel=\"stylesheet\"]'));\n      await Promise.all(externalSheets.map(link => this.embedLinkedStylesheet(link, document)));\n    } // go through all the style tags in the document and reduce them to only critical CSS\n\n\n    const styles = this.getAffectedStyleTags(document);\n    await Promise.all(styles.map(style => this.processStyle(style, document)));\n\n    if (this.options.mergeStylesheets !== false && styles.length !== 0) {\n      await this.mergeStylesheets(document);\n    } // serialize the document back to HTML and we're done\n\n\n    const output = serializeDocument(document);\n    const end = process.hrtime.bigint();\n    this.logger.info('Time ' + parseFloat(end - start) / 1000000.0);\n    return output;\n  }\n  /**\n   * Get the style tags that need processing\n   */\n\n\n  getAffectedStyleTags(document) {\n    const styles = [].slice.call(document.querySelectorAll('style')); // `inline:false` skips processing of inline stylesheets\n\n    if (this.options.reduceInlineStyles === false) {\n      return styles.filter(style => style.$$external);\n    }\n\n    return styles;\n  }\n\n  async mergeStylesheets(document) {\n    const styles = this.getAffectedStyleTags(document);\n\n    if (styles.length === 0) {\n      this.logger.warn('Merging inline stylesheets into a single <style> tag skipped, no inline stylesheets to merge');\n      return;\n    }\n\n    const first = styles[0];\n    let sheet = first.textContent;\n\n    for (let i = 1; i < styles.length; i++) {\n      const node = styles[i];\n      sheet += node.textContent;\n      node.remove();\n    }\n\n    first.textContent = sheet;\n  }\n  /**\n   * Given href, find the corresponding CSS asset\n   */\n\n\n  async getCssAsset(href) {\n    const outputPath = this.options.path;\n    const publicPath = this.options.publicPath; // CHECK - the output path\n    // path on disk (with output.publicPath removed)\n\n    let normalizedPath = href.replace(/^\\//, '');\n    const pathPrefix = (publicPath || '').replace(/(^\\/|\\/$)/g, '') + '/';\n\n    if (normalizedPath.indexOf(pathPrefix) === 0) {\n      normalizedPath = normalizedPath.substring(pathPrefix.length).replace(/^\\//, '');\n    } // Ignore remote stylesheets\n\n\n    if (/^https?:\\/\\//.test(normalizedPath) || href.startsWith('//')) {\n      return undefined;\n    }\n\n    const filename = path.resolve(outputPath, normalizedPath);\n    let sheet;\n\n    try {\n      sheet = await this.readFile(filename);\n    } catch (e) {\n      this.logger.warn(`Unable to locate stylesheet: ${filename}`);\n    }\n\n    return sheet;\n  }\n\n  checkInlineThreshold(link, style, sheet) {\n    if (this.options.inlineThreshold && sheet.length < this.options.inlineThreshold) {\n      const href = style.$$name;\n      style.$$reduce = false;\n      this.logger.info(`\\u001b[32mInlined all of ${href} (${sheet.length} was below the threshold of ${this.options.inlineThreshold})\\u001b[39m`);\n      link.remove();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Inline the stylesheets from options.additionalStylesheets (assuming it passes `options.filter`)\n   */\n\n\n  async embedAdditionalStylesheet(document) {\n    const styleSheetsIncluded = [];\n    const sources = await Promise.all(this.options.additionalStylesheets.map(cssFile => {\n      if (styleSheetsIncluded.includes(cssFile)) {\n        return;\n      }\n\n      styleSheetsIncluded.push(cssFile);\n      const style = document.createElement('style');\n      style.$$external = true;\n      return this.getCssAsset(cssFile, style).then(sheet => [sheet, style]);\n    }));\n    sources.forEach(([sheet, style]) => {\n      if (!sheet) return;\n      style.textContent = sheet;\n      document.head.appendChild(style);\n    });\n  }\n  /**\n   * Inline the target stylesheet referred to by a <link rel=\"stylesheet\"> (assuming it passes `options.filter`)\n   */\n\n\n  async embedLinkedStylesheet(link, document) {\n    const href = link.getAttribute('href');\n    const media = link.getAttribute('media');\n    const preloadMode = this.options.preload; // skip filtered resources, or network resources if no filter is provided\n\n    if (this.urlFilter ? this.urlFilter(href) : !(href || '').match(/\\.css$/)) {\n      return Promise.resolve();\n    } // the reduced critical CSS gets injected into a new <style> tag\n\n\n    const style = document.createElement('style');\n    style.$$external = true;\n    const sheet = await this.getCssAsset(href, style);\n\n    if (!sheet) {\n      return;\n    }\n\n    style.textContent = sheet;\n    style.$$name = href;\n    style.$$links = [link];\n    link.parentNode.insertBefore(style, link);\n\n    if (this.checkInlineThreshold(link, style, sheet)) {\n      return;\n    } // CSS loader is only injected for the first sheet, then this becomes an empty string\n\n\n    let cssLoaderPreamble = \"function $loadcss(u,m,l){(l=document.createElement('link')).rel='stylesheet';l.href=u;document.head.appendChild(l)}\";\n    const lazy = preloadMode === 'js-lazy';\n\n    if (lazy) {\n      cssLoaderPreamble = cssLoaderPreamble.replace('l.href', \"l.media='print';l.onload=function(){l.media=m};l.href\");\n    } // Allow disabling any mutation of the stylesheet link:\n\n\n    if (preloadMode === false) return;\n    let noscriptFallback = false;\n\n    if (preloadMode === 'body') {\n      document.body.appendChild(link);\n    } else {\n      link.setAttribute('rel', 'preload');\n      link.setAttribute('as', 'style');\n\n      if (preloadMode === 'js' || preloadMode === 'js-lazy') {\n        const script = document.createElement('script');\n        const js = `${cssLoaderPreamble}$loadcss(${JSON.stringify(href)}${lazy ? ',' + JSON.stringify(media || 'all') : ''})`; // script.appendChild(document.createTextNode(js));\n\n        script.textContent = js;\n        link.parentNode.insertBefore(script, link.nextSibling);\n        style.$$links.push(script);\n        cssLoaderPreamble = '';\n        noscriptFallback = true;\n      } else if (preloadMode === 'media') {\n        // @see https://github.com/filamentgroup/loadCSS/blob/af1106cfe0bf70147e22185afa7ead96c01dec48/src/loadCSS.js#L26\n        link.setAttribute('rel', 'stylesheet');\n        link.removeAttribute('as');\n        link.setAttribute('media', 'print');\n        link.setAttribute('onload', `this.media='${media || 'all'}'`);\n        noscriptFallback = true;\n      } else if (preloadMode === 'swap-high') {\n        // @see http://filamentgroup.github.io/loadCSS/test/new-high.html\n        link.setAttribute('rel', 'alternate stylesheet preload');\n        link.setAttribute('title', 'styles');\n        link.setAttribute('onload', `this.title='';this.rel='stylesheet'`);\n        noscriptFallback = true;\n      } else if (preloadMode === 'swap') {\n        link.setAttribute('onload', \"this.rel='stylesheet'\");\n        noscriptFallback = true;\n      } else {\n        const bodyLink = document.createElement('link');\n        bodyLink.setAttribute('rel', 'stylesheet');\n        if (media) bodyLink.setAttribute('media', media);\n        bodyLink.setAttribute('href', href);\n        document.body.appendChild(bodyLink);\n        style.$$links.push(bodyLink);\n      }\n    }\n\n    if (this.options.noscriptFallback !== false && noscriptFallback) {\n      const noscript = document.createElement('noscript');\n      const noscriptLink = document.createElement('link');\n      noscriptLink.setAttribute('rel', 'stylesheet');\n      noscriptLink.setAttribute('href', href);\n      if (media) noscriptLink.setAttribute('media', media);\n      noscript.appendChild(noscriptLink);\n      link.parentNode.insertBefore(noscript, link.nextSibling);\n      style.$$links.push(noscript);\n    }\n  }\n  /**\n   * Prune the source CSS files\n   */\n\n\n  pruneSource(style, before, sheetInverse) {\n    // if external stylesheet would be below minimum size, just inline everything\n    const minSize = this.options.minimumExternalSize;\n    const name = style.$$name;\n\n    if (minSize && sheetInverse.length < minSize) {\n      this.logger.info(`\\u001b[32mInlined all of ${name} (non-critical external stylesheet would have been ${sheetInverse.length}b, which was below the threshold of ${minSize})\\u001b[39m`);\n      style.textContent = before; // remove any associated external resources/loaders:\n\n      if (style.$$links) {\n        for (const link of style.$$links) {\n          const parent = link.parentNode;\n          if (parent) parent.removeChild(link);\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Parse the stylesheet within a <style> element, then reduce it to contain only rules used by the document.\n   */\n\n\n  async processStyle(style, document) {\n    if (style.$$reduce === false) return;\n    const name = style.$$name ? style.$$name.replace(/^\\//, '') : 'inline CSS';\n    const options = this.options; // const document = style.ownerDocument;\n\n    let keyframesMode = options.keyframes || 'critical'; // we also accept a boolean value for options.keyframes\n\n    if (keyframesMode === true) keyframesMode = 'all';\n    if (keyframesMode === false) keyframesMode = 'none';\n    let sheet = style.textContent; // store a reference to the previous serialized stylesheet for reporting stats\n\n    const before = sheet; // Skip empty stylesheets\n\n    if (!sheet) return;\n    const ast = parseStylesheet(sheet);\n    const astInverse = options.pruneSource ? parseStylesheet(sheet) : null; // a string to search for font names (very loose)\n\n    let criticalFonts = '';\n    const failedSelectors = [];\n    const criticalKeyframeNames = []; // Walk all CSS rules, marking unused rules with `.$$remove=true` for removal in the second pass.\n    // This first pass is also used to collect font and keyframe usage used in the second pass.\n\n    walkStyleRules(ast, markOnly(rule => {\n      if (rule.type === 'rule') {\n        // Filter the selector list down to only those match\n        rule.filterSelectors(sel => {\n          // Strip pseudo-elements and pseudo-classes, since we only care that their associated elements exist.\n          // This means any selector for a pseudo-element or having a pseudo-class will be inlined if the rest of the selector matches.\n          if (sel === ':root' || sel.match(/^::?(before|after)$/)) {\n            return true;\n          }\n\n          sel = sel.replace(/(?<!\\\\)::?[a-z-]+(?![a-z-(])/gi, '').replace(/::?not\\(\\s*\\)/g, '').trim();\n          if (!sel) return false;\n\n          try {\n            return document.querySelector(sel) != null;\n          } catch (e) {\n            failedSelectors.push(sel + ' -> ' + e.message);\n            return false;\n          }\n        }); // If there are no matched selectors, remove the rule:\n\n        if (!rule.selector) {\n          return false;\n        }\n\n        if (rule.nodes) {\n          for (let i = 0; i < rule.nodes.length; i++) {\n            const decl = rule.nodes[i]; // detect used fonts\n\n            if (decl.prop && decl.prop.match(/\\bfont(-family)?\\b/i)) {\n              criticalFonts += ' ' + decl.value;\n            } // detect used keyframes\n\n\n            if (decl.prop === 'animation' || decl.prop === 'animation-name') {\n              // @todo: parse animation declarations and extract only the name. for now we'll do a lazy match.\n              const names = decl.value.split(/\\s+/);\n\n              for (let j = 0; j < names.length; j++) {\n                const name = names[j].trim();\n                if (name) criticalKeyframeNames.push(name);\n              }\n            }\n          }\n        }\n      } // keep font rules, they're handled in the second pass:\n\n\n      if (rule.type === 'atrule' && rule.name === 'font-face') return; // If there are no remaining rules, remove the whole rule:\n\n      const rules = rule.nodes && rule.nodes.filter(rule => !rule.$$remove);\n      return !rules || rules.length !== 0;\n    }));\n\n    if (failedSelectors.length !== 0) {\n      this.logger.warn(`${failedSelectors.length} rules skipped due to selector errors:\\n  ${failedSelectors.join('\\n  ')}`);\n    }\n\n    const shouldPreloadFonts = options.fonts === true || options.preloadFonts === true;\n    const shouldInlineFonts = options.fonts !== false && options.inlineFonts === true;\n    const preloadedFonts = []; // Second pass, using data picked up from the first\n\n    walkStyleRulesWithReverseMirror(ast, astInverse, rule => {\n      // remove any rules marked in the first pass\n      if (rule.$$remove === true) return false;\n      applyMarkedSelectors(rule); // prune @keyframes rules\n\n      if (rule.type === 'atrule' && rule.name === 'keyframes') {\n        if (keyframesMode === 'none') return false;\n        if (keyframesMode === 'all') return true;\n        return criticalKeyframeNames.indexOf(rule.params) !== -1;\n      } // prune @font-face rules\n\n\n      if (rule.type === 'atrule' && rule.name === 'font-face') {\n        let family, src;\n\n        for (let i = 0; i < rule.nodes.length; i++) {\n          const decl = rule.nodes[i];\n\n          if (decl.prop === 'src') {\n            // @todo parse this properly and generate multiple preloads with type=\"font/woff2\" etc\n            src = (decl.value.match(/url\\s*\\(\\s*(['\"]?)(.+?)\\1\\s*\\)/) || [])[2];\n          } else if (decl.prop === 'font-family') {\n            family = decl.value;\n          }\n        }\n\n        if (src && shouldPreloadFonts && preloadedFonts.indexOf(src) === -1) {\n          preloadedFonts.push(src);\n          const preload = document.createElement('link');\n          preload.setAttribute('rel', 'preload');\n          preload.setAttribute('as', 'font');\n          preload.setAttribute('crossorigin', 'anonymous');\n          preload.setAttribute('href', src.trim());\n          document.head.appendChild(preload);\n        } // if we're missing info, if the font is unused, or if critical font inlining is disabled, remove the rule:\n\n\n        if (!family || !src || criticalFonts.indexOf(family) === -1 || !shouldInlineFonts) {\n          return false;\n        }\n      }\n    });\n    sheet = serializeStylesheet(ast, {\n      compress: this.options.compress !== false\n    }); // If all rules were removed, get rid of the style element entirely\n\n    if (sheet.trim().length === 0) {\n      if (style.parentNode) {\n        style.remove();\n      }\n\n      return;\n    }\n\n    let afterText = '';\n    let styleInlinedCompletely = false;\n\n    if (options.pruneSource) {\n      const sheetInverse = serializeStylesheet(astInverse, {\n        compress: this.options.compress !== false\n      });\n      styleInlinedCompletely = this.pruneSource(style, before, sheetInverse);\n\n      if (styleInlinedCompletely) {\n        const percent = sheetInverse.length / before.length * 100;\n        afterText = `, reducing non-inlined size ${percent | 0}% to ${prettyBytes(sheetInverse.length)}`;\n      }\n    } // replace the inline stylesheet with its critical'd counterpart\n\n\n    if (!styleInlinedCompletely) {\n      style.textContent = sheet;\n    } // output stats\n\n\n    const percent = sheet.length / before.length * 100 | 0;\n    this.logger.info('\\u001b[32mInlined ' + prettyBytes(sheet.length) + ' (' + percent + '% of original ' + prettyBytes(before.length) + ') of ' + name + afterText + '.\\u001b[39m');\n  }\n\n}\n\nmodule.exports = Critters;\n"]},"metadata":{},"sourceType":"script"}