{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JavaScriptOptimizerPlugin = void 0;\n\nconst piscina_1 = __importDefault(require(\"piscina\"));\n\nconst typescript_1 = require(\"typescript\");\n\nconst environment_options_1 = require(\"../../utils/environment-options\");\n\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The maximum number of Workers that will be created to execute optimize tasks.\n */\n\n\nconst MAX_OPTIMIZE_WORKERS = environment_options_1.maxWorkers;\n/**\n * The name of the plugin provided to Webpack when tapping Webpack compiler hooks.\n */\n\nconst PLUGIN_NAME = 'angular-javascript-optimizer';\n/**\n * A Webpack plugin that provides JavaScript optimization capabilities.\n *\n * The plugin uses both `esbuild` and `terser` to provide both fast and highly-optimized\n * code output. `esbuild` is used as an initial pass to remove the majority of unused code\n * as well as shorten identifiers. `terser` is then used as a secondary pass to apply\n * optimizations not yet implemented by `esbuild`.\n */\n\nclass JavaScriptOptimizerPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n\n  apply(compiler) {\n    var _this = this;\n\n    const {\n      OriginalSource,\n      SourceMapSource\n    } = compiler.webpack.sources;\n    compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {\n      compilation.hooks.processAssets.tapPromise({\n        name: PLUGIN_NAME,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE\n      }, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (compilationAssets) {\n          const scriptsToOptimize = [];\n          const cache = compilation.options.cache && compilation.getCache('JavaScriptOptimizerPlugin'); // Analyze the compilation assets for scripts that require optimization\n\n          for (const assetName of Object.keys(compilationAssets)) {\n            if (!assetName.endsWith('.js')) {\n              continue;\n            }\n\n            const scriptAsset = compilation.getAsset(assetName); // Skip assets that have already been optimized or are verbatim copies (project assets)\n\n            if (!scriptAsset || scriptAsset.info.minimized || scriptAsset.info.copied) {\n              continue;\n            }\n\n            const {\n              source: scriptAssetSource,\n              name\n            } = scriptAsset;\n            let cacheItem;\n\n            if (cache) {\n              const eTag = cache.getLazyHashedEtag(scriptAssetSource);\n              cacheItem = cache.getItemCache(name, eTag);\n              const cachedOutput = yield cacheItem.getPromise();\n\n              if (cachedOutput) {\n                compilation.updateAsset(name, cachedOutput.source, assetInfo => ({ ...assetInfo,\n                  minimized: true\n                }));\n                continue;\n              }\n            }\n\n            const {\n              source,\n              map\n            } = scriptAssetSource.sourceAndMap();\n            scriptsToOptimize.push({\n              name: scriptAsset.name,\n              code: typeof source === 'string' ? source : source.toString(),\n              map,\n              cacheItem\n            });\n          }\n\n          if (scriptsToOptimize.length === 0) {\n            return;\n          } // Ensure all replacement values are strings which is the expected type for esbuild\n\n\n          let define;\n\n          if (_this.options.define) {\n            define = {};\n\n            for (const [key, value] of Object.entries(_this.options.define)) {\n              define[key] = String(value);\n            }\n          }\n\n          let target = 2017;\n\n          if (_this.options.target) {\n            if (_this.options.target <= typescript_1.ScriptTarget.ES5) {\n              target = 5;\n            } else if (_this.options.target === typescript_1.ScriptTarget.ESNext) {\n              target = 'next';\n            } else {\n              target = Number(typescript_1.ScriptTarget[_this.options.target].slice(2));\n            }\n          } // Setup the options used by all worker tasks\n\n\n          const optimizeOptions = {\n            sourcemap: _this.options.sourcemap,\n            define,\n            keepNames: _this.options.keepNames,\n            keepIdentifierNames: _this.options.keepIdentifierNames,\n            target,\n            removeLicenses: _this.options.removeLicenses,\n            advanced: _this.options.advanced,\n            // Perform a single native esbuild support check.\n            // This removes the need for each worker to perform the check which would\n            // otherwise require spawning a separate process per worker.\n            alwaysUseWasm: !esbuild_executor_1.EsbuildExecutor.hasNativeSupport()\n          }; // Sort scripts so larger scripts start first - worker pool uses a FIFO queue\n\n          scriptsToOptimize.sort((a, b) => a.code.length - b.code.length); // Initialize the task worker pool\n\n          const workerPath = require.resolve('./javascript-optimizer-worker');\n\n          const workerPool = new piscina_1.default({\n            filename: workerPath,\n            maxThreads: MAX_OPTIMIZE_WORKERS\n          }); // Enqueue script optimization tasks and update compilation assets as the tasks complete\n\n          try {\n            const tasks = [];\n\n            for (const {\n              name,\n              code,\n              map,\n              cacheItem\n            } of scriptsToOptimize) {\n              tasks.push(workerPool.run({\n                asset: {\n                  name,\n                  code,\n                  map\n                },\n                options: optimizeOptions\n              }).then(({\n                code,\n                name,\n                map\n              }) => {\n                const optimizedAsset = map ? new SourceMapSource(code, name, map) : new OriginalSource(code, name);\n                compilation.updateAsset(name, optimizedAsset, assetInfo => ({ ...assetInfo,\n                  minimized: true\n                }));\n                return cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.storePromise({\n                  source: optimizedAsset\n                });\n              }, error => {\n                const optimizationError = new compiler.webpack.WebpackError(`Optimization error [${name}]: ${error.stack || error.message}`);\n                compilation.errors.push(optimizationError);\n              }));\n            }\n\n            yield Promise.all(tasks);\n          } finally {\n            void workerPool.destroy();\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    });\n  }\n\n}\n\nexports.JavaScriptOptimizerPlugin = JavaScriptOptimizerPlugin;","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/@angular-devkit/build-angular/src/webpack/plugins/javascript-optimizer-plugin.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","JavaScriptOptimizerPlugin","piscina_1","require","typescript_1","environment_options_1","esbuild_executor_1","MAX_OPTIMIZE_WORKERS","maxWorkers","PLUGIN_NAME","constructor","options","apply","compiler","OriginalSource","SourceMapSource","webpack","sources","hooks","compilation","tap","processAssets","tapPromise","name","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","compilationAssets","scriptsToOptimize","cache","getCache","assetName","keys","endsWith","scriptAsset","getAsset","info","minimized","copied","source","scriptAssetSource","cacheItem","eTag","getLazyHashedEtag","getItemCache","cachedOutput","getPromise","updateAsset","assetInfo","map","sourceAndMap","push","code","toString","length","define","key","entries","String","target","ScriptTarget","ES5","ESNext","Number","slice","optimizeOptions","sourcemap","keepNames","keepIdentifierNames","removeLicenses","advanced","alwaysUseWasm","EsbuildExecutor","hasNativeSupport","sort","a","b","workerPath","resolve","workerPool","default","filename","maxThreads","tasks","run","asset","then","optimizedAsset","storePromise","error","optimizationError","WebpackError","stack","message","errors","Promise","all","destroy"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JavaScriptOptimizerPlugin = void 0;\nconst piscina_1 = __importDefault(require(\"piscina\"));\nconst typescript_1 = require(\"typescript\");\nconst environment_options_1 = require(\"../../utils/environment-options\");\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The maximum number of Workers that will be created to execute optimize tasks.\n */\nconst MAX_OPTIMIZE_WORKERS = environment_options_1.maxWorkers;\n/**\n * The name of the plugin provided to Webpack when tapping Webpack compiler hooks.\n */\nconst PLUGIN_NAME = 'angular-javascript-optimizer';\n/**\n * A Webpack plugin that provides JavaScript optimization capabilities.\n *\n * The plugin uses both `esbuild` and `terser` to provide both fast and highly-optimized\n * code output. `esbuild` is used as an initial pass to remove the majority of unused code\n * as well as shorten identifiers. `terser` is then used as a secondary pass to apply\n * optimizations not yet implemented by `esbuild`.\n */\nclass JavaScriptOptimizerPlugin {\n    constructor(options) {\n        this.options = options;\n    }\n    apply(compiler) {\n        const { OriginalSource, SourceMapSource } = compiler.webpack.sources;\n        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) => {\n            compilation.hooks.processAssets.tapPromise({\n                name: PLUGIN_NAME,\n                stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n            }, async (compilationAssets) => {\n                const scriptsToOptimize = [];\n                const cache = compilation.options.cache && compilation.getCache('JavaScriptOptimizerPlugin');\n                // Analyze the compilation assets for scripts that require optimization\n                for (const assetName of Object.keys(compilationAssets)) {\n                    if (!assetName.endsWith('.js')) {\n                        continue;\n                    }\n                    const scriptAsset = compilation.getAsset(assetName);\n                    // Skip assets that have already been optimized or are verbatim copies (project assets)\n                    if (!scriptAsset || scriptAsset.info.minimized || scriptAsset.info.copied) {\n                        continue;\n                    }\n                    const { source: scriptAssetSource, name } = scriptAsset;\n                    let cacheItem;\n                    if (cache) {\n                        const eTag = cache.getLazyHashedEtag(scriptAssetSource);\n                        cacheItem = cache.getItemCache(name, eTag);\n                        const cachedOutput = await cacheItem.getPromise();\n                        if (cachedOutput) {\n                            compilation.updateAsset(name, cachedOutput.source, (assetInfo) => ({\n                                ...assetInfo,\n                                minimized: true,\n                            }));\n                            continue;\n                        }\n                    }\n                    const { source, map } = scriptAssetSource.sourceAndMap();\n                    scriptsToOptimize.push({\n                        name: scriptAsset.name,\n                        code: typeof source === 'string' ? source : source.toString(),\n                        map,\n                        cacheItem,\n                    });\n                }\n                if (scriptsToOptimize.length === 0) {\n                    return;\n                }\n                // Ensure all replacement values are strings which is the expected type for esbuild\n                let define;\n                if (this.options.define) {\n                    define = {};\n                    for (const [key, value] of Object.entries(this.options.define)) {\n                        define[key] = String(value);\n                    }\n                }\n                let target = 2017;\n                if (this.options.target) {\n                    if (this.options.target <= typescript_1.ScriptTarget.ES5) {\n                        target = 5;\n                    }\n                    else if (this.options.target === typescript_1.ScriptTarget.ESNext) {\n                        target = 'next';\n                    }\n                    else {\n                        target = Number(typescript_1.ScriptTarget[this.options.target].slice(2));\n                    }\n                }\n                // Setup the options used by all worker tasks\n                const optimizeOptions = {\n                    sourcemap: this.options.sourcemap,\n                    define,\n                    keepNames: this.options.keepNames,\n                    keepIdentifierNames: this.options.keepIdentifierNames,\n                    target,\n                    removeLicenses: this.options.removeLicenses,\n                    advanced: this.options.advanced,\n                    // Perform a single native esbuild support check.\n                    // This removes the need for each worker to perform the check which would\n                    // otherwise require spawning a separate process per worker.\n                    alwaysUseWasm: !esbuild_executor_1.EsbuildExecutor.hasNativeSupport(),\n                };\n                // Sort scripts so larger scripts start first - worker pool uses a FIFO queue\n                scriptsToOptimize.sort((a, b) => a.code.length - b.code.length);\n                // Initialize the task worker pool\n                const workerPath = require.resolve('./javascript-optimizer-worker');\n                const workerPool = new piscina_1.default({\n                    filename: workerPath,\n                    maxThreads: MAX_OPTIMIZE_WORKERS,\n                });\n                // Enqueue script optimization tasks and update compilation assets as the tasks complete\n                try {\n                    const tasks = [];\n                    for (const { name, code, map, cacheItem } of scriptsToOptimize) {\n                        tasks.push(workerPool\n                            .run({\n                            asset: {\n                                name,\n                                code,\n                                map,\n                            },\n                            options: optimizeOptions,\n                        })\n                            .then(({ code, name, map }) => {\n                            const optimizedAsset = map\n                                ? new SourceMapSource(code, name, map)\n                                : new OriginalSource(code, name);\n                            compilation.updateAsset(name, optimizedAsset, (assetInfo) => ({\n                                ...assetInfo,\n                                minimized: true,\n                            }));\n                            return cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.storePromise({\n                                source: optimizedAsset,\n                            });\n                        }, (error) => {\n                            const optimizationError = new compiler.webpack.WebpackError(`Optimization error [${name}]: ${error.stack || error.message}`);\n                            compilation.errors.push(optimizationError);\n                        }));\n                    }\n                    await Promise.all(tasks);\n                }\n                finally {\n                    void workerPool.destroy();\n                }\n            });\n        });\n    }\n}\nexports.JavaScriptOptimizerPlugin = JavaScriptOptimizerPlugin;\n"]},"metadata":{},"sourceType":"script"}