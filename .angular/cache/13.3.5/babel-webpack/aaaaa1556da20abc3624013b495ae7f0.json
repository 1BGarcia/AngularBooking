{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar _asyncIterator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncIterator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.i18nInlineEmittedFiles = void 0;\n\nconst fs = __importStar(require(\"fs\"));\n\nconst path = __importStar(require(\"path\"));\n\nconst action_executor_1 = require(\"./action-executor\");\n\nconst copy_assets_1 = require(\"./copy-assets\");\n\nconst spinner_1 = require(\"./spinner\");\n\nfunction emittedFilesToInlineOptions(emittedFiles, scriptsEntryPointName, emittedPath, outputPath, es5, missingTranslation, context) {\n  const options = [];\n  const originalFiles = [];\n\n  for (const emittedFile of emittedFiles) {\n    if (emittedFile.asset || emittedFile.extension !== '.js' || emittedFile.name && scriptsEntryPointName.includes(emittedFile.name)) {\n      continue;\n    }\n\n    const originalPath = path.join(emittedPath, emittedFile.file);\n    const action = {\n      filename: emittedFile.file,\n      code: fs.readFileSync(originalPath, 'utf8'),\n      es5,\n      outputPath,\n      missingTranslation,\n      setLocale: emittedFile.name === 'main' || emittedFile.name === 'vendor'\n    };\n    originalFiles.push(originalPath);\n\n    try {\n      const originalMapPath = originalPath + '.map';\n      action.map = fs.readFileSync(originalMapPath, 'utf8');\n      originalFiles.push(originalMapPath);\n    } catch (err) {\n      if (err.code !== 'ENOENT') {\n        throw err;\n      }\n    }\n\n    context.logger.debug(`i18n file queued for processing: ${action.filename}`);\n    options.push(action);\n  }\n\n  return {\n    options,\n    originalFiles\n  };\n}\n\nfunction i18nInlineEmittedFiles(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9) {\n  return _i18nInlineEmittedFiles.apply(this, arguments);\n}\n\nfunction _i18nInlineEmittedFiles() {\n  _i18nInlineEmittedFiles = _asyncToGenerator(function* (context, emittedFiles, i18n, baseOutputPath, outputPaths, scriptsEntryPointName, emittedPath, es5, missingTranslation) {\n    const executor = new action_executor_1.BundleActionExecutor({\n      i18n\n    });\n    let hasErrors = false;\n    const spinner = new spinner_1.Spinner();\n    spinner.start('Generating localized bundles...');\n\n    try {\n      const {\n        options,\n        originalFiles: processedFiles\n      } = emittedFilesToInlineOptions(emittedFiles, scriptsEntryPointName, emittedPath, baseOutputPath, es5, missingTranslation, context);\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(executor.inlineAll(options)), _step; _iteratorAbruptCompletion = !(_step = yield _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const result = _step.value;\n          context.logger.debug(`i18n file processed: ${result.file}`);\n\n          for (const diagnostic of result.diagnostics) {\n            spinner.stop();\n\n            if (diagnostic.type === 'error') {\n              hasErrors = true;\n              context.logger.error(diagnostic.message);\n            } else {\n              context.logger.warn(diagnostic.message);\n            }\n\n            spinner.start();\n          }\n        } // Copy any non-processed files into the output locations\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            yield _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      yield (0, copy_assets_1.copyAssets)([{\n        glob: '**/*',\n        input: emittedPath,\n        output: '',\n        ignore: [...processedFiles].map(f => path.relative(emittedPath, f))\n      }], outputPaths, '');\n    } catch (err) {\n      spinner.fail('Localized bundle generation failed: ' + err.message);\n      return false;\n    } finally {\n      executor.stop();\n    }\n\n    if (hasErrors) {\n      spinner.fail('Localized bundle generation failed.');\n    } else {\n      spinner.succeed('Localized bundle generation complete.');\n    }\n\n    return !hasErrors;\n  });\n  return _i18nInlineEmittedFiles.apply(this, arguments);\n}\n\nexports.i18nInlineEmittedFiles = i18nInlineEmittedFiles;","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/@angular-devkit/build-angular/src/utils/i18n-inlining.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","i18nInlineEmittedFiles","fs","require","path","action_executor_1","copy_assets_1","spinner_1","emittedFilesToInlineOptions","emittedFiles","scriptsEntryPointName","emittedPath","outputPath","es5","missingTranslation","context","options","originalFiles","emittedFile","asset","extension","name","includes","originalPath","join","file","action","filename","code","readFileSync","setLocale","push","originalMapPath","map","err","logger","debug","i18n","baseOutputPath","outputPaths","executor","BundleActionExecutor","hasErrors","spinner","Spinner","start","processedFiles","inlineAll","diagnostic","diagnostics","stop","type","error","message","warn","copyAssets","glob","input","output","ignore","f","relative","fail","succeed"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.i18nInlineEmittedFiles = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst action_executor_1 = require(\"./action-executor\");\nconst copy_assets_1 = require(\"./copy-assets\");\nconst spinner_1 = require(\"./spinner\");\nfunction emittedFilesToInlineOptions(emittedFiles, scriptsEntryPointName, emittedPath, outputPath, es5, missingTranslation, context) {\n    const options = [];\n    const originalFiles = [];\n    for (const emittedFile of emittedFiles) {\n        if (emittedFile.asset ||\n            emittedFile.extension !== '.js' ||\n            (emittedFile.name && scriptsEntryPointName.includes(emittedFile.name))) {\n            continue;\n        }\n        const originalPath = path.join(emittedPath, emittedFile.file);\n        const action = {\n            filename: emittedFile.file,\n            code: fs.readFileSync(originalPath, 'utf8'),\n            es5,\n            outputPath,\n            missingTranslation,\n            setLocale: emittedFile.name === 'main' || emittedFile.name === 'vendor',\n        };\n        originalFiles.push(originalPath);\n        try {\n            const originalMapPath = originalPath + '.map';\n            action.map = fs.readFileSync(originalMapPath, 'utf8');\n            originalFiles.push(originalMapPath);\n        }\n        catch (err) {\n            if (err.code !== 'ENOENT') {\n                throw err;\n            }\n        }\n        context.logger.debug(`i18n file queued for processing: ${action.filename}`);\n        options.push(action);\n    }\n    return { options, originalFiles };\n}\nasync function i18nInlineEmittedFiles(context, emittedFiles, i18n, baseOutputPath, outputPaths, scriptsEntryPointName, emittedPath, es5, missingTranslation) {\n    const executor = new action_executor_1.BundleActionExecutor({ i18n });\n    let hasErrors = false;\n    const spinner = new spinner_1.Spinner();\n    spinner.start('Generating localized bundles...');\n    try {\n        const { options, originalFiles: processedFiles } = emittedFilesToInlineOptions(emittedFiles, scriptsEntryPointName, emittedPath, baseOutputPath, es5, missingTranslation, context);\n        for await (const result of executor.inlineAll(options)) {\n            context.logger.debug(`i18n file processed: ${result.file}`);\n            for (const diagnostic of result.diagnostics) {\n                spinner.stop();\n                if (diagnostic.type === 'error') {\n                    hasErrors = true;\n                    context.logger.error(diagnostic.message);\n                }\n                else {\n                    context.logger.warn(diagnostic.message);\n                }\n                spinner.start();\n            }\n        }\n        // Copy any non-processed files into the output locations\n        await (0, copy_assets_1.copyAssets)([\n            {\n                glob: '**/*',\n                input: emittedPath,\n                output: '',\n                ignore: [...processedFiles].map((f) => path.relative(emittedPath, f)),\n            },\n        ], outputPaths, '');\n    }\n    catch (err) {\n        spinner.fail('Localized bundle generation failed: ' + err.message);\n        return false;\n    }\n    finally {\n        executor.stop();\n    }\n    if (hasErrors) {\n        spinner.fail('Localized bundle generation failed.');\n    }\n    else {\n        spinner.succeed('Localized bundle generation complete.');\n    }\n    return !hasErrors;\n}\nexports.i18nInlineEmittedFiles = i18nInlineEmittedFiles;\n"]},"metadata":{},"sourceType":"script"}