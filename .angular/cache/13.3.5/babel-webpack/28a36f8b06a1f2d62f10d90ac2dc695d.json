{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CssOptimizerPlugin = void 0;\n\nconst webpack_diagnostics_1 = require(\"../../utils/webpack-diagnostics\");\n\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The name of the plugin provided to Webpack when tapping Webpack compiler hooks.\n */\n\n\nconst PLUGIN_NAME = 'angular-css-optimizer';\n/**\n * A Webpack plugin that provides CSS optimization capabilities.\n *\n * The plugin uses both `esbuild` to provide both fast and highly-optimized\n * code output.\n */\n\nclass CssOptimizerPlugin {\n  constructor(options) {\n    this.esbuild = new esbuild_executor_1.EsbuildExecutor();\n\n    if (options === null || options === void 0 ? void 0 : options.supportedBrowsers) {\n      this.targets = this.transformSupportedBrowsersToTargets(options.supportedBrowsers);\n    }\n  }\n\n  apply(compiler) {\n    var _this = this;\n\n    const {\n      OriginalSource,\n      SourceMapSource\n    } = compiler.webpack.sources;\n    compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {\n      compilation.hooks.processAssets.tapPromise({\n        name: PLUGIN_NAME,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE\n      }, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (compilationAssets) {\n          const cache = compilation.options.cache && compilation.getCache(PLUGIN_NAME);\n\n          for (const assetName of Object.keys(compilationAssets)) {\n            if (!/\\.(?:css|scss|sass|less|styl)$/.test(assetName)) {\n              continue;\n            }\n\n            const asset = compilation.getAsset(assetName); // Skip assets that have already been optimized or are verbatim copies (project assets)\n\n            if (!asset || asset.info.minimized || asset.info.copied) {\n              continue;\n            }\n\n            const {\n              source: styleAssetSource,\n              name\n            } = asset;\n            let cacheItem;\n\n            if (cache) {\n              const eTag = cache.getLazyHashedEtag(styleAssetSource);\n              cacheItem = cache.getItemCache(name, eTag);\n              const cachedOutput = yield cacheItem.getPromise();\n\n              if (cachedOutput) {\n                yield _this.addWarnings(compilation, cachedOutput.warnings);\n                compilation.updateAsset(name, cachedOutput.source, assetInfo => ({ ...assetInfo,\n                  minimized: true\n                }));\n                continue;\n              }\n            }\n\n            const {\n              source,\n              map: inputMap\n            } = styleAssetSource.sourceAndMap();\n            const input = typeof source === 'string' ? source : source.toString();\n            const {\n              code,\n              warnings,\n              map\n            } = yield _this.optimize(input, asset.name, inputMap, _this.targets);\n            yield _this.addWarnings(compilation, warnings);\n            const optimizedAsset = map ? new SourceMapSource(code, name, map) : new OriginalSource(code, name);\n            compilation.updateAsset(name, optimizedAsset, assetInfo => ({ ...assetInfo,\n              minimized: true\n            }));\n            yield cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.storePromise({\n              source: optimizedAsset,\n              warnings\n            });\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    });\n  }\n  /**\n   * Optimizes a CSS asset using esbuild.\n   *\n   * @param input The CSS asset source content to optimize.\n   * @param name The name of the CSS asset. Used to generate source maps.\n   * @param inputMap Optionally specifies the CSS asset's original source map that will\n   * be merged with the intermediate optimized source map.\n   * @param target Optionally specifies the target browsers for the output code.\n   * @returns A promise resolving to the optimized CSS, source map, and any warnings.\n   */\n\n\n  optimize(input, name, inputMap, target) {\n    let sourceMapLine;\n\n    if (inputMap) {\n      // esbuild will automatically remap the sourcemap if provided\n      sourceMapLine = `\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,${Buffer.from(JSON.stringify(inputMap)).toString('base64')} */`;\n    }\n\n    return this.esbuild.transform(sourceMapLine ? input + sourceMapLine : input, {\n      loader: 'css',\n      legalComments: 'inline',\n      minify: true,\n      sourcemap: !!inputMap && 'external',\n      sourcefile: name,\n      target\n    });\n  }\n\n  addWarnings(compilation, warnings) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (warnings.length > 0) {\n        for (const warning of yield _this2.esbuild.formatMessages(warnings, {\n          kind: 'warning'\n        })) {\n          (0, webpack_diagnostics_1.addWarning)(compilation, warning);\n        }\n      }\n    })();\n  }\n\n  transformSupportedBrowsersToTargets(supportedBrowsers) {\n    const transformed = []; // https://esbuild.github.io/api/#target\n\n    const esBuildSupportedBrowsers = new Set(['safari', 'firefox', 'edge', 'chrome', 'ios']);\n\n    for (const browser of supportedBrowsers) {\n      let [browserName, version] = browser.split(' '); // browserslist uses the name `ios_saf` for iOS Safari whereas esbuild uses `ios`\n\n      if (browserName === 'ios_saf') {\n        browserName = 'ios';\n      } // browserslist uses ranges `15.2-15.3` versions but only the lowest is required\n      // to perform minimum supported feature checks. esbuild also expects a single version.\n\n\n      [version] = version.split('-');\n\n      if (esBuildSupportedBrowsers.has(browserName)) {\n        if (browserName === 'safari' && version === 'TP') {\n          // esbuild only supports numeric versions so `TP` is converted to a high number (999) since\n          // a Technology Preview (TP) of Safari is assumed to support all currently known features.\n          version = '999';\n        }\n\n        transformed.push(browserName + version);\n      }\n    }\n\n    return transformed.length ? transformed : undefined;\n  }\n\n}\n\nexports.CssOptimizerPlugin = CssOptimizerPlugin;","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/@angular-devkit/build-angular/src/webpack/plugins/css-optimizer-plugin.js"],"names":["Object","defineProperty","exports","value","CssOptimizerPlugin","webpack_diagnostics_1","require","esbuild_executor_1","PLUGIN_NAME","constructor","options","esbuild","EsbuildExecutor","supportedBrowsers","targets","transformSupportedBrowsersToTargets","apply","compiler","OriginalSource","SourceMapSource","webpack","sources","hooks","compilation","tap","processAssets","tapPromise","name","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","compilationAssets","cache","getCache","assetName","keys","test","asset","getAsset","info","minimized","copied","source","styleAssetSource","cacheItem","eTag","getLazyHashedEtag","getItemCache","cachedOutput","getPromise","addWarnings","warnings","updateAsset","assetInfo","map","inputMap","sourceAndMap","input","toString","code","optimize","optimizedAsset","storePromise","target","sourceMapLine","Buffer","from","JSON","stringify","transform","loader","legalComments","minify","sourcemap","sourcefile","length","warning","formatMessages","kind","addWarning","transformed","esBuildSupportedBrowsers","Set","browser","browserName","version","split","has","push","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CssOptimizerPlugin = void 0;\nconst webpack_diagnostics_1 = require(\"../../utils/webpack-diagnostics\");\nconst esbuild_executor_1 = require(\"./esbuild-executor\");\n/**\n * The name of the plugin provided to Webpack when tapping Webpack compiler hooks.\n */\nconst PLUGIN_NAME = 'angular-css-optimizer';\n/**\n * A Webpack plugin that provides CSS optimization capabilities.\n *\n * The plugin uses both `esbuild` to provide both fast and highly-optimized\n * code output.\n */\nclass CssOptimizerPlugin {\n    constructor(options) {\n        this.esbuild = new esbuild_executor_1.EsbuildExecutor();\n        if (options === null || options === void 0 ? void 0 : options.supportedBrowsers) {\n            this.targets = this.transformSupportedBrowsersToTargets(options.supportedBrowsers);\n        }\n    }\n    apply(compiler) {\n        const { OriginalSource, SourceMapSource } = compiler.webpack.sources;\n        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation) => {\n            compilation.hooks.processAssets.tapPromise({\n                name: PLUGIN_NAME,\n                stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n            }, async (compilationAssets) => {\n                const cache = compilation.options.cache && compilation.getCache(PLUGIN_NAME);\n                for (const assetName of Object.keys(compilationAssets)) {\n                    if (!/\\.(?:css|scss|sass|less|styl)$/.test(assetName)) {\n                        continue;\n                    }\n                    const asset = compilation.getAsset(assetName);\n                    // Skip assets that have already been optimized or are verbatim copies (project assets)\n                    if (!asset || asset.info.minimized || asset.info.copied) {\n                        continue;\n                    }\n                    const { source: styleAssetSource, name } = asset;\n                    let cacheItem;\n                    if (cache) {\n                        const eTag = cache.getLazyHashedEtag(styleAssetSource);\n                        cacheItem = cache.getItemCache(name, eTag);\n                        const cachedOutput = await cacheItem.getPromise();\n                        if (cachedOutput) {\n                            await this.addWarnings(compilation, cachedOutput.warnings);\n                            compilation.updateAsset(name, cachedOutput.source, (assetInfo) => ({\n                                ...assetInfo,\n                                minimized: true,\n                            }));\n                            continue;\n                        }\n                    }\n                    const { source, map: inputMap } = styleAssetSource.sourceAndMap();\n                    const input = typeof source === 'string' ? source : source.toString();\n                    const { code, warnings, map } = await this.optimize(input, asset.name, inputMap, this.targets);\n                    await this.addWarnings(compilation, warnings);\n                    const optimizedAsset = map\n                        ? new SourceMapSource(code, name, map)\n                        : new OriginalSource(code, name);\n                    compilation.updateAsset(name, optimizedAsset, (assetInfo) => ({\n                        ...assetInfo,\n                        minimized: true,\n                    }));\n                    await (cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.storePromise({\n                        source: optimizedAsset,\n                        warnings,\n                    }));\n                }\n            });\n        });\n    }\n    /**\n     * Optimizes a CSS asset using esbuild.\n     *\n     * @param input The CSS asset source content to optimize.\n     * @param name The name of the CSS asset. Used to generate source maps.\n     * @param inputMap Optionally specifies the CSS asset's original source map that will\n     * be merged with the intermediate optimized source map.\n     * @param target Optionally specifies the target browsers for the output code.\n     * @returns A promise resolving to the optimized CSS, source map, and any warnings.\n     */\n    optimize(input, name, inputMap, target) {\n        let sourceMapLine;\n        if (inputMap) {\n            // esbuild will automatically remap the sourcemap if provided\n            sourceMapLine = `\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,${Buffer.from(JSON.stringify(inputMap)).toString('base64')} */`;\n        }\n        return this.esbuild.transform(sourceMapLine ? input + sourceMapLine : input, {\n            loader: 'css',\n            legalComments: 'inline',\n            minify: true,\n            sourcemap: !!inputMap && 'external',\n            sourcefile: name,\n            target,\n        });\n    }\n    async addWarnings(compilation, warnings) {\n        if (warnings.length > 0) {\n            for (const warning of await this.esbuild.formatMessages(warnings, { kind: 'warning' })) {\n                (0, webpack_diagnostics_1.addWarning)(compilation, warning);\n            }\n        }\n    }\n    transformSupportedBrowsersToTargets(supportedBrowsers) {\n        const transformed = [];\n        // https://esbuild.github.io/api/#target\n        const esBuildSupportedBrowsers = new Set(['safari', 'firefox', 'edge', 'chrome', 'ios']);\n        for (const browser of supportedBrowsers) {\n            let [browserName, version] = browser.split(' ');\n            // browserslist uses the name `ios_saf` for iOS Safari whereas esbuild uses `ios`\n            if (browserName === 'ios_saf') {\n                browserName = 'ios';\n            }\n            // browserslist uses ranges `15.2-15.3` versions but only the lowest is required\n            // to perform minimum supported feature checks. esbuild also expects a single version.\n            [version] = version.split('-');\n            if (esBuildSupportedBrowsers.has(browserName)) {\n                if (browserName === 'safari' && version === 'TP') {\n                    // esbuild only supports numeric versions so `TP` is converted to a high number (999) since\n                    // a Technology Preview (TP) of Safari is assumed to support all currently known features.\n                    version = '999';\n                }\n                transformed.push(browserName + version);\n            }\n        }\n        return transformed.length ? transformed : undefined;\n    }\n}\nexports.CssOptimizerPlugin = CssOptimizerPlugin;\n"]},"metadata":{},"sourceType":"script"}