{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBuilder = void 0;\n\nconst core_1 = require(\"@angular-devkit/core\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst api_1 = require(\"./api\");\n\nconst internal_1 = require(\"./internal\");\n\nconst schedule_by_name_1 = require(\"./schedule-by-name\"); // eslint-disable-next-line max-lines-per-function\n\n\nfunction createBuilder(fn) {\n  const cjh = core_1.experimental.jobs.createJobHandler; // eslint-disable-next-line max-lines-per-function\n\n  const handler = cjh((options, context) => {\n    const scheduler = context.scheduler;\n    const progressChannel = context.createChannel('progress');\n    const logChannel = context.createChannel('log');\n    const analyticsChannel = context.createChannel('analytics');\n    let currentState = api_1.BuilderProgressState.Stopped;\n    const teardownLogics = [];\n    let tearingDown = false;\n    let current = 0;\n    let status = '';\n    let total = 1;\n\n    function log(entry) {\n      logChannel.next(entry);\n    }\n\n    function progress(progress, context) {\n      currentState = progress.state;\n\n      if (progress.state === api_1.BuilderProgressState.Running) {\n        current = progress.current;\n        total = progress.total !== undefined ? progress.total : total;\n\n        if (progress.status === undefined) {\n          progress.status = status;\n        } else {\n          status = progress.status;\n        }\n      }\n\n      progressChannel.next({ ...progress,\n        ...(context.target && {\n          target: context.target\n        }),\n        ...(context.builder && {\n          builder: context.builder\n        }),\n        id: context.id\n      });\n    }\n\n    return new rxjs_1.Observable(observer => {\n      const subscriptions = [];\n      const inputSubscription = context.inboundBus.subscribe(i => {\n        switch (i.kind) {\n          case core_1.experimental.jobs.JobInboundMessageKind.Stop:\n            // Run teardown logic then complete.\n            tearingDown = true;\n            Promise.all(teardownLogics.map(fn => fn() || Promise.resolve())).then(() => observer.complete(), err => observer.error(err));\n            break;\n\n          case core_1.experimental.jobs.JobInboundMessageKind.Input:\n            if (!tearingDown) {\n              onInput(i.value);\n            }\n\n            break;\n        }\n      });\n\n      function onInput(i) {\n        const builder = i.info;\n        const loggerName = i.target ? (0, api_1.targetStringFromTarget)(i.target) : builder.builderName;\n        const logger = new core_1.logging.Logger(loggerName);\n        subscriptions.push(logger.subscribe(entry => log(entry)));\n        const context = {\n          builder,\n          workspaceRoot: i.workspaceRoot,\n          currentDirectory: i.currentDirectory,\n          target: i.target,\n          logger: logger,\n          id: i.id,\n\n          scheduleTarget(target, overrides = {}, scheduleOptions = {}) {\n            return _asyncToGenerator(function* () {\n              const run = yield (0, schedule_by_name_1.scheduleByTarget)(target, overrides, {\n                scheduler,\n                logger: scheduleOptions.logger || logger.createChild(''),\n                workspaceRoot: i.workspaceRoot,\n                currentDirectory: i.currentDirectory\n              }); // We don't want to subscribe errors and complete.\n\n              subscriptions.push(run.progress.subscribe(event => progressChannel.next(event)));\n              return run;\n            })();\n          },\n\n          scheduleBuilder(builderName, options = {}, scheduleOptions = {}) {\n            return _asyncToGenerator(function* () {\n              const run = yield (0, schedule_by_name_1.scheduleByName)(builderName, options, {\n                scheduler,\n                target: scheduleOptions.target,\n                logger: scheduleOptions.logger || logger.createChild(''),\n                workspaceRoot: i.workspaceRoot,\n                currentDirectory: i.currentDirectory\n              }); // We don't want to subscribe errors and complete.\n\n              subscriptions.push(run.progress.subscribe(event => progressChannel.next(event)));\n              return run;\n            })();\n          },\n\n          getTargetOptions(target) {\n            return _asyncToGenerator(function* () {\n              return scheduler.schedule('..getTargetOptions', target).output.toPromise();\n            })();\n          },\n\n          getProjectMetadata(target) {\n            return _asyncToGenerator(function* () {\n              return scheduler.schedule('..getProjectMetadata', target).output.toPromise();\n            })();\n          },\n\n          getBuilderNameForTarget(target) {\n            return _asyncToGenerator(function* () {\n              return scheduler.schedule('..getBuilderNameForTarget', target).output.toPromise();\n            })();\n          },\n\n          validateOptions(options, builderName) {\n            return _asyncToGenerator(function* () {\n              return scheduler.schedule('..validateOptions', [builderName, options]).output.toPromise();\n            })();\n          },\n\n          reportRunning() {\n            switch (currentState) {\n              case api_1.BuilderProgressState.Waiting:\n              case api_1.BuilderProgressState.Stopped:\n                progress({\n                  state: api_1.BuilderProgressState.Running,\n                  current: 0,\n                  total\n                }, context);\n                break;\n            }\n          },\n\n          reportStatus(status) {\n            switch (currentState) {\n              case api_1.BuilderProgressState.Running:\n                progress({\n                  state: currentState,\n                  status,\n                  current,\n                  total\n                }, context);\n                break;\n\n              case api_1.BuilderProgressState.Waiting:\n                progress({\n                  state: currentState,\n                  status\n                }, context);\n                break;\n            }\n          },\n\n          reportProgress(current, total, status) {\n            switch (currentState) {\n              case api_1.BuilderProgressState.Running:\n                progress({\n                  state: currentState,\n                  current,\n                  total,\n                  status\n                }, context);\n            }\n          },\n\n          analytics: new core_1.analytics.ForwardingAnalytics(report => analyticsChannel.next(report)),\n\n          addTeardown(teardown) {\n            teardownLogics.push(teardown);\n          }\n\n        };\n        context.reportRunning();\n        let result;\n\n        try {\n          result = fn(i.options, context);\n\n          if ((0, api_1.isBuilderOutput)(result)) {\n            result = (0, rxjs_1.of)(result);\n          } else if (!(0, rxjs_1.isObservable)(result) && isAsyncIterable(result)) {\n            result = (0, api_1.fromAsyncIterable)(result);\n          } else {\n            result = (0, rxjs_1.from)(result);\n          }\n        } catch (e) {\n          result = (0, rxjs_1.throwError)(e);\n        } // Manage some state automatically.\n\n\n        progress({\n          state: api_1.BuilderProgressState.Running,\n          current: 0,\n          total: 1\n        }, context);\n        subscriptions.push(result.pipe((0, operators_1.tap)(() => {\n          progress({\n            state: api_1.BuilderProgressState.Running,\n            current: total\n          }, context);\n          progress({\n            state: api_1.BuilderProgressState.Stopped\n          }, context);\n        })).subscribe(message => observer.next(message), error => observer.error(error), () => observer.complete()));\n      }\n\n      return () => {\n        subscriptions.forEach(x => x.unsubscribe());\n        inputSubscription.unsubscribe();\n      };\n    });\n  });\n  return {\n    handler,\n    [internal_1.BuilderSymbol]: true,\n    [internal_1.BuilderVersionSymbol]: require('../package.json').version\n  };\n}\n\nexports.createBuilder = createBuilder;\n\nfunction isAsyncIterable(obj) {\n  return !!obj && typeof obj[Symbol.asyncIterator] === 'function';\n}","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/@angular-devkit/architect/src/create-builder.js"],"names":["Object","defineProperty","exports","value","createBuilder","core_1","require","rxjs_1","operators_1","api_1","internal_1","schedule_by_name_1","fn","cjh","experimental","jobs","createJobHandler","handler","options","context","scheduler","progressChannel","createChannel","logChannel","analyticsChannel","currentState","BuilderProgressState","Stopped","teardownLogics","tearingDown","current","status","total","log","entry","next","progress","state","Running","undefined","target","builder","id","Observable","observer","subscriptions","inputSubscription","inboundBus","subscribe","i","kind","JobInboundMessageKind","Stop","Promise","all","map","resolve","then","complete","err","error","Input","onInput","info","loggerName","targetStringFromTarget","builderName","logger","logging","Logger","push","workspaceRoot","currentDirectory","scheduleTarget","overrides","scheduleOptions","run","scheduleByTarget","createChild","event","scheduleBuilder","scheduleByName","getTargetOptions","schedule","output","toPromise","getProjectMetadata","getBuilderNameForTarget","validateOptions","reportRunning","Waiting","reportStatus","reportProgress","analytics","ForwardingAnalytics","report","addTeardown","teardown","result","isBuilderOutput","of","isObservable","isAsyncIterable","fromAsyncIterable","from","e","throwError","pipe","tap","message","forEach","x","unsubscribe","BuilderSymbol","BuilderVersionSymbol","version","obj","Symbol","asyncIterator"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createBuilder = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst api_1 = require(\"./api\");\nconst internal_1 = require(\"./internal\");\nconst schedule_by_name_1 = require(\"./schedule-by-name\");\n// eslint-disable-next-line max-lines-per-function\nfunction createBuilder(fn) {\n    const cjh = core_1.experimental.jobs.createJobHandler;\n    // eslint-disable-next-line max-lines-per-function\n    const handler = cjh((options, context) => {\n        const scheduler = context.scheduler;\n        const progressChannel = context.createChannel('progress');\n        const logChannel = context.createChannel('log');\n        const analyticsChannel = context.createChannel('analytics');\n        let currentState = api_1.BuilderProgressState.Stopped;\n        const teardownLogics = [];\n        let tearingDown = false;\n        let current = 0;\n        let status = '';\n        let total = 1;\n        function log(entry) {\n            logChannel.next(entry);\n        }\n        function progress(progress, context) {\n            currentState = progress.state;\n            if (progress.state === api_1.BuilderProgressState.Running) {\n                current = progress.current;\n                total = progress.total !== undefined ? progress.total : total;\n                if (progress.status === undefined) {\n                    progress.status = status;\n                }\n                else {\n                    status = progress.status;\n                }\n            }\n            progressChannel.next({\n                ...progress,\n                ...(context.target && { target: context.target }),\n                ...(context.builder && { builder: context.builder }),\n                id: context.id,\n            });\n        }\n        return new rxjs_1.Observable((observer) => {\n            const subscriptions = [];\n            const inputSubscription = context.inboundBus.subscribe((i) => {\n                switch (i.kind) {\n                    case core_1.experimental.jobs.JobInboundMessageKind.Stop:\n                        // Run teardown logic then complete.\n                        tearingDown = true;\n                        Promise.all(teardownLogics.map((fn) => fn() || Promise.resolve())).then(() => observer.complete(), (err) => observer.error(err));\n                        break;\n                    case core_1.experimental.jobs.JobInboundMessageKind.Input:\n                        if (!tearingDown) {\n                            onInput(i.value);\n                        }\n                        break;\n                }\n            });\n            function onInput(i) {\n                const builder = i.info;\n                const loggerName = i.target\n                    ? (0, api_1.targetStringFromTarget)(i.target)\n                    : builder.builderName;\n                const logger = new core_1.logging.Logger(loggerName);\n                subscriptions.push(logger.subscribe((entry) => log(entry)));\n                const context = {\n                    builder,\n                    workspaceRoot: i.workspaceRoot,\n                    currentDirectory: i.currentDirectory,\n                    target: i.target,\n                    logger: logger,\n                    id: i.id,\n                    async scheduleTarget(target, overrides = {}, scheduleOptions = {}) {\n                        const run = await (0, schedule_by_name_1.scheduleByTarget)(target, overrides, {\n                            scheduler,\n                            logger: scheduleOptions.logger || logger.createChild(''),\n                            workspaceRoot: i.workspaceRoot,\n                            currentDirectory: i.currentDirectory,\n                        });\n                        // We don't want to subscribe errors and complete.\n                        subscriptions.push(run.progress.subscribe((event) => progressChannel.next(event)));\n                        return run;\n                    },\n                    async scheduleBuilder(builderName, options = {}, scheduleOptions = {}) {\n                        const run = await (0, schedule_by_name_1.scheduleByName)(builderName, options, {\n                            scheduler,\n                            target: scheduleOptions.target,\n                            logger: scheduleOptions.logger || logger.createChild(''),\n                            workspaceRoot: i.workspaceRoot,\n                            currentDirectory: i.currentDirectory,\n                        });\n                        // We don't want to subscribe errors and complete.\n                        subscriptions.push(run.progress.subscribe((event) => progressChannel.next(event)));\n                        return run;\n                    },\n                    async getTargetOptions(target) {\n                        return scheduler\n                            .schedule('..getTargetOptions', target)\n                            .output.toPromise();\n                    },\n                    async getProjectMetadata(target) {\n                        return scheduler\n                            .schedule('..getProjectMetadata', target)\n                            .output.toPromise();\n                    },\n                    async getBuilderNameForTarget(target) {\n                        return scheduler\n                            .schedule('..getBuilderNameForTarget', target)\n                            .output.toPromise();\n                    },\n                    async validateOptions(options, builderName) {\n                        return scheduler\n                            .schedule('..validateOptions', [\n                            builderName,\n                            options,\n                        ])\n                            .output.toPromise();\n                    },\n                    reportRunning() {\n                        switch (currentState) {\n                            case api_1.BuilderProgressState.Waiting:\n                            case api_1.BuilderProgressState.Stopped:\n                                progress({ state: api_1.BuilderProgressState.Running, current: 0, total }, context);\n                                break;\n                        }\n                    },\n                    reportStatus(status) {\n                        switch (currentState) {\n                            case api_1.BuilderProgressState.Running:\n                                progress({ state: currentState, status, current, total }, context);\n                                break;\n                            case api_1.BuilderProgressState.Waiting:\n                                progress({ state: currentState, status }, context);\n                                break;\n                        }\n                    },\n                    reportProgress(current, total, status) {\n                        switch (currentState) {\n                            case api_1.BuilderProgressState.Running:\n                                progress({ state: currentState, current, total, status }, context);\n                        }\n                    },\n                    analytics: new core_1.analytics.ForwardingAnalytics((report) => analyticsChannel.next(report)),\n                    addTeardown(teardown) {\n                        teardownLogics.push(teardown);\n                    },\n                };\n                context.reportRunning();\n                let result;\n                try {\n                    result = fn(i.options, context);\n                    if ((0, api_1.isBuilderOutput)(result)) {\n                        result = (0, rxjs_1.of)(result);\n                    }\n                    else if (!(0, rxjs_1.isObservable)(result) && isAsyncIterable(result)) {\n                        result = (0, api_1.fromAsyncIterable)(result);\n                    }\n                    else {\n                        result = (0, rxjs_1.from)(result);\n                    }\n                }\n                catch (e) {\n                    result = (0, rxjs_1.throwError)(e);\n                }\n                // Manage some state automatically.\n                progress({ state: api_1.BuilderProgressState.Running, current: 0, total: 1 }, context);\n                subscriptions.push(result\n                    .pipe((0, operators_1.tap)(() => {\n                    progress({ state: api_1.BuilderProgressState.Running, current: total }, context);\n                    progress({ state: api_1.BuilderProgressState.Stopped }, context);\n                }))\n                    .subscribe((message) => observer.next(message), (error) => observer.error(error), () => observer.complete()));\n            }\n            return () => {\n                subscriptions.forEach((x) => x.unsubscribe());\n                inputSubscription.unsubscribe();\n            };\n        });\n    });\n    return {\n        handler,\n        [internal_1.BuilderSymbol]: true,\n        [internal_1.BuilderVersionSymbol]: require('../package.json').version,\n    };\n}\nexports.createBuilder = createBuilder;\nfunction isAsyncIterable(obj) {\n    return !!obj && typeof obj[Symbol.asyncIterator] === 'function';\n}\n"]},"metadata":{},"sourceType":"script"}