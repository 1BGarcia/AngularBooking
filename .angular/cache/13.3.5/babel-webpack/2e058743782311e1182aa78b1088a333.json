{"ast":null,"code":"import _asyncToGenerator from \"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport parser from 'postcss-selector-parser';\nimport fs from 'fs';\nimport path from 'path';\nimport postcss from 'postcss';\n/* Return a Selectors AST from a Selectors String\n/* ========================================================================== */\n\nvar getSelectorsAstFromSelectorsString = selectorString => {\n  let selectorAST;\n  parser(selectors => {\n    selectorAST = selectors;\n  }).processSync(selectorString);\n  return selectorAST;\n};\n\nvar getCustomSelectors = (root, opts) => {\n  // initialize custom selectors\n  const customSelectors = {}; // for each custom selector atrule that is a child of the css root\n\n  root.nodes.slice().forEach(node => {\n    if (isCustomSelector(node)) {\n      // extract the name and selectors from the params of the custom selector\n      const [, name, selectors] = node.params.match(customSelectorParamsRegExp); // write the parsed selectors to the custom selector\n\n      customSelectors[name] = getSelectorsAstFromSelectorsString(selectors); // conditionally remove the custom selector atrule\n\n      if (!Object(opts).preserve) {\n        node.remove();\n      }\n    }\n  });\n  return customSelectors;\n}; // match the custom selector name\n\n\nconst customSelectorNameRegExp = /^custom-selector$/i; // match the custom selector params\n\nconst customSelectorParamsRegExp = /^(:--[A-z][\\w-]*)\\s+([\\W\\w]+)\\s*$/; // whether the atrule is a custom selector\n\nconst isCustomSelector = node => node.type === 'atrule' && customSelectorNameRegExp.test(node.name) && customSelectorParamsRegExp.test(node.params); // return transformed selectors, replacing custom pseudo selectors with custom selectors\n\n\nfunction transformSelectorList(selectorList, customSelectors) {\n  let index = selectorList.nodes.length - 1;\n\n  while (index >= 0) {\n    const transformedSelectors = transformSelector(selectorList.nodes[index], customSelectors);\n\n    if (transformedSelectors.length) {\n      selectorList.nodes.splice(index, 1, ...transformedSelectors);\n    }\n\n    --index;\n  }\n\n  return selectorList;\n} // return custom pseudo selectors replaced with custom selectors\n\n\nfunction transformSelector(selector, customSelectors) {\n  const transpiledSelectors = [];\n\n  for (const index in selector.nodes) {\n    const {\n      value,\n      nodes\n    } = selector.nodes[index];\n\n    if (value in customSelectors) {\n      for (const replacementSelector of customSelectors[value].nodes) {\n        const selectorClone = selector.clone();\n        selectorClone.nodes.splice(index, 1, ...replacementSelector.clone().nodes.map(node => {\n          // use spacing from the current usage\n          node.spaces = { ...selector.nodes[index].spaces\n          };\n          return node;\n        }));\n        const retranspiledSelectors = transformSelector(selectorClone, customSelectors);\n        adjustNodesBySelectorEnds(selectorClone.nodes, Number(index));\n\n        if (retranspiledSelectors.length) {\n          transpiledSelectors.push(...retranspiledSelectors);\n        } else {\n          transpiledSelectors.push(selectorClone);\n        }\n      }\n\n      return transpiledSelectors;\n    } else if (nodes && nodes.length) {\n      transformSelectorList(selector.nodes[index], customSelectors);\n    }\n  }\n\n  return transpiledSelectors;\n} // match selectors by difficult-to-separate ends\n\n\nconst withoutSelectorStartMatch = /^(tag|universal)$/;\nconst withoutSelectorEndMatch = /^(class|id|pseudo|tag|universal)$/;\n\nconst isWithoutSelectorStart = node => withoutSelectorStartMatch.test(Object(node).type);\n\nconst isWithoutSelectorEnd = node => withoutSelectorEndMatch.test(Object(node).type); // adjust nodes by selector ends (so that .class:--h1 becomes h1.class rather than .classh1)\n\n\nconst adjustNodesBySelectorEnds = (nodes, index) => {\n  if (index && isWithoutSelectorStart(nodes[index]) && isWithoutSelectorEnd(nodes[index - 1])) {\n    let safeIndex = index - 1;\n\n    while (safeIndex && isWithoutSelectorEnd(nodes[safeIndex])) {\n      --safeIndex;\n    }\n\n    if (safeIndex < index) {\n      const node = nodes.splice(index, 1)[0];\n      nodes.splice(safeIndex, 0, node);\n      nodes[safeIndex].spaces.before = nodes[safeIndex + 1].spaces.before;\n      nodes[safeIndex + 1].spaces.before = '';\n\n      if (nodes[index]) {\n        nodes[index].spaces.after = nodes[safeIndex].spaces.after;\n        nodes[safeIndex].spaces.after = '';\n      }\n    }\n  }\n};\n\nvar transformRules = (root, customSelectors, opts) => {\n  root.walkRules(customPseudoRegExp, rule => {\n    const selector = parser(selectors => {\n      transformSelectorList(selectors, customSelectors);\n    }).processSync(rule.selector);\n\n    if (opts.preserve) {\n      rule.cloneBefore({\n        selector\n      });\n    } else {\n      rule.selector = selector;\n    }\n  });\n};\n\nconst customPseudoRegExp = /:--[A-z][\\w-]*/;\n/* Import Custom Selectors from CSS AST\n/* ========================================================================== */\n\nfunction importCustomSelectorsFromCSSAST(root) {\n  return getCustomSelectors(root);\n}\n/* Import Custom Selectors from CSS File\n/* ========================================================================== */\n\n\nfunction importCustomSelectorsFromCSSFile(_x) {\n  return _importCustomSelectorsFromCSSFile.apply(this, arguments);\n}\n/* Import Custom Selectors from Object\n/* ========================================================================== */\n\n\nfunction _importCustomSelectorsFromCSSFile() {\n  _importCustomSelectorsFromCSSFile = _asyncToGenerator(function* (from) {\n    const css = yield readFile(path.resolve(from));\n    const root = postcss.parse(css, {\n      from: path.resolve(from)\n    });\n    return importCustomSelectorsFromCSSAST(root);\n  });\n  return _importCustomSelectorsFromCSSFile.apply(this, arguments);\n}\n\nfunction importCustomSelectorsFromObject(object) {\n  const customSelectors = Object.assign({}, Object(object).customSelectors || Object(object)['custom-selectors']);\n\n  for (const key in customSelectors) {\n    customSelectors[key] = getSelectorsAstFromSelectorsString(customSelectors[key]);\n  }\n\n  return customSelectors;\n}\n/* Import Custom Selectors from JSON file\n/* ========================================================================== */\n\n\nfunction importCustomSelectorsFromJSONFile(_x2) {\n  return _importCustomSelectorsFromJSONFile.apply(this, arguments);\n}\n/* Import Custom Selectors from JS file\n/* ========================================================================== */\n\n\nfunction _importCustomSelectorsFromJSONFile() {\n  _importCustomSelectorsFromJSONFile = _asyncToGenerator(function* (from) {\n    const object = yield readJSON(path.resolve(from));\n    return importCustomSelectorsFromObject(object);\n  });\n  return _importCustomSelectorsFromJSONFile.apply(this, arguments);\n}\n\nfunction importCustomSelectorsFromJSFile(_x3) {\n  return _importCustomSelectorsFromJSFile.apply(this, arguments);\n}\n/* Import Custom Selectors from Sources\n/* ========================================================================== */\n\n\nfunction _importCustomSelectorsFromJSFile() {\n  _importCustomSelectorsFromJSFile = _asyncToGenerator(function* (from) {\n    const object = yield import(path.resolve(from));\n    return importCustomSelectorsFromObject(object);\n  });\n  return _importCustomSelectorsFromJSFile.apply(this, arguments);\n}\n\nfunction importCustomSelectorsFromSources(sources) {\n  return sources.map(source => {\n    if (source instanceof Promise) {\n      return source;\n    } else if (source instanceof Function) {\n      return source();\n    } // read the source as an object\n\n\n    const opts = source === Object(source) ? source : {\n      from: String(source)\n    }; // skip objects with custom selectors\n\n    if (Object(opts).customSelectors || Object(opts)['custom-selectors']) {\n      return opts;\n    } // source pathname\n\n\n    const from = String(opts.from || ''); // type of file being read from\n\n    const type = (opts.type || path.extname(from).slice(1)).toLowerCase();\n    return {\n      type,\n      from\n    };\n  }).reduce( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (customSelectorsPromise, source) {\n      const customSelectors = yield customSelectorsPromise;\n      const {\n        type,\n        from\n      } = yield source;\n\n      if (type === 'ast') {\n        return Object.assign(customSelectors, importCustomSelectorsFromCSSAST(from));\n      }\n\n      if (type === 'css') {\n        return Object.assign(customSelectors, yield importCustomSelectorsFromCSSFile(from));\n      }\n\n      if (type === 'js') {\n        return Object.assign(customSelectors, yield importCustomSelectorsFromJSFile(from));\n      }\n\n      if (type === 'json') {\n        return Object.assign(customSelectors, yield importCustomSelectorsFromJSONFile(from));\n      }\n\n      return Object.assign(customSelectors, importCustomSelectorsFromObject(yield source));\n    });\n\n    return function (_x4, _x5) {\n      return _ref.apply(this, arguments);\n    };\n  }(), Promise.resolve({}));\n}\n/* Helper utilities\n/* ========================================================================== */\n\n\nconst readFile = from => new Promise((resolve, reject) => {\n  fs.readFile(from, 'utf8', (error, result) => {\n    if (error) {\n      reject(error);\n    } else {\n      resolve(result);\n    }\n  });\n});\n\nconst readJSON = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (from) {\n    return JSON.parse(yield readFile(from));\n  });\n\n  return function readJSON(_x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/* Import Custom Selectors from CSS File\n/* ========================================================================== */\n\n\nfunction exportCustomSelectorsToCssFile(_x7, _x8) {\n  return _exportCustomSelectorsToCssFile.apply(this, arguments);\n}\n/* Import Custom Selectors from JSON file\n/* ========================================================================== */\n\n\nfunction _exportCustomSelectorsToCssFile() {\n  _exportCustomSelectorsToCssFile = _asyncToGenerator(function* (to, customSelectors) {\n    const cssContent = Object.keys(customSelectors).reduce((cssLines, name) => {\n      cssLines.push(`@custom-selector ${name} ${customSelectors[name]};`);\n      return cssLines;\n    }, []).join('\\n');\n    const css = `${cssContent}\\n`;\n    yield writeFile(to, css);\n  });\n  return _exportCustomSelectorsToCssFile.apply(this, arguments);\n}\n\nfunction exportCustomSelectorsToJsonFile(_x9, _x10) {\n  return _exportCustomSelectorsToJsonFile.apply(this, arguments);\n}\n/* Import Custom Selectors from Common JS file\n/* ========================================================================== */\n\n\nfunction _exportCustomSelectorsToJsonFile() {\n  _exportCustomSelectorsToJsonFile = _asyncToGenerator(function* (to, customSelectors) {\n    const jsonContent = JSON.stringify({\n      'custom-selectors': customSelectors\n    }, null, '  ');\n    const json = `${jsonContent}\\n`;\n    yield writeFile(to, json);\n  });\n  return _exportCustomSelectorsToJsonFile.apply(this, arguments);\n}\n\nfunction exportCustomSelectorsToCjsFile(_x11, _x12) {\n  return _exportCustomSelectorsToCjsFile.apply(this, arguments);\n}\n/* Import Custom Selectors from Module JS file\n/* ========================================================================== */\n\n\nfunction _exportCustomSelectorsToCjsFile() {\n  _exportCustomSelectorsToCjsFile = _asyncToGenerator(function* (to, customSelectors) {\n    const jsContents = Object.keys(customSelectors).reduce((jsLines, name) => {\n      jsLines.push(`\\t\\t'${escapeForJS(name)}': '${escapeForJS(customSelectors[name])}'`);\n      return jsLines;\n    }, []).join(',\\n');\n    const js = `module.exports = {\\n\\tcustomSelectors: {\\n${jsContents}\\n\\t}\\n};\\n`;\n    yield writeFile(to, js);\n  });\n  return _exportCustomSelectorsToCjsFile.apply(this, arguments);\n}\n\nfunction exportCustomSelectorsToMjsFile(_x13, _x14) {\n  return _exportCustomSelectorsToMjsFile.apply(this, arguments);\n}\n/* Export Custom Selectors to Destinations\n/* ========================================================================== */\n\n\nfunction _exportCustomSelectorsToMjsFile() {\n  _exportCustomSelectorsToMjsFile = _asyncToGenerator(function* (to, customSelectors) {\n    const mjsContents = Object.keys(customSelectors).reduce((mjsLines, name) => {\n      mjsLines.push(`\\t'${escapeForJS(name)}': '${escapeForJS(customSelectors[name])}'`);\n      return mjsLines;\n    }, []).join(',\\n');\n    const mjs = `export const customSelectors = {\\n${mjsContents}\\n};\\n`;\n    yield writeFile(to, mjs);\n  });\n  return _exportCustomSelectorsToMjsFile.apply(this, arguments);\n}\n\nfunction exportCustomSelectorsToDestinations(customSelectors, destinations) {\n  return Promise.all(destinations.map( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* (destination) {\n      if (destination instanceof Function) {\n        yield destination(defaultCustomSelectorsToJSON(customSelectors));\n      } else {\n        // read the destination as an object\n        const opts = destination === Object(destination) ? destination : {\n          to: String(destination)\n        }; // transformer for custom selectors into a JSON-compatible object\n\n        const toJSON = opts.toJSON || defaultCustomSelectorsToJSON;\n\n        if ('customSelectors' in opts) {\n          // write directly to an object as customSelectors\n          opts.customSelectors = toJSON(customSelectors);\n        } else if ('custom-selectors' in opts) {\n          // write directly to an object as custom-selectors\n          opts['custom-selectors'] = toJSON(customSelectors);\n        } else {\n          // destination pathname\n          const to = String(opts.to || ''); // type of file being written to\n\n          const type = (opts.type || path.extname(opts.to).slice(1)).toLowerCase(); // transformed custom selectors\n\n          const customSelectorsJSON = toJSON(customSelectors);\n\n          if (type === 'css') {\n            yield exportCustomSelectorsToCssFile(to, customSelectorsJSON);\n          }\n\n          if (type === 'js') {\n            yield exportCustomSelectorsToCjsFile(to, customSelectorsJSON);\n          }\n\n          if (type === 'json') {\n            yield exportCustomSelectorsToJsonFile(to, customSelectorsJSON);\n          }\n\n          if (type === 'mjs') {\n            yield exportCustomSelectorsToMjsFile(to, customSelectorsJSON);\n          }\n        }\n      }\n    });\n\n    return function (_x15) {\n      return _ref3.apply(this, arguments);\n    };\n  }()));\n}\n/* Helper utilities\n/* ========================================================================== */\n\n\nconst defaultCustomSelectorsToJSON = customSelectors => {\n  return Object.keys(customSelectors).reduce((customSelectorsJSON, key) => {\n    customSelectorsJSON[key] = String(customSelectors[key]);\n    return customSelectorsJSON;\n  }, {});\n};\n\nconst writeFile = (to, text) => new Promise((resolve, reject) => {\n  fs.writeFile(to, text, error => {\n    if (error) {\n      reject(error);\n    } else {\n      resolve();\n    }\n  });\n});\n\nconst escapeForJS = string => string.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n\nconst postcssCustomSelectors = opts => {\n  // whether to preserve custom selectors and rules using them\n  const preserve = Boolean(Object(opts).preserve); // sources to import custom selectors from\n\n  const importFrom = [].concat(Object(opts).importFrom || []); // destinations to export custom selectors to\n\n  const exportTo = [].concat(Object(opts).exportTo || []); // promise any custom selectors are imported\n\n  const customSelectorsPromise = importCustomSelectorsFromSources(importFrom);\n  return {\n    postcssPlugin: 'postcss-custom-selectors',\n\n    Once(root) {\n      return _asyncToGenerator(function* () {\n        const customProperties = Object.assign({}, yield customSelectorsPromise, getCustomSelectors(root, {\n          preserve\n        }));\n        yield exportCustomSelectorsToDestinations(customProperties, exportTo);\n        transformRules(root, customProperties, {\n          preserve\n        });\n      })();\n    }\n\n  };\n};\n\npostcssCustomSelectors.postcss = true;\nexport default postcssCustomSelectors;","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/postcss-custom-selectors/index.es.mjs"],"names":["parser","fs","path","postcss","getSelectorsAstFromSelectorsString","selectorString","selectorAST","selectors","processSync","getCustomSelectors","root","opts","customSelectors","nodes","slice","forEach","node","isCustomSelector","name","params","match","customSelectorParamsRegExp","Object","preserve","remove","customSelectorNameRegExp","type","test","transformSelectorList","selectorList","index","length","transformedSelectors","transformSelector","splice","selector","transpiledSelectors","value","replacementSelector","selectorClone","clone","map","spaces","retranspiledSelectors","adjustNodesBySelectorEnds","Number","push","withoutSelectorStartMatch","withoutSelectorEndMatch","isWithoutSelectorStart","isWithoutSelectorEnd","safeIndex","before","after","transformRules","walkRules","customPseudoRegExp","rule","cloneBefore","importCustomSelectorsFromCSSAST","importCustomSelectorsFromCSSFile","from","css","readFile","resolve","parse","importCustomSelectorsFromObject","object","assign","key","importCustomSelectorsFromJSONFile","readJSON","importCustomSelectorsFromJSFile","importCustomSelectorsFromSources","sources","source","Promise","Function","String","extname","toLowerCase","reduce","customSelectorsPromise","reject","error","result","JSON","exportCustomSelectorsToCssFile","to","cssContent","keys","cssLines","join","writeFile","exportCustomSelectorsToJsonFile","jsonContent","stringify","json","exportCustomSelectorsToCjsFile","jsContents","jsLines","escapeForJS","js","exportCustomSelectorsToMjsFile","mjsContents","mjsLines","mjs","exportCustomSelectorsToDestinations","destinations","all","destination","defaultCustomSelectorsToJSON","toJSON","customSelectorsJSON","text","string","replace","postcssCustomSelectors","Boolean","importFrom","concat","exportTo","postcssPlugin","Once","customProperties"],"mappings":"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","sourcesContent":["import parser from 'postcss-selector-parser';\nimport fs from 'fs';\nimport path from 'path';\nimport postcss from 'postcss';\n\n/* Return a Selectors AST from a Selectors String\n/* ========================================================================== */\n\nvar getSelectorsAstFromSelectorsString = (selectorString => {\n  let selectorAST;\n  parser(selectors => {\n    selectorAST = selectors;\n  }).processSync(selectorString);\n  return selectorAST;\n});\n\nvar getCustomSelectors = ((root, opts) => {\n  // initialize custom selectors\n  const customSelectors = {}; // for each custom selector atrule that is a child of the css root\n\n  root.nodes.slice().forEach(node => {\n    if (isCustomSelector(node)) {\n      // extract the name and selectors from the params of the custom selector\n      const [, name, selectors] = node.params.match(customSelectorParamsRegExp); // write the parsed selectors to the custom selector\n\n      customSelectors[name] = getSelectorsAstFromSelectorsString(selectors); // conditionally remove the custom selector atrule\n\n      if (!Object(opts).preserve) {\n        node.remove();\n      }\n    }\n  });\n  return customSelectors;\n}); // match the custom selector name\n\nconst customSelectorNameRegExp = /^custom-selector$/i; // match the custom selector params\n\nconst customSelectorParamsRegExp = /^(:--[A-z][\\w-]*)\\s+([\\W\\w]+)\\s*$/; // whether the atrule is a custom selector\n\nconst isCustomSelector = node => node.type === 'atrule' && customSelectorNameRegExp.test(node.name) && customSelectorParamsRegExp.test(node.params);\n\n// return transformed selectors, replacing custom pseudo selectors with custom selectors\nfunction transformSelectorList(selectorList, customSelectors) {\n  let index = selectorList.nodes.length - 1;\n\n  while (index >= 0) {\n    const transformedSelectors = transformSelector(selectorList.nodes[index], customSelectors);\n\n    if (transformedSelectors.length) {\n      selectorList.nodes.splice(index, 1, ...transformedSelectors);\n    }\n\n    --index;\n  }\n\n  return selectorList;\n} // return custom pseudo selectors replaced with custom selectors\n\nfunction transformSelector(selector, customSelectors) {\n  const transpiledSelectors = [];\n\n  for (const index in selector.nodes) {\n    const {\n      value,\n      nodes\n    } = selector.nodes[index];\n\n    if (value in customSelectors) {\n      for (const replacementSelector of customSelectors[value].nodes) {\n        const selectorClone = selector.clone();\n        selectorClone.nodes.splice(index, 1, ...replacementSelector.clone().nodes.map(node => {\n          // use spacing from the current usage\n          node.spaces = { ...selector.nodes[index].spaces\n          };\n          return node;\n        }));\n        const retranspiledSelectors = transformSelector(selectorClone, customSelectors);\n        adjustNodesBySelectorEnds(selectorClone.nodes, Number(index));\n\n        if (retranspiledSelectors.length) {\n          transpiledSelectors.push(...retranspiledSelectors);\n        } else {\n          transpiledSelectors.push(selectorClone);\n        }\n      }\n\n      return transpiledSelectors;\n    } else if (nodes && nodes.length) {\n      transformSelectorList(selector.nodes[index], customSelectors);\n    }\n  }\n\n  return transpiledSelectors;\n} // match selectors by difficult-to-separate ends\n\n\nconst withoutSelectorStartMatch = /^(tag|universal)$/;\nconst withoutSelectorEndMatch = /^(class|id|pseudo|tag|universal)$/;\n\nconst isWithoutSelectorStart = node => withoutSelectorStartMatch.test(Object(node).type);\n\nconst isWithoutSelectorEnd = node => withoutSelectorEndMatch.test(Object(node).type); // adjust nodes by selector ends (so that .class:--h1 becomes h1.class rather than .classh1)\n\n\nconst adjustNodesBySelectorEnds = (nodes, index) => {\n  if (index && isWithoutSelectorStart(nodes[index]) && isWithoutSelectorEnd(nodes[index - 1])) {\n    let safeIndex = index - 1;\n\n    while (safeIndex && isWithoutSelectorEnd(nodes[safeIndex])) {\n      --safeIndex;\n    }\n\n    if (safeIndex < index) {\n      const node = nodes.splice(index, 1)[0];\n      nodes.splice(safeIndex, 0, node);\n      nodes[safeIndex].spaces.before = nodes[safeIndex + 1].spaces.before;\n      nodes[safeIndex + 1].spaces.before = '';\n\n      if (nodes[index]) {\n        nodes[index].spaces.after = nodes[safeIndex].spaces.after;\n        nodes[safeIndex].spaces.after = '';\n      }\n    }\n  }\n};\n\nvar transformRules = ((root, customSelectors, opts) => {\n  root.walkRules(customPseudoRegExp, rule => {\n    const selector = parser(selectors => {\n      transformSelectorList(selectors, customSelectors);\n    }).processSync(rule.selector);\n\n    if (opts.preserve) {\n      rule.cloneBefore({\n        selector\n      });\n    } else {\n      rule.selector = selector;\n    }\n  });\n});\nconst customPseudoRegExp = /:--[A-z][\\w-]*/;\n\n/* Import Custom Selectors from CSS AST\n/* ========================================================================== */\n\nfunction importCustomSelectorsFromCSSAST(root) {\n  return getCustomSelectors(root);\n}\n/* Import Custom Selectors from CSS File\n/* ========================================================================== */\n\n\nasync function importCustomSelectorsFromCSSFile(from) {\n  const css = await readFile(path.resolve(from));\n  const root = postcss.parse(css, {\n    from: path.resolve(from)\n  });\n  return importCustomSelectorsFromCSSAST(root);\n}\n/* Import Custom Selectors from Object\n/* ========================================================================== */\n\n\nfunction importCustomSelectorsFromObject(object) {\n  const customSelectors = Object.assign({}, Object(object).customSelectors || Object(object)['custom-selectors']);\n\n  for (const key in customSelectors) {\n    customSelectors[key] = getSelectorsAstFromSelectorsString(customSelectors[key]);\n  }\n\n  return customSelectors;\n}\n/* Import Custom Selectors from JSON file\n/* ========================================================================== */\n\n\nasync function importCustomSelectorsFromJSONFile(from) {\n  const object = await readJSON(path.resolve(from));\n  return importCustomSelectorsFromObject(object);\n}\n/* Import Custom Selectors from JS file\n/* ========================================================================== */\n\n\nasync function importCustomSelectorsFromJSFile(from) {\n  const object = await import(path.resolve(from));\n  return importCustomSelectorsFromObject(object);\n}\n/* Import Custom Selectors from Sources\n/* ========================================================================== */\n\n\nfunction importCustomSelectorsFromSources(sources) {\n  return sources.map(source => {\n    if (source instanceof Promise) {\n      return source;\n    } else if (source instanceof Function) {\n      return source();\n    } // read the source as an object\n\n\n    const opts = source === Object(source) ? source : {\n      from: String(source)\n    }; // skip objects with custom selectors\n\n    if (Object(opts).customSelectors || Object(opts)['custom-selectors']) {\n      return opts;\n    } // source pathname\n\n\n    const from = String(opts.from || ''); // type of file being read from\n\n    const type = (opts.type || path.extname(from).slice(1)).toLowerCase();\n    return {\n      type,\n      from\n    };\n  }).reduce(async (customSelectorsPromise, source) => {\n    const customSelectors = await customSelectorsPromise;\n    const {\n      type,\n      from\n    } = await source;\n\n    if (type === 'ast') {\n      return Object.assign(customSelectors, importCustomSelectorsFromCSSAST(from));\n    }\n\n    if (type === 'css') {\n      return Object.assign(customSelectors, await importCustomSelectorsFromCSSFile(from));\n    }\n\n    if (type === 'js') {\n      return Object.assign(customSelectors, await importCustomSelectorsFromJSFile(from));\n    }\n\n    if (type === 'json') {\n      return Object.assign(customSelectors, await importCustomSelectorsFromJSONFile(from));\n    }\n\n    return Object.assign(customSelectors, importCustomSelectorsFromObject(await source));\n  }, Promise.resolve({}));\n}\n/* Helper utilities\n/* ========================================================================== */\n\nconst readFile = from => new Promise((resolve, reject) => {\n  fs.readFile(from, 'utf8', (error, result) => {\n    if (error) {\n      reject(error);\n    } else {\n      resolve(result);\n    }\n  });\n});\n\nconst readJSON = async from => JSON.parse(await readFile(from));\n\n/* Import Custom Selectors from CSS File\n/* ========================================================================== */\n\nasync function exportCustomSelectorsToCssFile(to, customSelectors) {\n  const cssContent = Object.keys(customSelectors).reduce((cssLines, name) => {\n    cssLines.push(`@custom-selector ${name} ${customSelectors[name]};`);\n    return cssLines;\n  }, []).join('\\n');\n  const css = `${cssContent}\\n`;\n  await writeFile(to, css);\n}\n/* Import Custom Selectors from JSON file\n/* ========================================================================== */\n\n\nasync function exportCustomSelectorsToJsonFile(to, customSelectors) {\n  const jsonContent = JSON.stringify({\n    'custom-selectors': customSelectors\n  }, null, '  ');\n  const json = `${jsonContent}\\n`;\n  await writeFile(to, json);\n}\n/* Import Custom Selectors from Common JS file\n/* ========================================================================== */\n\n\nasync function exportCustomSelectorsToCjsFile(to, customSelectors) {\n  const jsContents = Object.keys(customSelectors).reduce((jsLines, name) => {\n    jsLines.push(`\\t\\t'${escapeForJS(name)}': '${escapeForJS(customSelectors[name])}'`);\n    return jsLines;\n  }, []).join(',\\n');\n  const js = `module.exports = {\\n\\tcustomSelectors: {\\n${jsContents}\\n\\t}\\n};\\n`;\n  await writeFile(to, js);\n}\n/* Import Custom Selectors from Module JS file\n/* ========================================================================== */\n\n\nasync function exportCustomSelectorsToMjsFile(to, customSelectors) {\n  const mjsContents = Object.keys(customSelectors).reduce((mjsLines, name) => {\n    mjsLines.push(`\\t'${escapeForJS(name)}': '${escapeForJS(customSelectors[name])}'`);\n    return mjsLines;\n  }, []).join(',\\n');\n  const mjs = `export const customSelectors = {\\n${mjsContents}\\n};\\n`;\n  await writeFile(to, mjs);\n}\n/* Export Custom Selectors to Destinations\n/* ========================================================================== */\n\n\nfunction exportCustomSelectorsToDestinations(customSelectors, destinations) {\n  return Promise.all(destinations.map(async destination => {\n    if (destination instanceof Function) {\n      await destination(defaultCustomSelectorsToJSON(customSelectors));\n    } else {\n      // read the destination as an object\n      const opts = destination === Object(destination) ? destination : {\n        to: String(destination)\n      }; // transformer for custom selectors into a JSON-compatible object\n\n      const toJSON = opts.toJSON || defaultCustomSelectorsToJSON;\n\n      if ('customSelectors' in opts) {\n        // write directly to an object as customSelectors\n        opts.customSelectors = toJSON(customSelectors);\n      } else if ('custom-selectors' in opts) {\n        // write directly to an object as custom-selectors\n        opts['custom-selectors'] = toJSON(customSelectors);\n      } else {\n        // destination pathname\n        const to = String(opts.to || ''); // type of file being written to\n\n        const type = (opts.type || path.extname(opts.to).slice(1)).toLowerCase(); // transformed custom selectors\n\n        const customSelectorsJSON = toJSON(customSelectors);\n\n        if (type === 'css') {\n          await exportCustomSelectorsToCssFile(to, customSelectorsJSON);\n        }\n\n        if (type === 'js') {\n          await exportCustomSelectorsToCjsFile(to, customSelectorsJSON);\n        }\n\n        if (type === 'json') {\n          await exportCustomSelectorsToJsonFile(to, customSelectorsJSON);\n        }\n\n        if (type === 'mjs') {\n          await exportCustomSelectorsToMjsFile(to, customSelectorsJSON);\n        }\n      }\n    }\n  }));\n}\n/* Helper utilities\n/* ========================================================================== */\n\nconst defaultCustomSelectorsToJSON = customSelectors => {\n  return Object.keys(customSelectors).reduce((customSelectorsJSON, key) => {\n    customSelectorsJSON[key] = String(customSelectors[key]);\n    return customSelectorsJSON;\n  }, {});\n};\n\nconst writeFile = (to, text) => new Promise((resolve, reject) => {\n  fs.writeFile(to, text, error => {\n    if (error) {\n      reject(error);\n    } else {\n      resolve();\n    }\n  });\n});\n\nconst escapeForJS = string => string.replace(/\\\\([\\s\\S])|(')/g, '\\\\$1$2').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n\nconst postcssCustomSelectors = opts => {\n  // whether to preserve custom selectors and rules using them\n  const preserve = Boolean(Object(opts).preserve); // sources to import custom selectors from\n\n  const importFrom = [].concat(Object(opts).importFrom || []); // destinations to export custom selectors to\n\n  const exportTo = [].concat(Object(opts).exportTo || []); // promise any custom selectors are imported\n\n  const customSelectorsPromise = importCustomSelectorsFromSources(importFrom);\n  return {\n    postcssPlugin: 'postcss-custom-selectors',\n\n    async Once(root) {\n      const customProperties = Object.assign({}, await customSelectorsPromise, getCustomSelectors(root, {\n        preserve\n      }));\n      await exportCustomSelectorsToDestinations(customProperties, exportTo);\n      transformRules(root, customProperties, {\n        preserve\n      });\n    }\n\n  };\n};\n\npostcssCustomSelectors.postcss = true;\n\nexport default postcssCustomSelectors;\n"]},"metadata":{},"sourceType":"module"}