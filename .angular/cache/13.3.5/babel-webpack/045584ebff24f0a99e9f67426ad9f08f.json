{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWebpackConfig = exports.getEmittedFiles = void 0;\n\nconst fs_1 = require(\"fs\");\n\nconst path = __importStar(require(\"path\"));\n\nconst url_1 = require(\"url\");\n\nfunction getEmittedFiles(compilation) {\n  var _a;\n\n  const files = [];\n  const chunkFileNames = new Set(); // adds all chunks to the list of emitted files such as lazy loaded modules\n\n  for (const chunk of compilation.chunks) {\n    for (const file of chunk.files) {\n      if (chunkFileNames.has(file)) {\n        continue;\n      }\n\n      chunkFileNames.add(file);\n      files.push({\n        id: (_a = chunk.id) === null || _a === void 0 ? void 0 : _a.toString(),\n        name: chunk.name,\n        file,\n        extension: path.extname(file),\n        initial: chunk.isOnlyInitial()\n      });\n    }\n  } // add all other files\n\n\n  for (const file of Object.keys(compilation.assets)) {\n    // Chunk files have already been added to the files list above\n    if (chunkFileNames.has(file)) {\n      continue;\n    }\n\n    files.push({\n      file,\n      extension: path.extname(file),\n      initial: false,\n      asset: true\n    });\n  }\n\n  return files;\n}\n\nexports.getEmittedFiles = getEmittedFiles;\n/**\n * This uses a dynamic import to load a module which may be ESM.\n * CommonJS code can load ESM code via a dynamic import. Unfortunately, TypeScript\n * will currently, unconditionally downlevel dynamic import into a require call.\n * require calls cannot load ESM code and will result in a runtime error. To workaround\n * this, a Function constructor is used to prevent TypeScript from changing the dynamic import.\n * Once TypeScript provides support for keeping the dynamic import this workaround can\n * be dropped.\n *\n * @param modulePath The path of the module to load.\n * @returns A Promise that resolves to the dynamically imported module.\n */\n\nfunction loadEsmModule(modulePath) {\n  return new Function('modulePath', `return import(modulePath);`)(modulePath);\n}\n\nfunction getWebpackConfig(_x) {\n  return _getWebpackConfig.apply(this, arguments);\n}\n\nfunction _getWebpackConfig() {\n  _getWebpackConfig = _asyncToGenerator(function* (configPath) {\n    if (!(0, fs_1.existsSync)(configPath)) {\n      throw new Error(`Webpack configuration file ${configPath} does not exist.`);\n    }\n\n    switch (path.extname(configPath)) {\n      case '.mjs':\n        // Load the ESM configuration file using the TypeScript dynamic import workaround.\n        // Once TypeScript provides support for keeping the dynamic import this workaround can be\n        // changed to a direct dynamic import.\n        return (yield loadEsmModule((0, url_1.pathToFileURL)(configPath))).default;\n\n      case '.cjs':\n        return require(configPath);\n\n      default:\n        // The file could be either CommonJS or ESM.\n        // CommonJS is tried first then ESM if loading fails.\n        try {\n          return require(configPath);\n        } catch (e) {\n          if (e.code === 'ERR_REQUIRE_ESM') {\n            // Load the ESM configuration file using the TypeScript dynamic import workaround.\n            // Once TypeScript provides support for keeping the dynamic import this workaround can be\n            // changed to a direct dynamic import.\n            return (yield loadEsmModule((0, url_1.pathToFileURL)(configPath))).default;\n          }\n\n          throw e;\n        }\n\n    }\n  });\n  return _getWebpackConfig.apply(this, arguments);\n}\n\nexports.getWebpackConfig = getWebpackConfig;","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/@angular-devkit/build-webpack/src/utils.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","getWebpackConfig","getEmittedFiles","fs_1","require","path","url_1","compilation","_a","files","chunkFileNames","Set","chunk","chunks","file","has","add","push","id","toString","name","extension","extname","initial","isOnlyInitial","keys","assets","asset","loadEsmModule","modulePath","Function","configPath","existsSync","Error","pathToFileURL","default","e","code"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWebpackConfig = exports.getEmittedFiles = void 0;\nconst fs_1 = require(\"fs\");\nconst path = __importStar(require(\"path\"));\nconst url_1 = require(\"url\");\nfunction getEmittedFiles(compilation) {\n    var _a;\n    const files = [];\n    const chunkFileNames = new Set();\n    // adds all chunks to the list of emitted files such as lazy loaded modules\n    for (const chunk of compilation.chunks) {\n        for (const file of chunk.files) {\n            if (chunkFileNames.has(file)) {\n                continue;\n            }\n            chunkFileNames.add(file);\n            files.push({\n                id: (_a = chunk.id) === null || _a === void 0 ? void 0 : _a.toString(),\n                name: chunk.name,\n                file,\n                extension: path.extname(file),\n                initial: chunk.isOnlyInitial(),\n            });\n        }\n    }\n    // add all other files\n    for (const file of Object.keys(compilation.assets)) {\n        // Chunk files have already been added to the files list above\n        if (chunkFileNames.has(file)) {\n            continue;\n        }\n        files.push({ file, extension: path.extname(file), initial: false, asset: true });\n    }\n    return files;\n}\nexports.getEmittedFiles = getEmittedFiles;\n/**\n * This uses a dynamic import to load a module which may be ESM.\n * CommonJS code can load ESM code via a dynamic import. Unfortunately, TypeScript\n * will currently, unconditionally downlevel dynamic import into a require call.\n * require calls cannot load ESM code and will result in a runtime error. To workaround\n * this, a Function constructor is used to prevent TypeScript from changing the dynamic import.\n * Once TypeScript provides support for keeping the dynamic import this workaround can\n * be dropped.\n *\n * @param modulePath The path of the module to load.\n * @returns A Promise that resolves to the dynamically imported module.\n */\nfunction loadEsmModule(modulePath) {\n    return new Function('modulePath', `return import(modulePath);`)(modulePath);\n}\nasync function getWebpackConfig(configPath) {\n    if (!(0, fs_1.existsSync)(configPath)) {\n        throw new Error(`Webpack configuration file ${configPath} does not exist.`);\n    }\n    switch (path.extname(configPath)) {\n        case '.mjs':\n            // Load the ESM configuration file using the TypeScript dynamic import workaround.\n            // Once TypeScript provides support for keeping the dynamic import this workaround can be\n            // changed to a direct dynamic import.\n            return (await loadEsmModule((0, url_1.pathToFileURL)(configPath))).default;\n        case '.cjs':\n            return require(configPath);\n        default:\n            // The file could be either CommonJS or ESM.\n            // CommonJS is tried first then ESM if loading fails.\n            try {\n                return require(configPath);\n            }\n            catch (e) {\n                if (e.code === 'ERR_REQUIRE_ESM') {\n                    // Load the ESM configuration file using the TypeScript dynamic import workaround.\n                    // Once TypeScript provides support for keeping the dynamic import this workaround can be\n                    // changed to a direct dynamic import.\n                    return (await loadEsmModule((0, url_1.pathToFileURL)(configPath)))\n                        .default;\n                }\n                throw e;\n            }\n    }\n}\nexports.getWebpackConfig = getWebpackConfig;\n"]},"metadata":{},"sourceType":"script"}