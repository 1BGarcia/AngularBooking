{"ast":null,"code":"\"use strict\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n/**\n * Filesystem Cache\n *\n * Given a file and a transform function, cache the result into files\n * or retrieve the previously cached files if the given file is already known.\n *\n * @see https://github.com/babel/babel-loader/issues/34\n * @see https://github.com/babel/babel-loader/pull/41\n */\n\n\nconst fs = require(\"fs\");\n\nconst os = require(\"os\");\n\nconst path = require(\"path\");\n\nconst zlib = require(\"zlib\");\n\nconst crypto = require(\"crypto\");\n\nconst findCacheDir = require(\"find-cache-dir\");\n\nconst {\n  promisify\n} = require(\"util\");\n\nconst transform = require(\"./transform\"); // Lazily instantiated when needed\n\n\nlet defaultCacheDirectory = null;\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\nconst gunzip = promisify(zlib.gunzip);\nconst gzip = promisify(zlib.gzip);\n\nconst makeDir = require(\"make-dir\");\n/**\n * Read the contents from the compressed file.\n *\n * @async\n * @params {String} filename\n * @params {Boolean} compress\n */\n\n\nconst read = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (filename, compress) {\n    const data = yield readFile(filename + (compress ? \".gz\" : \"\"));\n    const content = compress ? yield gunzip(data) : data;\n    return JSON.parse(content.toString());\n  });\n\n  return function read(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Write contents into a compressed file.\n *\n * @async\n * @params {String} filename\n * @params {Boolean} compress\n * @params {String} result\n */\n\n\nconst write = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (filename, compress, result) {\n    const content = JSON.stringify(result);\n    const data = compress ? yield gzip(content) : content;\n    return yield writeFile(filename + (compress ? \".gz\" : \"\"), data);\n  });\n\n  return function write(_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Build the filename for the cached file\n *\n * @params {String} source  File source code\n * @params {Object} options Options used\n *\n * @return {String}\n */\n\n\nconst filename = function (source, identifier, options) {\n  // md4 hashing is not supported starting with node v17.0.0\n  const majorNodeVersion = parseInt(process.versions.node.split(\".\")[0], 10);\n  let hashType = \"md4\";\n\n  if (majorNodeVersion >= 17) {\n    hashType = \"md5\";\n  }\n\n  const hash = crypto.createHash(hashType);\n  const contents = JSON.stringify({\n    source,\n    options,\n    identifier\n  });\n  hash.update(contents);\n  return hash.digest(\"hex\") + \".json\";\n};\n/**\n * Handle the cache\n *\n * @params {String} directory\n * @params {Object} params\n */\n\n\nconst handleCache = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (directory, params) {\n    const {\n      source,\n      options = {},\n      cacheIdentifier,\n      cacheDirectory,\n      cacheCompression\n    } = params;\n    const file = path.join(directory, filename(source, cacheIdentifier, options));\n\n    try {\n      // No errors mean that the file was previously cached\n      // we just need to return it\n      return yield read(file, cacheCompression);\n    } catch (err) {}\n\n    const fallback = typeof cacheDirectory !== \"string\" && directory !== os.tmpdir(); // Make sure the directory exists.\n\n    try {\n      yield makeDir(directory);\n    } catch (err) {\n      if (fallback) {\n        return handleCache(os.tmpdir(), params);\n      }\n\n      throw err;\n    } // Otherwise just transform the file\n    // return it to the user asap and write it in cache\n\n\n    const result = yield transform(source, options);\n\n    try {\n      yield write(file, cacheCompression, result);\n    } catch (err) {\n      if (fallback) {\n        // Fallback to tmpdir if node_modules folder not writable\n        return handleCache(os.tmpdir(), params);\n      }\n\n      throw err;\n    }\n\n    return result;\n  });\n\n  return function handleCache(_x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n/**\n * Retrieve file from cache, or create a new one for future reads\n *\n * @async\n * @param  {Object}   params\n * @param  {String}   params.cacheDirectory   Directory to store cached files\n * @param  {String}   params.cacheIdentifier  Unique identifier to bust cache\n * @param  {Boolean}  params.cacheCompression Whether compressing cached files\n * @param  {String}   params.source   Original contents of the file to be cached\n * @param  {Object}   params.options  Options to be given to the transform fn\n *\n * @example\n *\n *   const result = await cache({\n *     cacheDirectory: '.tmp/cache',\n *     cacheIdentifier: 'babel-loader-cachefile',\n *     cacheCompression: false,\n *     source: *source code from file*,\n *     options: {\n *       experimental: true,\n *       runtime: true\n *     },\n *   });\n */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(function* (params) {\n    let directory;\n\n    if (typeof params.cacheDirectory === \"string\") {\n      directory = params.cacheDirectory;\n    } else {\n      if (defaultCacheDirectory === null) {\n        defaultCacheDirectory = findCacheDir({\n          name: \"babel-loader\"\n        }) || os.tmpdir();\n      }\n\n      directory = defaultCacheDirectory;\n    }\n\n    return yield handleCache(directory, params);\n  });\n\n  return function (_x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/babel-loader/lib/cache.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","fs","require","os","path","zlib","crypto","findCacheDir","promisify","transform","defaultCacheDirectory","readFile","writeFile","gunzip","gzip","makeDir","read","_ref","filename","compress","data","content","JSON","parse","toString","_x","_x2","write","_ref2","result","stringify","_x3","_x4","_x5","source","identifier","options","majorNodeVersion","parseInt","process","versions","node","split","hashType","hash","createHash","contents","update","digest","handleCache","_ref3","directory","params","cacheIdentifier","cacheDirectory","cacheCompression","file","join","fallback","tmpdir","_x6","_x7","module","exports","_ref4","name","_x8"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Filesystem Cache\n *\n * Given a file and a transform function, cache the result into files\n * or retrieve the previously cached files if the given file is already known.\n *\n * @see https://github.com/babel/babel-loader/issues/34\n * @see https://github.com/babel/babel-loader/pull/41\n */\nconst fs = require(\"fs\");\n\nconst os = require(\"os\");\n\nconst path = require(\"path\");\n\nconst zlib = require(\"zlib\");\n\nconst crypto = require(\"crypto\");\n\nconst findCacheDir = require(\"find-cache-dir\");\n\nconst {\n  promisify\n} = require(\"util\");\n\nconst transform = require(\"./transform\"); // Lazily instantiated when needed\n\n\nlet defaultCacheDirectory = null;\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\nconst gunzip = promisify(zlib.gunzip);\nconst gzip = promisify(zlib.gzip);\n\nconst makeDir = require(\"make-dir\");\n/**\n * Read the contents from the compressed file.\n *\n * @async\n * @params {String} filename\n * @params {Boolean} compress\n */\n\n\nconst read = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (filename, compress) {\n    const data = yield readFile(filename + (compress ? \".gz\" : \"\"));\n    const content = compress ? yield gunzip(data) : data;\n    return JSON.parse(content.toString());\n  });\n\n  return function read(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Write contents into a compressed file.\n *\n * @async\n * @params {String} filename\n * @params {Boolean} compress\n * @params {String} result\n */\n\n\nconst write = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (filename, compress, result) {\n    const content = JSON.stringify(result);\n    const data = compress ? yield gzip(content) : content;\n    return yield writeFile(filename + (compress ? \".gz\" : \"\"), data);\n  });\n\n  return function write(_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Build the filename for the cached file\n *\n * @params {String} source  File source code\n * @params {Object} options Options used\n *\n * @return {String}\n */\n\n\nconst filename = function (source, identifier, options) {\n  // md4 hashing is not supported starting with node v17.0.0\n  const majorNodeVersion = parseInt(process.versions.node.split(\".\")[0], 10);\n  let hashType = \"md4\";\n\n  if (majorNodeVersion >= 17) {\n    hashType = \"md5\";\n  }\n\n  const hash = crypto.createHash(hashType);\n  const contents = JSON.stringify({\n    source,\n    options,\n    identifier\n  });\n  hash.update(contents);\n  return hash.digest(\"hex\") + \".json\";\n};\n/**\n * Handle the cache\n *\n * @params {String} directory\n * @params {Object} params\n */\n\n\nconst handleCache = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (directory, params) {\n    const {\n      source,\n      options = {},\n      cacheIdentifier,\n      cacheDirectory,\n      cacheCompression\n    } = params;\n    const file = path.join(directory, filename(source, cacheIdentifier, options));\n\n    try {\n      // No errors mean that the file was previously cached\n      // we just need to return it\n      return yield read(file, cacheCompression);\n    } catch (err) {}\n\n    const fallback = typeof cacheDirectory !== \"string\" && directory !== os.tmpdir(); // Make sure the directory exists.\n\n    try {\n      yield makeDir(directory);\n    } catch (err) {\n      if (fallback) {\n        return handleCache(os.tmpdir(), params);\n      }\n\n      throw err;\n    } // Otherwise just transform the file\n    // return it to the user asap and write it in cache\n\n\n    const result = yield transform(source, options);\n\n    try {\n      yield write(file, cacheCompression, result);\n    } catch (err) {\n      if (fallback) {\n        // Fallback to tmpdir if node_modules folder not writable\n        return handleCache(os.tmpdir(), params);\n      }\n\n      throw err;\n    }\n\n    return result;\n  });\n\n  return function handleCache(_x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n/**\n * Retrieve file from cache, or create a new one for future reads\n *\n * @async\n * @param  {Object}   params\n * @param  {String}   params.cacheDirectory   Directory to store cached files\n * @param  {String}   params.cacheIdentifier  Unique identifier to bust cache\n * @param  {Boolean}  params.cacheCompression Whether compressing cached files\n * @param  {String}   params.source   Original contents of the file to be cached\n * @param  {Object}   params.options  Options to be given to the transform fn\n *\n * @example\n *\n *   const result = await cache({\n *     cacheDirectory: '.tmp/cache',\n *     cacheIdentifier: 'babel-loader-cachefile',\n *     cacheCompression: false,\n *     source: *source code from file*,\n *     options: {\n *       experimental: true,\n *       runtime: true\n *     },\n *   });\n */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(function* (params) {\n    let directory;\n\n    if (typeof params.cacheDirectory === \"string\") {\n      directory = params.cacheDirectory;\n    } else {\n      if (defaultCacheDirectory === null) {\n        defaultCacheDirectory = findCacheDir({\n          name: \"babel-loader\"\n        }) || os.tmpdir();\n      }\n\n      directory = defaultCacheDirectory;\n    }\n\n    return yield handleCache(directory, params);\n  });\n\n  return function (_x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();"]},"metadata":{},"sourceType":"script"}