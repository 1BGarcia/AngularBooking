{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst nodePath = __importStar(require(\"path\"));\n\nconst load_esm_1 = require(\"../../utils/load-esm\");\n\nfunction localizeExtractLoader(content, map) {\n  // This loader is not cacheable due to how message extraction works.\n  // Extracted messages are not part of webpack pipeline and hence they cannot be retrieved from cache.\n  // TODO: We should investigate in the future on making this deterministic and more cacheable.\n  this.cacheable(false);\n  const options = this.getOptions();\n  const callback = this.async();\n  extract(this, content, map, options).then(() => {\n    // Pass through the original content now that messages have been extracted\n    callback(undefined, content, map);\n  }, error => {\n    callback(error);\n  });\n}\n\nexports.default = localizeExtractLoader;\n\nfunction extract(_x, _x2, _x3, _x4) {\n  return _extract.apply(this, arguments);\n}\n\nfunction _extract() {\n  _extract = _asyncToGenerator(function* (loaderContext, content, map, options) {\n    // Try to load the `@angular/localize` message extractor.\n    // All the localize usages are setup to first try the ESM entry point then fallback to the deep imports.\n    // This provides interim compatibility while the framework is transitioned to bundled ESM packages.\n    let MessageExtractor;\n\n    try {\n      // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n      // Once TypeScript provides support for keeping the dynamic import this workaround can be\n      // changed to a direct dynamic import.\n      const localizeToolsModule = yield (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n      MessageExtractor = localizeToolsModule.MessageExtractor;\n    } catch {\n      throw new Error(`Unable to load message extractor. Please ensure '@angular/localize' is installed.`);\n    } // Setup a Webpack-based logger instance\n\n\n    const logger = {\n      // level 2 is warnings\n      level: 2,\n\n      debug(...args) {\n        // eslint-disable-next-line no-console\n        console.debug(...args);\n      },\n\n      info(...args) {\n        loaderContext.emitWarning(new Error(args.join('')));\n      },\n\n      warn(...args) {\n        loaderContext.emitWarning(new Error(args.join('')));\n      },\n\n      error(...args) {\n        loaderContext.emitError(new Error(args.join('')));\n      }\n\n    };\n    let filename = loaderContext.resourcePath;\n    const mapObject = typeof map === 'string' ? JSON.parse(map) : map;\n\n    if (mapObject === null || mapObject === void 0 ? void 0 : mapObject.file) {\n      // The extractor's internal sourcemap handling expects the filenames to match\n      filename = nodePath.join(loaderContext.context, mapObject.file);\n    } // Setup a virtual file system instance for the extractor\n    // * MessageExtractor itself uses readFile, relative and resolve\n    // * Internal SourceFileLoader (sourcemap support) uses dirname, exists, readFile, and resolve\n\n\n    const filesystem = {\n      readFile(path) {\n        if (path === filename) {\n          return content;\n        } else if (path === filename + '.map') {\n          return typeof map === 'string' ? map : JSON.stringify(map);\n        } else {\n          throw new Error('Unknown file requested: ' + path);\n        }\n      },\n\n      relative(from, to) {\n        return nodePath.relative(from, to);\n      },\n\n      resolve(...paths) {\n        return nodePath.resolve(...paths);\n      },\n\n      exists(path) {\n        return path === filename || path === filename + '.map';\n      },\n\n      dirname(path) {\n        return nodePath.dirname(path);\n      }\n\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    const extractor = new MessageExtractor(filesystem, logger, {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      basePath: loaderContext.rootContext,\n      useSourceMaps: !!map\n    });\n    const messages = extractor.extractMessages(filename);\n\n    if (messages.length > 0) {\n      options === null || options === void 0 ? void 0 : options.messageHandler(messages);\n    }\n  });\n  return _extract.apply(this, arguments);\n}","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/@angular-devkit/build-angular/src/builders/extract-i18n/ivy-extract-loader.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","nodePath","require","load_esm_1","localizeExtractLoader","content","map","cacheable","options","getOptions","callback","async","extract","then","error","default","loaderContext","MessageExtractor","localizeToolsModule","loadEsmModule","Error","logger","level","debug","args","console","info","emitWarning","join","warn","emitError","filename","resourcePath","mapObject","JSON","parse","file","context","filesystem","readFile","path","stringify","relative","from","to","resolve","paths","exists","dirname","extractor","basePath","rootContext","useSourceMaps","messages","extractMessages","length","messageHandler"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst nodePath = __importStar(require(\"path\"));\nconst load_esm_1 = require(\"../../utils/load-esm\");\nfunction localizeExtractLoader(content, map) {\n    // This loader is not cacheable due to how message extraction works.\n    // Extracted messages are not part of webpack pipeline and hence they cannot be retrieved from cache.\n    // TODO: We should investigate in the future on making this deterministic and more cacheable.\n    this.cacheable(false);\n    const options = this.getOptions();\n    const callback = this.async();\n    extract(this, content, map, options).then(() => {\n        // Pass through the original content now that messages have been extracted\n        callback(undefined, content, map);\n    }, (error) => {\n        callback(error);\n    });\n}\nexports.default = localizeExtractLoader;\nasync function extract(loaderContext, content, map, options) {\n    // Try to load the `@angular/localize` message extractor.\n    // All the localize usages are setup to first try the ESM entry point then fallback to the deep imports.\n    // This provides interim compatibility while the framework is transitioned to bundled ESM packages.\n    let MessageExtractor;\n    try {\n        // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n        // Once TypeScript provides support for keeping the dynamic import this workaround can be\n        // changed to a direct dynamic import.\n        const localizeToolsModule = await (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n        MessageExtractor = localizeToolsModule.MessageExtractor;\n    }\n    catch {\n        throw new Error(`Unable to load message extractor. Please ensure '@angular/localize' is installed.`);\n    }\n    // Setup a Webpack-based logger instance\n    const logger = {\n        // level 2 is warnings\n        level: 2,\n        debug(...args) {\n            // eslint-disable-next-line no-console\n            console.debug(...args);\n        },\n        info(...args) {\n            loaderContext.emitWarning(new Error(args.join('')));\n        },\n        warn(...args) {\n            loaderContext.emitWarning(new Error(args.join('')));\n        },\n        error(...args) {\n            loaderContext.emitError(new Error(args.join('')));\n        },\n    };\n    let filename = loaderContext.resourcePath;\n    const mapObject = typeof map === 'string' ? JSON.parse(map) : map;\n    if (mapObject === null || mapObject === void 0 ? void 0 : mapObject.file) {\n        // The extractor's internal sourcemap handling expects the filenames to match\n        filename = nodePath.join(loaderContext.context, mapObject.file);\n    }\n    // Setup a virtual file system instance for the extractor\n    // * MessageExtractor itself uses readFile, relative and resolve\n    // * Internal SourceFileLoader (sourcemap support) uses dirname, exists, readFile, and resolve\n    const filesystem = {\n        readFile(path) {\n            if (path === filename) {\n                return content;\n            }\n            else if (path === filename + '.map') {\n                return typeof map === 'string' ? map : JSON.stringify(map);\n            }\n            else {\n                throw new Error('Unknown file requested: ' + path);\n            }\n        },\n        relative(from, to) {\n            return nodePath.relative(from, to);\n        },\n        resolve(...paths) {\n            return nodePath.resolve(...paths);\n        },\n        exists(path) {\n            return path === filename || path === filename + '.map';\n        },\n        dirname(path) {\n            return nodePath.dirname(path);\n        },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const extractor = new MessageExtractor(filesystem, logger, {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        basePath: loaderContext.rootContext,\n        useSourceMaps: !!map,\n    });\n    const messages = extractor.extractMessages(filename);\n    if (messages.length > 0) {\n        options === null || options === void 0 ? void 0 : options.messageHandler(messages);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}