{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst remapping_1 = __importDefault(require(\"@ampproject/remapping\"));\n\nconst babel_loader_1 = require(\"babel-loader\");\n\nconst typescript_1 = require(\"typescript\");\n\nconst load_esm_1 = require(\"../utils/load-esm\");\n\nconst package_version_1 = require(\"../utils/package-version\");\n/**\n * Cached instance of the compiler-cli linker's needsLinking function.\n */\n\n\nlet needsLinking;\n/**\n * Cached instance of the compiler-cli linker's Babel plugin factory function.\n */\n\nlet linkerPluginCreator;\n/**\n * Cached instance of the localize Babel plugins factory functions.\n */\n\nlet i18nPluginCreators;\n\nfunction requiresLinking(_x, _x2) {\n  return _requiresLinking.apply(this, arguments);\n} // eslint-disable-next-line max-lines-per-function\n\n\nfunction _requiresLinking() {\n  _requiresLinking = _asyncToGenerator(function* (path, source) {\n    // @angular/core and @angular/compiler will cause false positives\n    // Also, TypeScript files do not require linking\n    if (/[\\\\/]@angular[\\\\/](?:compiler|core)|\\.tsx?$/.test(path)) {\n      return false;\n    }\n\n    if (!needsLinking) {\n      // Load ESM `@angular/compiler-cli/linker` using the TypeScript dynamic import workaround.\n      // Once TypeScript provides support for keeping the dynamic import this workaround can be\n      // changed to a direct dynamic import.\n      const linkerModule = yield (0, load_esm_1.loadEsmModule)('@angular/compiler-cli/linker');\n      needsLinking = linkerModule.needsLinking;\n    }\n\n    return needsLinking(path, source);\n  });\n  return _requiresLinking.apply(this, arguments);\n}\n\nexports.default = (0, babel_loader_1.custom)(() => {\n  const baseOptions = Object.freeze({\n    babelrc: false,\n    configFile: false,\n    compact: false,\n    cacheCompression: false,\n    sourceType: 'unambiguous',\n    inputSourceMap: false\n  });\n  return {\n    customOptions(options, {\n      source,\n      map\n    }) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        var _a, _b;\n\n        const {\n          i18n,\n          scriptTarget,\n          aot,\n          optimize,\n          instrumentCode,\n          ...rawOptions\n        } = options; // Must process file if plugins are added\n\n        let shouldProcess = Array.isArray(rawOptions.plugins) && rawOptions.plugins.length > 0;\n        const customOptions = {\n          forceAsyncTransformation: false,\n          forceES5: false,\n          angularLinker: undefined,\n          i18n: undefined,\n          instrumentCode: undefined\n        }; // Analyze file for linking\n\n        if (yield requiresLinking(_this.resourcePath, source)) {\n          // Load ESM `@angular/compiler-cli/linker/babel` using the TypeScript dynamic import workaround.\n          // Once TypeScript provides support for keeping the dynamic import this workaround can be\n          // changed to a direct dynamic import.\n          linkerPluginCreator !== null && linkerPluginCreator !== void 0 ? linkerPluginCreator : linkerPluginCreator = (yield (0, load_esm_1.loadEsmModule)('@angular/compiler-cli/linker/babel')).createEs2015LinkerPlugin;\n          customOptions.angularLinker = {\n            shouldLink: true,\n            jitMode: aot !== true,\n            linkerPluginCreator\n          };\n          shouldProcess = true;\n        } // Analyze for ES target processing\n\n\n        const esTarget = scriptTarget;\n\n        if (esTarget !== undefined) {\n          if (esTarget < typescript_1.ScriptTarget.ES2015) {\n            customOptions.forceES5 = true;\n          } else if (esTarget >= typescript_1.ScriptTarget.ES2017 || /\\.[cm]?js$/.test(_this.resourcePath)) {\n            // Application code (TS files) will only contain native async if target is ES2017+.\n            // However, third-party libraries can regardless of the target option.\n            // APF packages with code in [f]esm2015 directories is downlevelled to ES2015 and\n            // will not have native async.\n            customOptions.forceAsyncTransformation = !/[\\\\/][_f]?esm2015[\\\\/]/.test(_this.resourcePath) && source.includes('async');\n          }\n\n          shouldProcess || (shouldProcess = customOptions.forceAsyncTransformation || customOptions.forceES5 || false);\n        } // Analyze for i18n inlining\n\n\n        if (i18n && !/[\\\\/]@angular[\\\\/](?:compiler|localize)/.test(_this.resourcePath) && source.includes('$localize')) {\n          // Load the i18n plugin creators from the new `@angular/localize/tools` entry point.\n          // This may fail during the transition to ESM due to the entry point not yet existing.\n          // During the transition, this will always attempt to load the entry point for each file.\n          // This will only occur during prerelease and will be automatically corrected once the new\n          // entry point exists.\n          if (i18nPluginCreators === undefined) {\n            // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n            // Once TypeScript provides support for keeping the dynamic import this workaround can be\n            // changed to a direct dynamic import.\n            i18nPluginCreators = yield (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n          }\n\n          customOptions.i18n = { ...i18n,\n            pluginCreators: i18nPluginCreators\n          }; // Add translation files as dependencies of the file to support rebuilds\n          // Except for `@angular/core` which needs locale injection but has no translations\n\n          if (customOptions.i18n.translationFiles && !/[\\\\/]@angular[\\\\/]core/.test(_this.resourcePath)) {\n            for (const file of customOptions.i18n.translationFiles) {\n              _this.addDependency(file);\n            }\n          }\n\n          shouldProcess = true;\n        }\n\n        if (optimize) {\n          const angularPackage = /[\\\\/]node_modules[\\\\/]@angular[\\\\/]/.test(_this.resourcePath);\n          customOptions.optimize = {\n            // Angular packages provide additional tested side effects guarantees and can use\n            // otherwise unsafe optimizations.\n            looseEnums: angularPackage,\n            pureTopLevel: angularPackage,\n            // JavaScript modules that are marked as side effect free are considered to have\n            // no decorators that contain non-local effects.\n            wrapDecorators: !!((_b = (_a = _this._module) === null || _a === void 0 ? void 0 : _a.factoryMeta) === null || _b === void 0 ? void 0 : _b.sideEffectFree)\n          };\n          shouldProcess = true;\n        }\n\n        if (instrumentCode && !instrumentCode.excludedPaths.has(_this.resourcePath) && !/\\.(e2e|spec)\\.tsx?$|[\\\\/]node_modules[\\\\/]/.test(_this.resourcePath) && _this.resourcePath.startsWith(instrumentCode.includedBasePath)) {\n          // `babel-plugin-istanbul` has it's own includes but we do the below so that we avoid running the the loader.\n          customOptions.instrumentCode = {\n            includedBasePath: instrumentCode.includedBasePath,\n            inputSourceMap: map\n          };\n          shouldProcess = true;\n        } // Add provided loader options to default base options\n\n\n        const loaderOptions = { ...baseOptions,\n          ...rawOptions,\n          cacheIdentifier: JSON.stringify({\n            buildAngular: package_version_1.VERSION,\n            customOptions,\n            baseOptions,\n            rawOptions\n          })\n        }; // Skip babel processing if no actions are needed\n\n        if (!shouldProcess) {\n          // Force the current file to be ignored\n          loaderOptions.ignore = [() => true];\n        }\n\n        return {\n          custom: customOptions,\n          loader: loaderOptions\n        };\n      })();\n    },\n\n    config(configuration, {\n      customOptions\n    }) {\n      return { ...configuration.options,\n        // Using `false` disables babel from attempting to locate sourcemaps or process any inline maps.\n        // The babel types do not include the false option even though it is valid\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        inputSourceMap: false,\n        presets: [...(configuration.options.presets || []), [require('./presets/application').default, { ...customOptions,\n          diagnosticReporter: (type, message) => {\n            switch (type) {\n              case 'error':\n                this.emitError(message);\n                break;\n\n              case 'info': // Webpack does not currently have an informational diagnostic\n\n              case 'warning':\n                this.emitWarning(message);\n                break;\n            }\n          }\n        }]]\n      };\n    },\n\n    result(result, {\n      map: inputSourceMap\n    }) {\n      if (result.map && inputSourceMap) {\n        // Merge the intermediate sourcemap generated by babel with the input source map.\n        // The casting is required due to slight differences in the types for babel and\n        // `@ampproject/remapping` source map objects but both are compatible with Webpack.\n        // This method for merging is used because it provides more accurate output\n        // and is faster while using less memory.\n        result.map = { // Convert the SourceMap back to simple plain object.\n          // This is needed because otherwise code-coverage will fail with `don't know how to turn this value into a node`\n          // Which is thrown by Babel if it is invoked again from `istanbul-lib-instrument`.\n          // https://github.com/babel/babel/blob/780aa48d2a34dc55f556843074b6aed45e7eabeb/packages/babel-types/src/converters/valueToNode.ts#L115-L130\n          ...(0, remapping_1.default)([result.map, inputSourceMap], () => null)\n        };\n      }\n\n      return result;\n    }\n\n  };\n});","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/@angular-devkit/build-angular/src/babel/webpack-loader.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","remapping_1","require","babel_loader_1","typescript_1","load_esm_1","package_version_1","needsLinking","linkerPluginCreator","i18nPluginCreators","requiresLinking","path","source","test","linkerModule","loadEsmModule","default","custom","baseOptions","freeze","babelrc","configFile","compact","cacheCompression","sourceType","inputSourceMap","customOptions","options","map","_a","_b","i18n","scriptTarget","aot","optimize","instrumentCode","rawOptions","shouldProcess","Array","isArray","plugins","length","forceAsyncTransformation","forceES5","angularLinker","undefined","resourcePath","createEs2015LinkerPlugin","shouldLink","jitMode","esTarget","ScriptTarget","ES2015","ES2017","includes","pluginCreators","translationFiles","file","addDependency","angularPackage","looseEnums","pureTopLevel","wrapDecorators","_module","factoryMeta","sideEffectFree","excludedPaths","has","startsWith","includedBasePath","loaderOptions","cacheIdentifier","JSON","stringify","buildAngular","VERSION","ignore","loader","config","configuration","presets","diagnosticReporter","type","message","emitError","emitWarning","result"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,WAAW,GAAGP,eAAe,CAACQ,OAAO,CAAC,uBAAD,CAAR,CAAnC;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,cAAD,CAA9B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,YAAD,CAA5B;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,mBAAD,CAA1B;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,0BAAD,CAAjC;AACA;AACA;AACA;;;AACA,IAAIK,YAAJ;AACA;AACA;AACA;;AACA,IAAIC,mBAAJ;AACA;AACA;AACA;;AACA,IAAIC,kBAAJ;;SACeC,e;;EAef;;;;uCAfA,WAA+BC,IAA/B,EAAqCC,MAArC,EAA6C;AACzC;AACA;AACA,QAAI,8CAA8CC,IAA9C,CAAmDF,IAAnD,CAAJ,EAA8D;AAC1D,aAAO,KAAP;AACH;;AACD,QAAI,CAACJ,YAAL,EAAmB;AACf;AACA;AACA;AACA,YAAMO,YAAY,SAAS,CAAC,GAAGT,UAAU,CAACU,aAAf,EAA8B,8BAA9B,CAA3B;AACAR,MAAAA,YAAY,GAAGO,YAAY,CAACP,YAA5B;AACH;;AACD,WAAOA,YAAY,CAACI,IAAD,EAAOC,MAAP,CAAnB;AACH,G;;;;AAEDb,OAAO,CAACiB,OAAR,GAAkB,CAAC,GAAGb,cAAc,CAACc,MAAnB,EAA2B,MAAM;AAC/C,QAAMC,WAAW,GAAGrB,MAAM,CAACsB,MAAP,CAAc;AAC9BC,IAAAA,OAAO,EAAE,KADqB;AAE9BC,IAAAA,UAAU,EAAE,KAFkB;AAG9BC,IAAAA,OAAO,EAAE,KAHqB;AAI9BC,IAAAA,gBAAgB,EAAE,KAJY;AAK9BC,IAAAA,UAAU,EAAE,aALkB;AAM9BC,IAAAA,cAAc,EAAE;AANc,GAAd,CAApB;AAQA,SAAO;AACGC,IAAAA,aAAN,CAAoBC,OAApB,EAA6B;AAAEf,MAAAA,MAAF;AAAUgB,MAAAA;AAAV,KAA7B,EAA8C;AAAA;;AAAA;AAC1C,YAAIC,EAAJ,EAAQC,EAAR;;AACA,cAAM;AAAEC,UAAAA,IAAF;AAAQC,UAAAA,YAAR;AAAsBC,UAAAA,GAAtB;AAA2BC,UAAAA,QAA3B;AAAqCC,UAAAA,cAArC;AAAqD,aAAGC;AAAxD,YAAuET,OAA7E,CAF0C,CAG1C;;AACA,YAAIU,aAAa,GAAGC,KAAK,CAACC,OAAN,CAAcH,UAAU,CAACI,OAAzB,KAAqCJ,UAAU,CAACI,OAAX,CAAmBC,MAAnB,GAA4B,CAArF;AACA,cAAMf,aAAa,GAAG;AAClBgB,UAAAA,wBAAwB,EAAE,KADR;AAElBC,UAAAA,QAAQ,EAAE,KAFQ;AAGlBC,UAAAA,aAAa,EAAEC,SAHG;AAIlBd,UAAAA,IAAI,EAAEc,SAJY;AAKlBV,UAAAA,cAAc,EAAEU;AALE,SAAtB,CAL0C,CAY1C;;AACA,kBAAUnC,eAAe,CAAC,KAAI,CAACoC,YAAN,EAAoBlC,MAApB,CAAzB,EAAsD;AAClD;AACA;AACA;AACAJ,UAAAA,mBAAmB,KAAK,IAAxB,IAAgCA,mBAAmB,KAAK,KAAK,CAA7D,GAAiEA,mBAAjE,GAAwFA,mBAAmB,GAAG,OAAO,CAAC,GAAGH,UAAU,CAACU,aAAf,EAA8B,oCAA9B,CAAP,EAA4EgC,wBAA1L;AACArB,UAAAA,aAAa,CAACkB,aAAd,GAA8B;AAC1BI,YAAAA,UAAU,EAAE,IADc;AAE1BC,YAAAA,OAAO,EAAEhB,GAAG,KAAK,IAFS;AAG1BzB,YAAAA;AAH0B,WAA9B;AAKA6B,UAAAA,aAAa,GAAG,IAAhB;AACH,SAxByC,CAyB1C;;;AACA,cAAMa,QAAQ,GAAGlB,YAAjB;;AACA,YAAIkB,QAAQ,KAAKL,SAAjB,EAA4B;AACxB,cAAIK,QAAQ,GAAG9C,YAAY,CAAC+C,YAAb,CAA0BC,MAAzC,EAAiD;AAC7C1B,YAAAA,aAAa,CAACiB,QAAd,GAAyB,IAAzB;AACH,WAFD,MAGK,IAAIO,QAAQ,IAAI9C,YAAY,CAAC+C,YAAb,CAA0BE,MAAtC,IAAgD,aAAaxC,IAAb,CAAkB,KAAI,CAACiC,YAAvB,CAApD,EAA0F;AAC3F;AACA;AACA;AACA;AACApB,YAAAA,aAAa,CAACgB,wBAAd,GACI,CAAC,yBAAyB7B,IAAzB,CAA8B,KAAI,CAACiC,YAAnC,CAAD,IAAqDlC,MAAM,CAAC0C,QAAP,CAAgB,OAAhB,CADzD;AAEH;;AACDjB,UAAAA,aAAa,KAAKA,aAAa,GAAGX,aAAa,CAACgB,wBAAd,IAA0ChB,aAAa,CAACiB,QAAxD,IAAoE,KAAzF,CAAb;AACH,SAxCyC,CAyC1C;;;AACA,YAAIZ,IAAI,IACJ,CAAC,0CAA0ClB,IAA1C,CAA+C,KAAI,CAACiC,YAApD,CADD,IAEAlC,MAAM,CAAC0C,QAAP,CAAgB,WAAhB,CAFJ,EAEkC;AAC9B;AACA;AACA;AACA;AACA;AACA,cAAI7C,kBAAkB,KAAKoC,SAA3B,EAAsC;AAClC;AACA;AACA;AACApC,YAAAA,kBAAkB,SAAS,CAAC,GAAGJ,UAAU,CAACU,aAAf,EAA8B,yBAA9B,CAA3B;AACH;;AACDW,UAAAA,aAAa,CAACK,IAAd,GAAqB,EACjB,GAAGA,IADc;AAEjBwB,YAAAA,cAAc,EAAE9C;AAFC,WAArB,CAZ8B,CAgB9B;AACA;;AACA,cAAIiB,aAAa,CAACK,IAAd,CAAmByB,gBAAnB,IACA,CAAC,yBAAyB3C,IAAzB,CAA8B,KAAI,CAACiC,YAAnC,CADL,EACuD;AACnD,iBAAK,MAAMW,IAAX,IAAmB/B,aAAa,CAACK,IAAd,CAAmByB,gBAAtC,EAAwD;AACpD,cAAA,KAAI,CAACE,aAAL,CAAmBD,IAAnB;AACH;AACJ;;AACDpB,UAAAA,aAAa,GAAG,IAAhB;AACH;;AACD,YAAIH,QAAJ,EAAc;AACV,gBAAMyB,cAAc,GAAG,sCAAsC9C,IAAtC,CAA2C,KAAI,CAACiC,YAAhD,CAAvB;AACApB,UAAAA,aAAa,CAACQ,QAAd,GAAyB;AACrB;AACA;AACA0B,YAAAA,UAAU,EAAED,cAHS;AAIrBE,YAAAA,YAAY,EAAEF,cAJO;AAKrB;AACA;AACAG,YAAAA,cAAc,EAAE,CAAC,EAAE,CAAChC,EAAE,GAAG,CAACD,EAAE,GAAG,KAAI,CAACkC,OAAX,MAAwB,IAAxB,IAAgClC,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACmC,WAAlE,MAAmF,IAAnF,IAA2FlC,EAAE,KAAK,KAAK,CAAvG,GAA2G,KAAK,CAAhH,GAAoHA,EAAE,CAACmC,cAAzH;AAPI,WAAzB;AASA5B,UAAAA,aAAa,GAAG,IAAhB;AACH;;AACD,YAAIF,cAAc,IACd,CAACA,cAAc,CAAC+B,aAAf,CAA6BC,GAA7B,CAAiC,KAAI,CAACrB,YAAtC,CADD,IAEA,CAAC,6CAA6CjC,IAA7C,CAAkD,KAAI,CAACiC,YAAvD,CAFD,IAGA,KAAI,CAACA,YAAL,CAAkBsB,UAAlB,CAA6BjC,cAAc,CAACkC,gBAA5C,CAHJ,EAGmE;AAC/D;AACA3C,UAAAA,aAAa,CAACS,cAAd,GAA+B;AAC3BkC,YAAAA,gBAAgB,EAAElC,cAAc,CAACkC,gBADN;AAE3B5C,YAAAA,cAAc,EAAEG;AAFW,WAA/B;AAIAS,UAAAA,aAAa,GAAG,IAAhB;AACH,SA7FyC,CA8F1C;;;AACA,cAAMiC,aAAa,GAAG,EAClB,GAAGpD,WADe;AAElB,aAAGkB,UAFe;AAGlBmC,UAAAA,eAAe,EAAEC,IAAI,CAACC,SAAL,CAAe;AAC5BC,YAAAA,YAAY,EAAEpE,iBAAiB,CAACqE,OADJ;AAE5BjD,YAAAA,aAF4B;AAG5BR,YAAAA,WAH4B;AAI5BkB,YAAAA;AAJ4B,WAAf;AAHC,SAAtB,CA/F0C,CAyG1C;;AACA,YAAI,CAACC,aAAL,EAAoB;AAChB;AACAiC,UAAAA,aAAa,CAACM,MAAd,GAAuB,CAAC,MAAM,IAAP,CAAvB;AACH;;AACD,eAAO;AAAE3D,UAAAA,MAAM,EAAES,aAAV;AAAyBmD,UAAAA,MAAM,EAAEP;AAAjC,SAAP;AA9G0C;AA+G7C,KAhHE;;AAiHHQ,IAAAA,MAAM,CAACC,aAAD,EAAgB;AAAErD,MAAAA;AAAF,KAAhB,EAAmC;AACrC,aAAO,EACH,GAAGqD,aAAa,CAACpD,OADd;AAEH;AACA;AACA;AACAF,QAAAA,cAAc,EAAE,KALb;AAMHuD,QAAAA,OAAO,EAAE,CACL,IAAID,aAAa,CAACpD,OAAd,CAAsBqD,OAAtB,IAAiC,EAArC,CADK,EAEL,CACI9E,OAAO,CAAC,uBAAD,CAAP,CAAiCc,OADrC,EAEI,EACI,GAAGU,aADP;AAEIuD,UAAAA,kBAAkB,EAAE,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACnC,oBAAQD,IAAR;AACI,mBAAK,OAAL;AACI,qBAAKE,SAAL,CAAeD,OAAf;AACA;;AACJ,mBAAK,MAAL,CAJJ,CAKI;;AACA,mBAAK,SAAL;AACI,qBAAKE,WAAL,CAAiBF,OAAjB;AACA;AARR;AAUH;AAbL,SAFJ,CAFK;AANN,OAAP;AA4BH,KA9IE;;AA+IHG,IAAAA,MAAM,CAACA,MAAD,EAAS;AAAE1D,MAAAA,GAAG,EAAEH;AAAP,KAAT,EAAkC;AACpC,UAAI6D,MAAM,CAAC1D,GAAP,IAAcH,cAAlB,EAAkC;AAC9B;AACA;AACA;AACA;AACA;AACA6D,QAAAA,MAAM,CAAC1D,GAAP,GAAa,EACT;AACA;AACA;AACA;AACA,aAAG,CAAC,GAAG3B,WAAW,CAACe,OAAhB,EAAyB,CAACsE,MAAM,CAAC1D,GAAR,EAAaH,cAAb,CAAzB,EAAuD,MAAM,IAA7D;AALM,SAAb;AAOH;;AACD,aAAO6D,MAAP;AACH;;AA/JE,GAAP;AAiKH,CA1KiB,CAAlB","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst remapping_1 = __importDefault(require(\"@ampproject/remapping\"));\nconst babel_loader_1 = require(\"babel-loader\");\nconst typescript_1 = require(\"typescript\");\nconst load_esm_1 = require(\"../utils/load-esm\");\nconst package_version_1 = require(\"../utils/package-version\");\n/**\n * Cached instance of the compiler-cli linker's needsLinking function.\n */\nlet needsLinking;\n/**\n * Cached instance of the compiler-cli linker's Babel plugin factory function.\n */\nlet linkerPluginCreator;\n/**\n * Cached instance of the localize Babel plugins factory functions.\n */\nlet i18nPluginCreators;\nasync function requiresLinking(path, source) {\n    // @angular/core and @angular/compiler will cause false positives\n    // Also, TypeScript files do not require linking\n    if (/[\\\\/]@angular[\\\\/](?:compiler|core)|\\.tsx?$/.test(path)) {\n        return false;\n    }\n    if (!needsLinking) {\n        // Load ESM `@angular/compiler-cli/linker` using the TypeScript dynamic import workaround.\n        // Once TypeScript provides support for keeping the dynamic import this workaround can be\n        // changed to a direct dynamic import.\n        const linkerModule = await (0, load_esm_1.loadEsmModule)('@angular/compiler-cli/linker');\n        needsLinking = linkerModule.needsLinking;\n    }\n    return needsLinking(path, source);\n}\n// eslint-disable-next-line max-lines-per-function\nexports.default = (0, babel_loader_1.custom)(() => {\n    const baseOptions = Object.freeze({\n        babelrc: false,\n        configFile: false,\n        compact: false,\n        cacheCompression: false,\n        sourceType: 'unambiguous',\n        inputSourceMap: false,\n    });\n    return {\n        async customOptions(options, { source, map }) {\n            var _a, _b;\n            const { i18n, scriptTarget, aot, optimize, instrumentCode, ...rawOptions } = options;\n            // Must process file if plugins are added\n            let shouldProcess = Array.isArray(rawOptions.plugins) && rawOptions.plugins.length > 0;\n            const customOptions = {\n                forceAsyncTransformation: false,\n                forceES5: false,\n                angularLinker: undefined,\n                i18n: undefined,\n                instrumentCode: undefined,\n            };\n            // Analyze file for linking\n            if (await requiresLinking(this.resourcePath, source)) {\n                // Load ESM `@angular/compiler-cli/linker/babel` using the TypeScript dynamic import workaround.\n                // Once TypeScript provides support for keeping the dynamic import this workaround can be\n                // changed to a direct dynamic import.\n                linkerPluginCreator !== null && linkerPluginCreator !== void 0 ? linkerPluginCreator : (linkerPluginCreator = (await (0, load_esm_1.loadEsmModule)('@angular/compiler-cli/linker/babel')).createEs2015LinkerPlugin);\n                customOptions.angularLinker = {\n                    shouldLink: true,\n                    jitMode: aot !== true,\n                    linkerPluginCreator,\n                };\n                shouldProcess = true;\n            }\n            // Analyze for ES target processing\n            const esTarget = scriptTarget;\n            if (esTarget !== undefined) {\n                if (esTarget < typescript_1.ScriptTarget.ES2015) {\n                    customOptions.forceES5 = true;\n                }\n                else if (esTarget >= typescript_1.ScriptTarget.ES2017 || /\\.[cm]?js$/.test(this.resourcePath)) {\n                    // Application code (TS files) will only contain native async if target is ES2017+.\n                    // However, third-party libraries can regardless of the target option.\n                    // APF packages with code in [f]esm2015 directories is downlevelled to ES2015 and\n                    // will not have native async.\n                    customOptions.forceAsyncTransformation =\n                        !/[\\\\/][_f]?esm2015[\\\\/]/.test(this.resourcePath) && source.includes('async');\n                }\n                shouldProcess || (shouldProcess = customOptions.forceAsyncTransformation || customOptions.forceES5 || false);\n            }\n            // Analyze for i18n inlining\n            if (i18n &&\n                !/[\\\\/]@angular[\\\\/](?:compiler|localize)/.test(this.resourcePath) &&\n                source.includes('$localize')) {\n                // Load the i18n plugin creators from the new `@angular/localize/tools` entry point.\n                // This may fail during the transition to ESM due to the entry point not yet existing.\n                // During the transition, this will always attempt to load the entry point for each file.\n                // This will only occur during prerelease and will be automatically corrected once the new\n                // entry point exists.\n                if (i18nPluginCreators === undefined) {\n                    // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n                    // Once TypeScript provides support for keeping the dynamic import this workaround can be\n                    // changed to a direct dynamic import.\n                    i18nPluginCreators = await (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n                }\n                customOptions.i18n = {\n                    ...i18n,\n                    pluginCreators: i18nPluginCreators,\n                };\n                // Add translation files as dependencies of the file to support rebuilds\n                // Except for `@angular/core` which needs locale injection but has no translations\n                if (customOptions.i18n.translationFiles &&\n                    !/[\\\\/]@angular[\\\\/]core/.test(this.resourcePath)) {\n                    for (const file of customOptions.i18n.translationFiles) {\n                        this.addDependency(file);\n                    }\n                }\n                shouldProcess = true;\n            }\n            if (optimize) {\n                const angularPackage = /[\\\\/]node_modules[\\\\/]@angular[\\\\/]/.test(this.resourcePath);\n                customOptions.optimize = {\n                    // Angular packages provide additional tested side effects guarantees and can use\n                    // otherwise unsafe optimizations.\n                    looseEnums: angularPackage,\n                    pureTopLevel: angularPackage,\n                    // JavaScript modules that are marked as side effect free are considered to have\n                    // no decorators that contain non-local effects.\n                    wrapDecorators: !!((_b = (_a = this._module) === null || _a === void 0 ? void 0 : _a.factoryMeta) === null || _b === void 0 ? void 0 : _b.sideEffectFree),\n                };\n                shouldProcess = true;\n            }\n            if (instrumentCode &&\n                !instrumentCode.excludedPaths.has(this.resourcePath) &&\n                !/\\.(e2e|spec)\\.tsx?$|[\\\\/]node_modules[\\\\/]/.test(this.resourcePath) &&\n                this.resourcePath.startsWith(instrumentCode.includedBasePath)) {\n                // `babel-plugin-istanbul` has it's own includes but we do the below so that we avoid running the the loader.\n                customOptions.instrumentCode = {\n                    includedBasePath: instrumentCode.includedBasePath,\n                    inputSourceMap: map,\n                };\n                shouldProcess = true;\n            }\n            // Add provided loader options to default base options\n            const loaderOptions = {\n                ...baseOptions,\n                ...rawOptions,\n                cacheIdentifier: JSON.stringify({\n                    buildAngular: package_version_1.VERSION,\n                    customOptions,\n                    baseOptions,\n                    rawOptions,\n                }),\n            };\n            // Skip babel processing if no actions are needed\n            if (!shouldProcess) {\n                // Force the current file to be ignored\n                loaderOptions.ignore = [() => true];\n            }\n            return { custom: customOptions, loader: loaderOptions };\n        },\n        config(configuration, { customOptions }) {\n            return {\n                ...configuration.options,\n                // Using `false` disables babel from attempting to locate sourcemaps or process any inline maps.\n                // The babel types do not include the false option even though it is valid\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                inputSourceMap: false,\n                presets: [\n                    ...(configuration.options.presets || []),\n                    [\n                        require('./presets/application').default,\n                        {\n                            ...customOptions,\n                            diagnosticReporter: (type, message) => {\n                                switch (type) {\n                                    case 'error':\n                                        this.emitError(message);\n                                        break;\n                                    case 'info':\n                                    // Webpack does not currently have an informational diagnostic\n                                    case 'warning':\n                                        this.emitWarning(message);\n                                        break;\n                                }\n                            },\n                        },\n                    ],\n                ],\n            };\n        },\n        result(result, { map: inputSourceMap }) {\n            if (result.map && inputSourceMap) {\n                // Merge the intermediate sourcemap generated by babel with the input source map.\n                // The casting is required due to slight differences in the types for babel and\n                // `@ampproject/remapping` source map objects but both are compatible with Webpack.\n                // This method for merging is used because it provides more accurate output\n                // and is faster while using less memory.\n                result.map = {\n                    // Convert the SourceMap back to simple plain object.\n                    // This is needed because otherwise code-coverage will fail with `don't know how to turn this value into a node`\n                    // Which is thrown by Babel if it is invoked again from `istanbul-lib-instrument`.\n                    // https://github.com/babel/babel/blob/780aa48d2a34dc55f556843074b6aed45e7eabeb/packages/babel-types/src/converters/valueToNode.ts#L115-L130\n                    ...(0, remapping_1.default)([result.map, inputSourceMap], () => null),\n                };\n            }\n            return result;\n        },\n    };\n});\n"]},"metadata":{},"sourceType":"script"}