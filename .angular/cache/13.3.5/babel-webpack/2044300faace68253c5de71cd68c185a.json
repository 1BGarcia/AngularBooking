{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst isUrlFunc = /url/i;\nconst isImageSetFunc = /^(?:-webkit-)?image-set$/i;\nconst needParseDeclaration = /(?:url|(?:-webkit-)?image-set)\\(/i;\n\nfunction getNodeFromUrlFunc(node) {\n  return node.nodes && node.nodes[0];\n}\n\nfunction getWebpackIgnoreCommentValue(index, nodes, inBetween) {\n  if (index === 0 && typeof inBetween !== \"undefined\") {\n    return inBetween;\n  }\n\n  let prevValueNode = nodes[index - 1];\n\n  if (!prevValueNode) {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n\n  if (prevValueNode.type === \"space\") {\n    if (!nodes[index - 2]) {\n      // eslint-disable-next-line consistent-return\n      return;\n    }\n\n    prevValueNode = nodes[index - 2];\n  }\n\n  if (prevValueNode.type !== \"comment\") {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n\n  const matched = prevValueNode.value.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n  return matched && matched[2] === \"true\";\n}\n\nfunction shouldHandleURL(url, declaration, result, options) {\n  if (url.length === 0) {\n    result.warn(`Unable to find uri in '${declaration.toString()}'`, {\n      node: declaration\n    });\n    return {\n      requestable: false,\n      needResolve: false\n    };\n  }\n\n  return (0, _utils.isURLRequestable)(url, options);\n}\n\nfunction parseDeclaration(declaration, key, result, options) {\n  if (!needParseDeclaration.test(declaration[key])) {\n    return;\n  }\n\n  const parsed = (0, _postcssValueParser.default)(declaration.raws && declaration.raws.value && declaration.raws.value.raw ? declaration.raws.value.raw : declaration[key]);\n  let inBetween;\n\n  if (declaration.raws && declaration.raws.between) {\n    const lastCommentIndex = declaration.raws.between.lastIndexOf(\"/*\");\n    const matched = declaration.raws.between.slice(lastCommentIndex).match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n\n    if (matched) {\n      inBetween = matched[2] === \"true\";\n    }\n  }\n\n  let isIgnoreOnDeclaration = false;\n  const prevNode = declaration.prev();\n\n  if (prevNode && prevNode.type === \"comment\") {\n    const matched = prevNode.text.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n\n    if (matched) {\n      isIgnoreOnDeclaration = matched[2] === \"true\";\n    }\n  }\n\n  let needIgnore;\n  const parsedURLs = [];\n  parsed.walk((valueNode, index, valueNodes) => {\n    if (valueNode.type !== \"function\") {\n      return;\n    }\n\n    if (isUrlFunc.test(valueNode.value)) {\n      needIgnore = getWebpackIgnoreCommentValue(index, valueNodes, inBetween);\n\n      if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n        if (needIgnore) {\n          // eslint-disable-next-line no-undefined\n          needIgnore = undefined;\n        }\n\n        return;\n      }\n\n      const {\n        nodes\n      } = valueNode;\n      const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n      let url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n      url = (0, _utils.normalizeUrl)(url, isStringValue);\n      const {\n        requestable,\n        needResolve\n      } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n      if (!requestable) {\n        // eslint-disable-next-line consistent-return\n        return false;\n      }\n\n      const queryParts = url.split(\"!\");\n      let prefix;\n\n      if (queryParts.length > 1) {\n        url = queryParts.pop();\n        prefix = queryParts.join(\"!\");\n      }\n\n      parsedURLs.push({\n        declaration,\n        parsed,\n        node: getNodeFromUrlFunc(valueNode),\n        prefix,\n        url,\n        needQuotes: false,\n        needResolve\n      }); // eslint-disable-next-line consistent-return\n\n      return false;\n    } else if (isImageSetFunc.test(valueNode.value)) {\n      for (const [innerIndex, nNode] of valueNode.nodes.entries()) {\n        const {\n          type,\n          value\n        } = nNode;\n\n        if (type === \"function\" && isUrlFunc.test(value)) {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            } // eslint-disable-next-line no-continue\n\n\n            continue;\n          }\n\n          const {\n            nodes\n          } = nNode;\n          const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n          let url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n          url = (0, _utils.normalizeUrl)(url, isStringValue);\n          const {\n            requestable,\n            needResolve\n          } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n          if (!requestable) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n\n          const queryParts = url.split(\"!\");\n          let prefix;\n\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: getNodeFromUrlFunc(nNode),\n            prefix,\n            url,\n            needQuotes: false,\n            needResolve\n          });\n        } else if (type === \"string\") {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            } // eslint-disable-next-line no-continue\n\n\n            continue;\n          }\n\n          let url = (0, _utils.normalizeUrl)(value, true);\n          const {\n            requestable,\n            needResolve\n          } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n          if (!requestable) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n\n          const queryParts = url.split(\"!\");\n          let prefix;\n\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: nNode,\n            prefix,\n            url,\n            needQuotes: true,\n            needResolve\n          });\n        }\n      } // Do not traverse inside `image-set`\n      // eslint-disable-next-line consistent-return\n\n\n      return false;\n    }\n  }); // eslint-disable-next-line consistent-return\n\n  return parsedURLs;\n}\n\nconst plugin = (options = {}) => {\n  return {\n    postcssPlugin: \"postcss-url-parser\",\n\n    prepare(result) {\n      const parsedDeclarations = [];\n      return {\n        Declaration(declaration) {\n          const {\n            isSupportDataURL,\n            isSupportAbsoluteURL\n          } = options;\n          const parsedURL = parseDeclaration(declaration, \"value\", result, {\n            isSupportDataURL,\n            isSupportAbsoluteURL\n          });\n\n          if (!parsedURL) {\n            return;\n          }\n\n          parsedDeclarations.push(...parsedURL);\n        },\n\n        OnceExit() {\n          return _asyncToGenerator(function* () {\n            if (parsedDeclarations.length === 0) {\n              return;\n            }\n\n            const resolvedDeclarations = yield Promise.all(parsedDeclarations.map( /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator(function* (parsedDeclaration) {\n                const {\n                  url,\n                  needResolve\n                } = parsedDeclaration;\n\n                if (options.filter) {\n                  const needKeep = yield options.filter(url);\n\n                  if (!needKeep) {\n                    // eslint-disable-next-line consistent-return\n                    return;\n                  }\n                }\n\n                if (!needResolve) {\n                  // eslint-disable-next-line consistent-return\n                  return parsedDeclaration;\n                }\n\n                const splittedUrl = url.split(/(\\?)?#/);\n                const [pathname, query, hashOrQuery] = splittedUrl;\n                let hash = query ? \"?\" : \"\";\n                hash += hashOrQuery ? `#${hashOrQuery}` : \"\";\n                const {\n                  resolver,\n                  rootContext\n                } = options;\n                const request = (0, _utils.requestify)(pathname, rootContext, Boolean(resolver));\n\n                if (!resolver) {\n                  // eslint-disable-next-line consistent-return\n                  return { ...parsedDeclaration,\n                    url: request,\n                    hash\n                  };\n                }\n\n                const resolvedURL = yield (0, _utils.resolveRequests)(resolver, options.context, [...new Set([request, url])]);\n\n                if (!resolvedURL) {\n                  // eslint-disable-next-line consistent-return\n                  return;\n                } // eslint-disable-next-line consistent-return\n\n\n                return { ...parsedDeclaration,\n                  url: resolvedURL,\n                  hash\n                };\n              });\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }()));\n            const urlToNameMap = new Map();\n            const urlToReplacementMap = new Map();\n            let hasUrlImportHelper = false;\n\n            for (let index = 0; index <= resolvedDeclarations.length - 1; index++) {\n              const item = resolvedDeclarations[index];\n\n              if (!item) {\n                // eslint-disable-next-line no-continue\n                continue;\n              }\n\n              if (!hasUrlImportHelper) {\n                options.imports.push({\n                  type: \"get_url_import\",\n                  importName: \"___CSS_LOADER_GET_URL_IMPORT___\",\n                  url: options.urlHandler(require.resolve(\"../runtime/getUrl.js\")),\n                  index: -1\n                });\n                hasUrlImportHelper = true;\n              }\n\n              const {\n                url,\n                prefix\n              } = item;\n              const newUrl = prefix ? `${prefix}!${url}` : url;\n              let importName = urlToNameMap.get(newUrl);\n\n              if (!importName) {\n                importName = `___CSS_LOADER_URL_IMPORT_${urlToNameMap.size}___`;\n                urlToNameMap.set(newUrl, importName);\n                options.imports.push({\n                  type: \"url\",\n                  importName,\n                  url: options.resolver ? options.urlHandler(newUrl) : JSON.stringify(newUrl),\n                  index\n                });\n              }\n\n              const {\n                hash,\n                needQuotes\n              } = item;\n              const replacementKey = JSON.stringify({\n                newUrl,\n                hash,\n                needQuotes\n              });\n              let replacementName = urlToReplacementMap.get(replacementKey);\n\n              if (!replacementName) {\n                replacementName = `___CSS_LOADER_URL_REPLACEMENT_${urlToReplacementMap.size}___`;\n                urlToReplacementMap.set(replacementKey, replacementName);\n                options.replacements.push({\n                  replacementName,\n                  importName,\n                  hash,\n                  needQuotes\n                });\n              } // eslint-disable-next-line no-param-reassign\n\n\n              item.node.type = \"word\"; // eslint-disable-next-line no-param-reassign\n\n              item.node.value = replacementName; // eslint-disable-next-line no-param-reassign\n\n              item.declaration.value = item.parsed.toString();\n            }\n          })();\n        }\n\n      };\n    }\n\n  };\n};\n\nplugin.postcss = true;\nvar _default = plugin;\nexports.default = _default;","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/css-loader/dist/plugins/postcss-url-parser.js"],"names":["Object","defineProperty","exports","value","default","_postcssValueParser","_interopRequireDefault","require","_utils","obj","__esModule","isUrlFunc","isImageSetFunc","needParseDeclaration","getNodeFromUrlFunc","node","nodes","getWebpackIgnoreCommentValue","index","inBetween","prevValueNode","type","matched","match","WEBPACK_IGNORE_COMMENT_REGEXP","shouldHandleURL","url","declaration","result","options","length","warn","toString","requestable","needResolve","isURLRequestable","parseDeclaration","key","test","parsed","raws","raw","between","lastCommentIndex","lastIndexOf","slice","isIgnoreOnDeclaration","prevNode","prev","text","needIgnore","parsedURLs","walk","valueNode","valueNodes","undefined","isStringValue","stringify","normalizeUrl","queryParts","split","prefix","pop","join","push","needQuotes","innerIndex","nNode","entries","plugin","postcssPlugin","prepare","parsedDeclarations","Declaration","isSupportDataURL","isSupportAbsoluteURL","parsedURL","OnceExit","resolvedDeclarations","Promise","all","map","parsedDeclaration","filter","needKeep","splittedUrl","pathname","query","hashOrQuery","hash","resolver","rootContext","request","requestify","Boolean","resolvedURL","resolveRequests","context","Set","urlToNameMap","Map","urlToReplacementMap","hasUrlImportHelper","item","imports","importName","urlHandler","resolve","newUrl","get","size","set","JSON","replacementKey","replacementName","replacements","postcss","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst isUrlFunc = /url/i;\nconst isImageSetFunc = /^(?:-webkit-)?image-set$/i;\nconst needParseDeclaration = /(?:url|(?:-webkit-)?image-set)\\(/i;\n\nfunction getNodeFromUrlFunc(node) {\n  return node.nodes && node.nodes[0];\n}\n\nfunction getWebpackIgnoreCommentValue(index, nodes, inBetween) {\n  if (index === 0 && typeof inBetween !== \"undefined\") {\n    return inBetween;\n  }\n\n  let prevValueNode = nodes[index - 1];\n\n  if (!prevValueNode) {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n\n  if (prevValueNode.type === \"space\") {\n    if (!nodes[index - 2]) {\n      // eslint-disable-next-line consistent-return\n      return;\n    }\n\n    prevValueNode = nodes[index - 2];\n  }\n\n  if (prevValueNode.type !== \"comment\") {\n    // eslint-disable-next-line consistent-return\n    return;\n  }\n\n  const matched = prevValueNode.value.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n  return matched && matched[2] === \"true\";\n}\n\nfunction shouldHandleURL(url, declaration, result, options) {\n  if (url.length === 0) {\n    result.warn(`Unable to find uri in '${declaration.toString()}'`, {\n      node: declaration\n    });\n    return {\n      requestable: false,\n      needResolve: false\n    };\n  }\n\n  return (0, _utils.isURLRequestable)(url, options);\n}\n\nfunction parseDeclaration(declaration, key, result, options) {\n  if (!needParseDeclaration.test(declaration[key])) {\n    return;\n  }\n\n  const parsed = (0, _postcssValueParser.default)(declaration.raws && declaration.raws.value && declaration.raws.value.raw ? declaration.raws.value.raw : declaration[key]);\n  let inBetween;\n\n  if (declaration.raws && declaration.raws.between) {\n    const lastCommentIndex = declaration.raws.between.lastIndexOf(\"/*\");\n    const matched = declaration.raws.between.slice(lastCommentIndex).match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n\n    if (matched) {\n      inBetween = matched[2] === \"true\";\n    }\n  }\n\n  let isIgnoreOnDeclaration = false;\n  const prevNode = declaration.prev();\n\n  if (prevNode && prevNode.type === \"comment\") {\n    const matched = prevNode.text.match(_utils.WEBPACK_IGNORE_COMMENT_REGEXP);\n\n    if (matched) {\n      isIgnoreOnDeclaration = matched[2] === \"true\";\n    }\n  }\n\n  let needIgnore;\n  const parsedURLs = [];\n  parsed.walk((valueNode, index, valueNodes) => {\n    if (valueNode.type !== \"function\") {\n      return;\n    }\n\n    if (isUrlFunc.test(valueNode.value)) {\n      needIgnore = getWebpackIgnoreCommentValue(index, valueNodes, inBetween);\n\n      if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n        if (needIgnore) {\n          // eslint-disable-next-line no-undefined\n          needIgnore = undefined;\n        }\n\n        return;\n      }\n\n      const {\n        nodes\n      } = valueNode;\n      const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n      let url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n      url = (0, _utils.normalizeUrl)(url, isStringValue);\n      const {\n        requestable,\n        needResolve\n      } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n      if (!requestable) {\n        // eslint-disable-next-line consistent-return\n        return false;\n      }\n\n      const queryParts = url.split(\"!\");\n      let prefix;\n\n      if (queryParts.length > 1) {\n        url = queryParts.pop();\n        prefix = queryParts.join(\"!\");\n      }\n\n      parsedURLs.push({\n        declaration,\n        parsed,\n        node: getNodeFromUrlFunc(valueNode),\n        prefix,\n        url,\n        needQuotes: false,\n        needResolve\n      }); // eslint-disable-next-line consistent-return\n\n      return false;\n    } else if (isImageSetFunc.test(valueNode.value)) {\n      for (const [innerIndex, nNode] of valueNode.nodes.entries()) {\n        const {\n          type,\n          value\n        } = nNode;\n\n        if (type === \"function\" && isUrlFunc.test(value)) {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            } // eslint-disable-next-line no-continue\n\n\n            continue;\n          }\n\n          const {\n            nodes\n          } = nNode;\n          const isStringValue = nodes.length !== 0 && nodes[0].type === \"string\";\n          let url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n          url = (0, _utils.normalizeUrl)(url, isStringValue);\n          const {\n            requestable,\n            needResolve\n          } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n          if (!requestable) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n\n          const queryParts = url.split(\"!\");\n          let prefix;\n\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: getNodeFromUrlFunc(nNode),\n            prefix,\n            url,\n            needQuotes: false,\n            needResolve\n          });\n        } else if (type === \"string\") {\n          needIgnore = getWebpackIgnoreCommentValue(innerIndex, valueNode.nodes);\n\n          if (isIgnoreOnDeclaration && typeof needIgnore === \"undefined\" || needIgnore) {\n            if (needIgnore) {\n              // eslint-disable-next-line no-undefined\n              needIgnore = undefined;\n            } // eslint-disable-next-line no-continue\n\n\n            continue;\n          }\n\n          let url = (0, _utils.normalizeUrl)(value, true);\n          const {\n            requestable,\n            needResolve\n          } = shouldHandleURL(url, declaration, result, options); // Do not traverse inside `url`\n\n          if (!requestable) {\n            // eslint-disable-next-line consistent-return\n            return false;\n          }\n\n          const queryParts = url.split(\"!\");\n          let prefix;\n\n          if (queryParts.length > 1) {\n            url = queryParts.pop();\n            prefix = queryParts.join(\"!\");\n          }\n\n          parsedURLs.push({\n            declaration,\n            parsed,\n            node: nNode,\n            prefix,\n            url,\n            needQuotes: true,\n            needResolve\n          });\n        }\n      } // Do not traverse inside `image-set`\n      // eslint-disable-next-line consistent-return\n\n\n      return false;\n    }\n  }); // eslint-disable-next-line consistent-return\n\n  return parsedURLs;\n}\n\nconst plugin = (options = {}) => {\n  return {\n    postcssPlugin: \"postcss-url-parser\",\n\n    prepare(result) {\n      const parsedDeclarations = [];\n      return {\n        Declaration(declaration) {\n          const {\n            isSupportDataURL,\n            isSupportAbsoluteURL\n          } = options;\n          const parsedURL = parseDeclaration(declaration, \"value\", result, {\n            isSupportDataURL,\n            isSupportAbsoluteURL\n          });\n\n          if (!parsedURL) {\n            return;\n          }\n\n          parsedDeclarations.push(...parsedURL);\n        },\n\n        async OnceExit() {\n          if (parsedDeclarations.length === 0) {\n            return;\n          }\n\n          const resolvedDeclarations = await Promise.all(parsedDeclarations.map(async parsedDeclaration => {\n            const {\n              url,\n              needResolve\n            } = parsedDeclaration;\n\n            if (options.filter) {\n              const needKeep = await options.filter(url);\n\n              if (!needKeep) {\n                // eslint-disable-next-line consistent-return\n                return;\n              }\n            }\n\n            if (!needResolve) {\n              // eslint-disable-next-line consistent-return\n              return parsedDeclaration;\n            }\n\n            const splittedUrl = url.split(/(\\?)?#/);\n            const [pathname, query, hashOrQuery] = splittedUrl;\n            let hash = query ? \"?\" : \"\";\n            hash += hashOrQuery ? `#${hashOrQuery}` : \"\";\n            const {\n              resolver,\n              rootContext\n            } = options;\n            const request = (0, _utils.requestify)(pathname, rootContext, Boolean(resolver));\n\n            if (!resolver) {\n              // eslint-disable-next-line consistent-return\n              return { ...parsedDeclaration,\n                url: request,\n                hash\n              };\n            }\n\n            const resolvedURL = await (0, _utils.resolveRequests)(resolver, options.context, [...new Set([request, url])]);\n\n            if (!resolvedURL) {\n              // eslint-disable-next-line consistent-return\n              return;\n            } // eslint-disable-next-line consistent-return\n\n\n            return { ...parsedDeclaration,\n              url: resolvedURL,\n              hash\n            };\n          }));\n          const urlToNameMap = new Map();\n          const urlToReplacementMap = new Map();\n          let hasUrlImportHelper = false;\n\n          for (let index = 0; index <= resolvedDeclarations.length - 1; index++) {\n            const item = resolvedDeclarations[index];\n\n            if (!item) {\n              // eslint-disable-next-line no-continue\n              continue;\n            }\n\n            if (!hasUrlImportHelper) {\n              options.imports.push({\n                type: \"get_url_import\",\n                importName: \"___CSS_LOADER_GET_URL_IMPORT___\",\n                url: options.urlHandler(require.resolve(\"../runtime/getUrl.js\")),\n                index: -1\n              });\n              hasUrlImportHelper = true;\n            }\n\n            const {\n              url,\n              prefix\n            } = item;\n            const newUrl = prefix ? `${prefix}!${url}` : url;\n            let importName = urlToNameMap.get(newUrl);\n\n            if (!importName) {\n              importName = `___CSS_LOADER_URL_IMPORT_${urlToNameMap.size}___`;\n              urlToNameMap.set(newUrl, importName);\n              options.imports.push({\n                type: \"url\",\n                importName,\n                url: options.resolver ? options.urlHandler(newUrl) : JSON.stringify(newUrl),\n                index\n              });\n            }\n\n            const {\n              hash,\n              needQuotes\n            } = item;\n            const replacementKey = JSON.stringify({\n              newUrl,\n              hash,\n              needQuotes\n            });\n            let replacementName = urlToReplacementMap.get(replacementKey);\n\n            if (!replacementName) {\n              replacementName = `___CSS_LOADER_URL_REPLACEMENT_${urlToReplacementMap.size}___`;\n              urlToReplacementMap.set(replacementKey, replacementName);\n              options.replacements.push({\n                replacementName,\n                importName,\n                hash,\n                needQuotes\n              });\n            } // eslint-disable-next-line no-param-reassign\n\n\n            item.node.type = \"word\"; // eslint-disable-next-line no-param-reassign\n\n            item.node.value = replacementName; // eslint-disable-next-line no-param-reassign\n\n            item.declaration.value = item.parsed.toString();\n          }\n        }\n\n      };\n    }\n\n  };\n};\n\nplugin.postcss = true;\nvar _default = plugin;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}