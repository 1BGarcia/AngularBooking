{"ast":null,"code":"import _asyncToGenerator from \"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport process from 'node:process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport fastGlob from 'fast-glob';\nimport gitIgnore from 'ignore';\nimport slash from 'slash';\nimport toPath from './to-path.js';\nconst DEFAULT_IGNORE = ['**/node_modules/**', '**/flow-typed/**', '**/coverage/**', '**/.git'];\n\nconst mapGitIgnorePatternTo = base => ignore => {\n  if (ignore.startsWith('!')) {\n    return '!' + path.posix.join(base, ignore.slice(1));\n  }\n\n  return path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, options) => {\n  const base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n  return content.split(/\\r?\\n/).filter(Boolean).filter(line => !line.startsWith('#')).map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n  const ignores = gitIgnore();\n\n  for (const file of files) {\n    ignores.add(parseGitIgnore(file.content, {\n      cwd: file.cwd,\n      fileName: file.filePath\n    }));\n  }\n\n  return ignores;\n};\n\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n  cwd = slash(cwd);\n\n  if (path.isAbsolute(p)) {\n    if (slash(p).startsWith(cwd)) {\n      return p;\n    }\n\n    throw new Error(`Path ${p} is not in cwd ${cwd}`);\n  }\n\n  return path.join(cwd, p);\n};\n\nconst getIsIgnoredPredicate = (ignores, cwd) => p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, toPath(p.path || p)))));\n\nconst getFile = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (file, cwd) {\n    const filePath = path.join(cwd, file);\n    const content = yield fs.promises.readFile(filePath, 'utf8');\n    return {\n      cwd,\n      filePath,\n      content\n    };\n  });\n\n  return function getFile(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst getFileSync = (file, cwd) => {\n  const filePath = path.join(cwd, file);\n  const content = fs.readFileSync(filePath, 'utf8');\n  return {\n    cwd,\n    filePath,\n    content\n  };\n};\n\nconst normalizeOptions = ({\n  ignore = [],\n  cwd = slash(process.cwd())\n} = {}) => ({\n  ignore: [...DEFAULT_IGNORE, ...ignore],\n  cwd: toPath(cwd)\n});\n\nexport const isGitIgnored = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (options) {\n    options = normalizeOptions(options);\n    const paths = yield fastGlob('**/.gitignore', options);\n    const files = yield Promise.all(paths.map(file => getFile(file, options.cwd)));\n    const ignores = reduceIgnore(files);\n    return getIsIgnoredPredicate(ignores, options.cwd);\n  });\n\n  return function isGitIgnored(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport const isGitIgnoredSync = options => {\n  options = normalizeOptions(options);\n  const paths = fastGlob.sync('**/.gitignore', options);\n  const files = paths.map(file => getFileSync(file, options.cwd));\n  const ignores = reduceIgnore(files);\n  return getIsIgnoredPredicate(ignores, options.cwd);\n};","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/globby/gitignore.js"],"names":["process","fs","path","fastGlob","gitIgnore","slash","toPath","DEFAULT_IGNORE","mapGitIgnorePatternTo","base","ignore","startsWith","posix","join","slice","parseGitIgnore","content","options","relative","cwd","dirname","fileName","split","filter","Boolean","line","map","reduceIgnore","files","ignores","file","add","filePath","ensureAbsolutePathForCwd","p","isAbsolute","Error","getIsIgnoredPredicate","getFile","promises","readFile","getFileSync","readFileSync","normalizeOptions","isGitIgnored","paths","Promise","all","isGitIgnoredSync","sync"],"mappings":"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","sourcesContent":["import process from 'node:process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport fastGlob from 'fast-glob';\nimport gitIgnore from 'ignore';\nimport slash from 'slash';\nimport toPath from './to-path.js';\n\nconst DEFAULT_IGNORE = [\n\t'**/node_modules/**',\n\t'**/flow-typed/**',\n\t'**/coverage/**',\n\t'**/.git',\n];\n\nconst mapGitIgnorePatternTo = base => ignore => {\n\tif (ignore.startsWith('!')) {\n\t\treturn '!' + path.posix.join(base, ignore.slice(1));\n\t}\n\n\treturn path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, options) => {\n\tconst base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n\n\treturn content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(Boolean)\n\t\t.filter(line => !line.startsWith('#'))\n\t\t.map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n\tconst ignores = gitIgnore();\n\tfor (const file of files) {\n\t\tignores.add(parseGitIgnore(file.content, {\n\t\t\tcwd: file.cwd,\n\t\t\tfileName: file.filePath,\n\t\t}));\n\t}\n\n\treturn ignores;\n};\n\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n\tcwd = slash(cwd);\n\tif (path.isAbsolute(p)) {\n\t\tif (slash(p).startsWith(cwd)) {\n\t\t\treturn p;\n\t\t}\n\n\t\tthrow new Error(`Path ${p} is not in cwd ${cwd}`);\n\t}\n\n\treturn path.join(cwd, p);\n};\n\nconst getIsIgnoredPredicate = (ignores, cwd) => p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, toPath(p.path || p)))));\n\nconst getFile = async (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = await fs.promises.readFile(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent,\n\t};\n};\n\nconst getFileSync = (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = fs.readFileSync(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent,\n\t};\n};\n\nconst normalizeOptions = ({\n\tignore = [],\n\tcwd = slash(process.cwd()),\n} = {}) => ({ignore: [...DEFAULT_IGNORE, ...ignore], cwd: toPath(cwd)});\n\nexport const isGitIgnored = async options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = await fastGlob('**/.gitignore', options);\n\n\tconst files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredicate(ignores, options.cwd);\n};\n\nexport const isGitIgnoredSync = options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = fastGlob.sync('**/.gitignore', options);\n\n\tconst files = paths.map(file => getFileSync(file, options.cwd));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredicate(ignores, options.cwd);\n};\n"]},"metadata":{},"sourceType":"module"}