{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLessImplementation = getLessImplementation;\nexports.getLessOptions = getLessOptions;\nexports.isUnsupportedUrl = isUnsupportedUrl;\nexports.normalizeSourceMap = normalizeSourceMap;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _full = require(\"klona/full\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint-disable class-methods-use-this */\n\n\nconst trailingSlash = /[/\\\\]$/; // This somewhat changed in Less 3.x. Now the file name comes without the\n// automatically added extension whereas the extension is passed in as `options.ext`.\n// So, if the file name matches this regexp, we simply ignore the proposed extension.\n\nconst IS_SPECIAL_MODULE_IMPORT = /^~[^/]+$/; // `[drive_letter]:\\` + `\\\\[server]\\[sharename]\\`\n\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i; // Examples:\n// - ~package\n// - ~package/\n// - ~@org\n// - ~@org/\n// - ~@org/package\n// - ~@org/package/\n\nconst IS_MODULE_IMPORT = /^~([^/]+|[^/]+\\/|@[^/]+[/][^/]+|@[^/]+\\/?|@[^/]+[/][^/]+\\/)$/;\nconst MODULE_REQUEST_REGEX = /^[^?]*~/;\n/**\n * Creates a Less plugin that uses webpack's resolving engine that is provided by the loaderContext.\n *\n * @param {LoaderContext} loaderContext\n * @param {object} implementation\n * @returns {LessPlugin}\n */\n\nfunction createWebpackLessPlugin(loaderContext, implementation) {\n  const resolve = loaderContext.getResolve({\n    dependencyType: \"less\",\n    conditionNames: [\"less\", \"style\"],\n    mainFields: [\"less\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"index\", \"...\"],\n    extensions: [\".less\", \".css\"],\n    preferRelative: true\n  });\n\n  class WebpackFileManager extends implementation.FileManager {\n    supports(filename) {\n      if (filename[0] === \"/\" || IS_NATIVE_WIN32_PATH.test(filename)) {\n        return true;\n      }\n\n      if (this.isPathAbsolute(filename)) {\n        return false;\n      }\n\n      return true;\n    } // Sync resolving is used at least by the `data-uri` function.\n    // This file manager doesn't know how to do it, so let's delegate it\n    // to the default file manager of Less.\n    // We could probably use loaderContext.resolveSync, but it's deprecated,\n    // see https://webpack.js.org/api/loaders/#this-resolvesync\n\n\n    supportsSync() {\n      return false;\n    }\n\n    resolveFilename(filename, currentDirectory) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        // Less is giving us trailing slashes, but the context should have no trailing slash\n        const context = currentDirectory.replace(trailingSlash, \"\");\n        let request = filename; // A `~` makes the url an module\n\n        if (MODULE_REQUEST_REGEX.test(filename)) {\n          request = request.replace(MODULE_REQUEST_REGEX, \"\");\n        }\n\n        if (IS_MODULE_IMPORT.test(filename)) {\n          request = request[request.length - 1] === \"/\" ? request : `${request}/`;\n        }\n\n        return _this.resolveRequests(context, [...new Set([request, filename])]);\n      })();\n    }\n\n    resolveRequests(context, possibleRequests) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        if (possibleRequests.length === 0) {\n          return Promise.reject();\n        }\n\n        let result;\n\n        try {\n          result = yield resolve(context, possibleRequests[0]);\n        } catch (error) {\n          const [, ...tailPossibleRequests] = possibleRequests;\n\n          if (tailPossibleRequests.length === 0) {\n            throw error;\n          }\n\n          result = yield _this2.resolveRequests(context, tailPossibleRequests);\n        }\n\n        return result;\n      })();\n    }\n\n    loadFile(filename, ...args) {\n      var _superprop_getLoadFile = () => super.loadFile,\n          _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        let result;\n\n        try {\n          if (IS_SPECIAL_MODULE_IMPORT.test(filename)) {\n            const error = new Error();\n            error.type = \"Next\";\n            throw error;\n          }\n\n          result = yield _superprop_getLoadFile().call(_this3, filename, ...args);\n        } catch (error) {\n          if (error.type !== \"File\" && error.type !== \"Next\") {\n            return Promise.reject(error);\n          }\n\n          try {\n            result = yield _this3.resolveFilename(filename, ...args);\n          } catch (webpackResolveError) {\n            error.message = `Less resolver error:\\n${error.message}\\n\\n` + `Webpack resolver error details:\\n${webpackResolveError.details}\\n\\n` + `Webpack resolver error missing:\\n${webpackResolveError.missing}\\n\\n`;\n            return Promise.reject(error);\n          }\n\n          loaderContext.addDependency(result);\n          return _superprop_getLoadFile().call(_this3, result, ...args);\n        }\n\n        loaderContext.addDependency(_path.default.normalize(result.filename));\n        return result;\n      })();\n    }\n\n  }\n\n  return {\n    install(lessInstance, pluginManager) {\n      pluginManager.addFileManager(new WebpackFileManager());\n    },\n\n    minVersion: [3, 0, 0]\n  };\n}\n/**\n * Get the less options from the loader context and normalizes its values\n *\n * @param {object} loaderContext\n * @param {object} loaderOptions\n * @param {object} implementation\n * @returns {Object}\n */\n\n\nfunction getLessOptions(loaderContext, loaderOptions, implementation) {\n  const options = (0, _full.klona)(typeof loaderOptions.lessOptions === \"function\" ? loaderOptions.lessOptions(loaderContext) || {} : loaderOptions.lessOptions || {});\n  const lessOptions = {\n    plugins: [],\n    relativeUrls: true,\n    // We need to set the filename because otherwise our WebpackFileManager will receive an undefined path for the entry\n    filename: loaderContext.resourcePath,\n    ...options\n  };\n  const shouldUseWebpackImporter = typeof loaderOptions.webpackImporter === \"boolean\" ? loaderOptions.webpackImporter : true;\n\n  if (shouldUseWebpackImporter) {\n    lessOptions.plugins.unshift(createWebpackLessPlugin(loaderContext, implementation));\n  }\n\n  lessOptions.plugins.unshift({\n    install(lessProcessor, pluginManager) {\n      // eslint-disable-next-line no-param-reassign\n      pluginManager.webpackLoaderContext = loaderContext;\n      lessOptions.pluginManager = pluginManager;\n    }\n\n  });\n  return lessOptions;\n}\n\nfunction isUnsupportedUrl(url) {\n  // Is Windows path\n  if (IS_NATIVE_WIN32_PATH.test(url)) {\n    return false;\n  } // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n  // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\n\n\n  return /^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(url);\n}\n\nfunction normalizeSourceMap(map) {\n  const newMap = map; // map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  delete newMap.file; // eslint-disable-next-line no-param-reassign\n\n  newMap.sourceRoot = \"\"; // `less` returns POSIX paths, that's why we need to transform them back to native paths.\n  // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => _path.default.normalize(source));\n  return newMap;\n}\n\nfunction getLessImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n\n  if (!implementation || typeof implementation === \"string\") {\n    const lessImplPkg = implementation || \"less\";\n\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(lessImplPkg);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  } // eslint-disable-next-line consistent-return\n\n\n  return resolvedImplementation;\n}","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/less-loader/dist/utils.js"],"names":["Object","defineProperty","exports","value","getLessImplementation","getLessOptions","isUnsupportedUrl","normalizeSourceMap","_path","_interopRequireDefault","require","_full","obj","__esModule","default","trailingSlash","IS_SPECIAL_MODULE_IMPORT","IS_NATIVE_WIN32_PATH","IS_MODULE_IMPORT","MODULE_REQUEST_REGEX","createWebpackLessPlugin","loaderContext","implementation","resolve","getResolve","dependencyType","conditionNames","mainFields","mainFiles","extensions","preferRelative","WebpackFileManager","FileManager","supports","filename","test","isPathAbsolute","supportsSync","resolveFilename","currentDirectory","context","replace","request","length","resolveRequests","Set","possibleRequests","Promise","reject","result","error","tailPossibleRequests","loadFile","args","Error","type","webpackResolveError","message","details","missing","addDependency","normalize","install","lessInstance","pluginManager","addFileManager","minVersion","loaderOptions","options","klona","lessOptions","plugins","relativeUrls","resourcePath","shouldUseWebpackImporter","webpackImporter","unshift","lessProcessor","webpackLoaderContext","url","map","newMap","file","sourceRoot","sources","source","resolvedImplementation","lessImplPkg","emitError"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLessImplementation = getLessImplementation;\nexports.getLessOptions = getLessOptions;\nexports.isUnsupportedUrl = isUnsupportedUrl;\nexports.normalizeSourceMap = normalizeSourceMap;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _full = require(\"klona/full\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable class-methods-use-this */\nconst trailingSlash = /[/\\\\]$/; // This somewhat changed in Less 3.x. Now the file name comes without the\n// automatically added extension whereas the extension is passed in as `options.ext`.\n// So, if the file name matches this regexp, we simply ignore the proposed extension.\n\nconst IS_SPECIAL_MODULE_IMPORT = /^~[^/]+$/; // `[drive_letter]:\\` + `\\\\[server]\\[sharename]\\`\n\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i; // Examples:\n// - ~package\n// - ~package/\n// - ~@org\n// - ~@org/\n// - ~@org/package\n// - ~@org/package/\n\nconst IS_MODULE_IMPORT = /^~([^/]+|[^/]+\\/|@[^/]+[/][^/]+|@[^/]+\\/?|@[^/]+[/][^/]+\\/)$/;\nconst MODULE_REQUEST_REGEX = /^[^?]*~/;\n/**\n * Creates a Less plugin that uses webpack's resolving engine that is provided by the loaderContext.\n *\n * @param {LoaderContext} loaderContext\n * @param {object} implementation\n * @returns {LessPlugin}\n */\n\nfunction createWebpackLessPlugin(loaderContext, implementation) {\n  const resolve = loaderContext.getResolve({\n    dependencyType: \"less\",\n    conditionNames: [\"less\", \"style\"],\n    mainFields: [\"less\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"index\", \"...\"],\n    extensions: [\".less\", \".css\"],\n    preferRelative: true\n  });\n\n  class WebpackFileManager extends implementation.FileManager {\n    supports(filename) {\n      if (filename[0] === \"/\" || IS_NATIVE_WIN32_PATH.test(filename)) {\n        return true;\n      }\n\n      if (this.isPathAbsolute(filename)) {\n        return false;\n      }\n\n      return true;\n    } // Sync resolving is used at least by the `data-uri` function.\n    // This file manager doesn't know how to do it, so let's delegate it\n    // to the default file manager of Less.\n    // We could probably use loaderContext.resolveSync, but it's deprecated,\n    // see https://webpack.js.org/api/loaders/#this-resolvesync\n\n\n    supportsSync() {\n      return false;\n    }\n\n    async resolveFilename(filename, currentDirectory) {\n      // Less is giving us trailing slashes, but the context should have no trailing slash\n      const context = currentDirectory.replace(trailingSlash, \"\");\n      let request = filename; // A `~` makes the url an module\n\n      if (MODULE_REQUEST_REGEX.test(filename)) {\n        request = request.replace(MODULE_REQUEST_REGEX, \"\");\n      }\n\n      if (IS_MODULE_IMPORT.test(filename)) {\n        request = request[request.length - 1] === \"/\" ? request : `${request}/`;\n      }\n\n      return this.resolveRequests(context, [...new Set([request, filename])]);\n    }\n\n    async resolveRequests(context, possibleRequests) {\n      if (possibleRequests.length === 0) {\n        return Promise.reject();\n      }\n\n      let result;\n\n      try {\n        result = await resolve(context, possibleRequests[0]);\n      } catch (error) {\n        const [, ...tailPossibleRequests] = possibleRequests;\n\n        if (tailPossibleRequests.length === 0) {\n          throw error;\n        }\n\n        result = await this.resolveRequests(context, tailPossibleRequests);\n      }\n\n      return result;\n    }\n\n    async loadFile(filename, ...args) {\n      let result;\n\n      try {\n        if (IS_SPECIAL_MODULE_IMPORT.test(filename)) {\n          const error = new Error();\n          error.type = \"Next\";\n          throw error;\n        }\n\n        result = await super.loadFile(filename, ...args);\n      } catch (error) {\n        if (error.type !== \"File\" && error.type !== \"Next\") {\n          return Promise.reject(error);\n        }\n\n        try {\n          result = await this.resolveFilename(filename, ...args);\n        } catch (webpackResolveError) {\n          error.message = `Less resolver error:\\n${error.message}\\n\\n` + `Webpack resolver error details:\\n${webpackResolveError.details}\\n\\n` + `Webpack resolver error missing:\\n${webpackResolveError.missing}\\n\\n`;\n          return Promise.reject(error);\n        }\n\n        loaderContext.addDependency(result);\n        return super.loadFile(result, ...args);\n      }\n\n      loaderContext.addDependency(_path.default.normalize(result.filename));\n      return result;\n    }\n\n  }\n\n  return {\n    install(lessInstance, pluginManager) {\n      pluginManager.addFileManager(new WebpackFileManager());\n    },\n\n    minVersion: [3, 0, 0]\n  };\n}\n/**\n * Get the less options from the loader context and normalizes its values\n *\n * @param {object} loaderContext\n * @param {object} loaderOptions\n * @param {object} implementation\n * @returns {Object}\n */\n\n\nfunction getLessOptions(loaderContext, loaderOptions, implementation) {\n  const options = (0, _full.klona)(typeof loaderOptions.lessOptions === \"function\" ? loaderOptions.lessOptions(loaderContext) || {} : loaderOptions.lessOptions || {});\n  const lessOptions = {\n    plugins: [],\n    relativeUrls: true,\n    // We need to set the filename because otherwise our WebpackFileManager will receive an undefined path for the entry\n    filename: loaderContext.resourcePath,\n    ...options\n  };\n  const shouldUseWebpackImporter = typeof loaderOptions.webpackImporter === \"boolean\" ? loaderOptions.webpackImporter : true;\n\n  if (shouldUseWebpackImporter) {\n    lessOptions.plugins.unshift(createWebpackLessPlugin(loaderContext, implementation));\n  }\n\n  lessOptions.plugins.unshift({\n    install(lessProcessor, pluginManager) {\n      // eslint-disable-next-line no-param-reassign\n      pluginManager.webpackLoaderContext = loaderContext;\n      lessOptions.pluginManager = pluginManager;\n    }\n\n  });\n  return lessOptions;\n}\n\nfunction isUnsupportedUrl(url) {\n  // Is Windows path\n  if (IS_NATIVE_WIN32_PATH.test(url)) {\n    return false;\n  } // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n  // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\n\n\n  return /^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(url);\n}\n\nfunction normalizeSourceMap(map) {\n  const newMap = map; // map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  delete newMap.file; // eslint-disable-next-line no-param-reassign\n\n  newMap.sourceRoot = \"\"; // `less` returns POSIX paths, that's why we need to transform them back to native paths.\n  // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => _path.default.normalize(source));\n  return newMap;\n}\n\nfunction getLessImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n\n  if (!implementation || typeof implementation === \"string\") {\n    const lessImplPkg = implementation || \"less\";\n\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(lessImplPkg);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  } // eslint-disable-next-line consistent-return\n\n\n  return resolvedImplementation;\n}"]},"metadata":{},"sourceType":"script"}