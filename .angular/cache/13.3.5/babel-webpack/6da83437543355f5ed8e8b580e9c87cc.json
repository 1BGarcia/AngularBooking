{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AngularWebpackPlugin = void 0;\n\nconst assert_1 = require(\"assert\");\n\nconst crypto_1 = require(\"crypto\");\n\nconst ts = __importStar(require(\"typescript\"));\n\nconst ngcc_processor_1 = require(\"../ngcc_processor\");\n\nconst paths_plugin_1 = require(\"../paths-plugin\");\n\nconst resource_loader_1 = require(\"../resource_loader\");\n\nconst cache_1 = require(\"./cache\");\n\nconst diagnostics_1 = require(\"./diagnostics\");\n\nconst host_1 = require(\"./host\");\n\nconst paths_1 = require(\"./paths\");\n\nconst symbol_1 = require(\"./symbol\");\n\nconst system_1 = require(\"./system\");\n\nconst transformation_1 = require(\"./transformation\");\n/**\n * The threshold used to determine whether Angular file diagnostics should optimize for full programs\n * or single files. If the number of affected files for a build is more than the threshold, full\n * program optimization will be used.\n */\n\n\nconst DIAGNOSTICS_AFFECTED_THRESHOLD = 1;\n\nfunction initializeNgccProcessor(compiler, tsconfig, compilerNgccModule) {\n  var _a, _b, _c;\n\n  const {\n    inputFileSystem,\n    options: webpackOptions\n  } = compiler;\n  const mainFields = (_c = (_b = (_a = webpackOptions.resolve) === null || _a === void 0 ? void 0 : _a.mainFields) === null || _b === void 0 ? void 0 : _b.flat()) !== null && _c !== void 0 ? _c : [];\n  const errors = [];\n  const warnings = [];\n  const resolver = compiler.resolverFactory.get('normal', {\n    // Caching must be disabled because it causes the resolver to become async after a rebuild\n    cache: false,\n    extensions: ['.json'],\n    useSyncFileSystemCalls: true\n  }); // The compilerNgccModule field is guaranteed to be defined during a compilation\n  // due to the `beforeCompile` hook. Usage of this property accessor prior to the\n  // hook execution is an implementation error.\n\n  assert_1.strict.ok(compilerNgccModule, `'@angular/compiler-cli/ngcc' used prior to Webpack compilation.`);\n  const processor = new ngcc_processor_1.NgccProcessor(compilerNgccModule, mainFields, warnings, errors, compiler.context, tsconfig, inputFileSystem, resolver);\n  return {\n    processor,\n    errors,\n    warnings\n  };\n}\n\nconst PLUGIN_NAME = 'angular-compiler';\nconst compilationFileEmitters = new WeakMap();\n\nclass AngularWebpackPlugin {\n  constructor(options = {}) {\n    this.fileDependencies = new Map();\n    this.requiredFilesToEmit = new Set();\n    this.requiredFilesToEmitCache = new Map();\n    this.fileEmitHistory = new Map();\n    this.pluginOptions = {\n      emitClassMetadata: false,\n      emitNgModuleScope: false,\n      jitMode: false,\n      fileReplacements: {},\n      substitutions: {},\n      directTemplateLoading: true,\n      tsconfig: 'tsconfig.json',\n      ...options\n    };\n  }\n\n  get compilerCli() {\n    // The compilerCliModule field is guaranteed to be defined during a compilation\n    // due to the `beforeCompile` hook. Usage of this property accessor prior to the\n    // hook execution is an implementation error.\n    assert_1.strict.ok(this.compilerCliModule, `'@angular/compiler-cli' used prior to Webpack compilation.`);\n    return this.compilerCliModule;\n  }\n\n  get options() {\n    return this.pluginOptions;\n  } // eslint-disable-next-line max-lines-per-function\n\n\n  apply(compiler) {\n    var _this = this;\n\n    const {\n      NormalModuleReplacementPlugin,\n      util\n    } = compiler.webpack; // Setup file replacements with webpack\n\n    for (const [key, value] of Object.entries(this.pluginOptions.fileReplacements)) {\n      new NormalModuleReplacementPlugin(new RegExp('^' + key.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&') + '$'), value).apply(compiler);\n    } // Set resolver options\n\n\n    const pathsPlugin = new paths_plugin_1.TypeScriptPathsPlugin();\n    compiler.hooks.afterResolvers.tap(PLUGIN_NAME, compiler => {\n      // When Ivy is enabled we need to add the fields added by NGCC\n      // to take precedence over the provided mainFields.\n      // NGCC adds fields in package.json suffixed with '_ivy_ngcc'\n      // Example: module -> module__ivy_ngcc\n      compiler.resolverFactory.hooks.resolveOptions.for('normal').tap(PLUGIN_NAME, resolveOptions => {\n        var _a, _b;\n\n        const originalMainFields = resolveOptions.mainFields;\n        const ivyMainFields = (_a = originalMainFields === null || originalMainFields === void 0 ? void 0 : originalMainFields.flat().map(f => `${f}_ivy_ngcc`)) !== null && _a !== void 0 ? _a : [];\n        (_b = resolveOptions.plugins) !== null && _b !== void 0 ? _b : resolveOptions.plugins = [];\n        resolveOptions.plugins.push(pathsPlugin); // https://github.com/webpack/webpack/issues/11635#issuecomment-707016779\n\n        return util.cleverMerge(resolveOptions, {\n          mainFields: [...ivyMainFields, '...']\n        });\n      });\n    }); // Load the compiler-cli if not already available\n\n    compiler.hooks.beforeCompile.tapPromise(PLUGIN_NAME, () => this.initializeCompilerCli());\n    let ngccProcessor;\n    let resourceLoader;\n    let previousUnused;\n    compiler.hooks.thisCompilation.tap(PLUGIN_NAME, compilation => {\n      // Register plugin to ensure deterministic emit order in multi-plugin usage\n      const emitRegistration = this.registerWithCompilation(compilation);\n      this.watchMode = compiler.watchMode; // Initialize webpack cache\n\n      if (!this.webpackCache && compilation.options.cache) {\n        this.webpackCache = compilation.getCache(PLUGIN_NAME);\n      } // Initialize the resource loader if not already setup\n\n\n      if (!resourceLoader) {\n        resourceLoader = new resource_loader_1.WebpackResourceLoader(this.watchMode);\n      } // Initialize and process eager ngcc if not already setup\n\n\n      if (!ngccProcessor) {\n        const {\n          processor,\n          errors,\n          warnings\n        } = initializeNgccProcessor(compiler, this.pluginOptions.tsconfig, this.compilerNgccModule);\n        processor.process();\n        warnings.forEach(warning => (0, diagnostics_1.addWarning)(compilation, warning));\n        errors.forEach(error => (0, diagnostics_1.addError)(compilation, error));\n        ngccProcessor = processor;\n      } // Setup and read TypeScript and Angular compiler configuration\n\n\n      const {\n        compilerOptions,\n        rootNames,\n        errors\n      } = this.loadConfiguration(); // Create diagnostics reporter and report configuration file errors\n\n      const diagnosticsReporter = (0, diagnostics_1.createDiagnosticsReporter)(compilation, diagnostic => this.compilerCli.formatDiagnostics([diagnostic]));\n      diagnosticsReporter(errors); // Update TypeScript path mapping plugin with new configuration\n\n      pathsPlugin.update(compilerOptions); // Create a Webpack-based TypeScript compiler host\n\n      const system = (0, system_1.createWebpackSystem)( // Webpack lacks an InputFileSytem type definition with sync functions\n      compiler.inputFileSystem, (0, paths_1.normalizePath)(compiler.context));\n      const host = ts.createIncrementalCompilerHost(compilerOptions, system); // Setup source file caching and reuse cache from previous compilation if present\n\n      let cache = this.sourceFileCache;\n      let changedFiles;\n\n      if (cache) {\n        changedFiles = new Set();\n\n        for (const changedFile of [...compiler.modifiedFiles, ...compiler.removedFiles]) {\n          const normalizedChangedFile = (0, paths_1.normalizePath)(changedFile); // Invalidate file dependencies\n\n          this.fileDependencies.delete(normalizedChangedFile); // Invalidate existing cache\n\n          cache.invalidate(normalizedChangedFile);\n          changedFiles.add(normalizedChangedFile);\n        }\n      } else {\n        // Initialize a new cache\n        cache = new cache_1.SourceFileCache(); // Only store cache if in watch mode\n\n        if (this.watchMode) {\n          this.sourceFileCache = cache;\n        }\n      }\n\n      (0, host_1.augmentHostWithCaching)(host, cache);\n      const moduleResolutionCache = ts.createModuleResolutionCache(host.getCurrentDirectory(), host.getCanonicalFileName.bind(host), compilerOptions); // Setup source file dependency collection\n\n      (0, host_1.augmentHostWithDependencyCollection)(host, this.fileDependencies, moduleResolutionCache); // Setup on demand ngcc\n\n      (0, host_1.augmentHostWithNgcc)(host, ngccProcessor, moduleResolutionCache); // Setup resource loading\n\n      resourceLoader.update(compilation, changedFiles);\n      (0, host_1.augmentHostWithResources)(host, resourceLoader, {\n        directTemplateLoading: this.pluginOptions.directTemplateLoading,\n        inlineStyleFileExtension: this.pluginOptions.inlineStyleFileExtension\n      }); // Setup source file adjustment options\n\n      (0, host_1.augmentHostWithReplacements)(host, this.pluginOptions.fileReplacements, moduleResolutionCache);\n      (0, host_1.augmentHostWithSubstitutions)(host, this.pluginOptions.substitutions); // Create the file emitter used by the webpack loader\n\n      const {\n        fileEmitter,\n        builder,\n        internalFiles\n      } = this.pluginOptions.jitMode ? this.updateJitProgram(compilerOptions, rootNames, host, diagnosticsReporter) : this.updateAotProgram(compilerOptions, rootNames, host, diagnosticsReporter, resourceLoader); // Set of files used during the unused TypeScript file analysis\n\n      const currentUnused = new Set();\n\n      for (const sourceFile of builder.getSourceFiles()) {\n        if (internalFiles === null || internalFiles === void 0 ? void 0 : internalFiles.has(sourceFile)) {\n          continue;\n        } // Ensure all program files are considered part of the compilation and will be watched.\n        // Webpack does not normalize paths. Therefore, we need to normalize the path with FS seperators.\n\n\n        compilation.fileDependencies.add((0, paths_1.externalizePath)(sourceFile.fileName)); // Add all non-declaration files to the initial set of unused files. The set will be\n        // analyzed and pruned after all Webpack modules are finished building.\n\n        if (!sourceFile.isDeclarationFile) {\n          currentUnused.add((0, paths_1.normalizePath)(sourceFile.fileName));\n        }\n      }\n\n      compilation.hooks.finishModules.tapPromise(PLUGIN_NAME, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (modules) {\n          // Rebuild any remaining AOT required modules\n          yield _this.rebuildRequiredFiles(modules, compilation, fileEmitter); // Clear out the Webpack compilation to avoid an extra retaining reference\n\n          resourceLoader === null || resourceLoader === void 0 ? void 0 : resourceLoader.clearParentCompilation(); // Analyze program for unused files\n\n          if (compilation.errors.length > 0) {\n            return;\n          }\n\n          for (const webpackModule of modules) {\n            const resource = webpackModule.resource;\n\n            if (resource) {\n              _this.markResourceUsed((0, paths_1.normalizePath)(resource), currentUnused);\n            }\n          }\n\n          for (const unused of currentUnused) {\n            if (previousUnused && previousUnused.has(unused)) {\n              continue;\n            }\n\n            (0, diagnostics_1.addWarning)(compilation, `${unused} is part of the TypeScript compilation but it's unused.\\n` + `Add only entry points to the 'files' or 'include' properties in your tsconfig.`);\n          }\n\n          previousUnused = currentUnused;\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()); // Store file emitter for loader usage\n\n      emitRegistration.update(fileEmitter);\n    });\n  }\n\n  registerWithCompilation(compilation) {\n    let fileEmitters = compilationFileEmitters.get(compilation);\n\n    if (!fileEmitters) {\n      fileEmitters = new symbol_1.FileEmitterCollection();\n      compilationFileEmitters.set(compilation, fileEmitters);\n      compilation.compiler.webpack.NormalModule.getCompilationHooks(compilation).loader.tap(PLUGIN_NAME, loaderContext => {\n        loaderContext[symbol_1.AngularPluginSymbol] = fileEmitters;\n      });\n    }\n\n    const emitRegistration = fileEmitters.register();\n    return emitRegistration;\n  }\n\n  markResourceUsed(normalizedResourcePath, currentUnused) {\n    if (!currentUnused.has(normalizedResourcePath)) {\n      return;\n    }\n\n    currentUnused.delete(normalizedResourcePath);\n    const dependencies = this.fileDependencies.get(normalizedResourcePath);\n\n    if (!dependencies) {\n      return;\n    }\n\n    for (const dependency of dependencies) {\n      this.markResourceUsed((0, paths_1.normalizePath)(dependency), currentUnused);\n    }\n  }\n\n  rebuildRequiredFiles(modules, compilation, fileEmitter) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.requiredFilesToEmit.size === 0) {\n        return;\n      }\n\n      const filesToRebuild = new Set();\n\n      for (const requiredFile of _this2.requiredFilesToEmit) {\n        const history = yield _this2.getFileEmitHistory(requiredFile);\n\n        if (history) {\n          const emitResult = yield fileEmitter(requiredFile);\n\n          if ((emitResult === null || emitResult === void 0 ? void 0 : emitResult.content) === undefined || history.length !== emitResult.content.length || emitResult.hash === undefined || Buffer.compare(history.hash, emitResult.hash) !== 0) {\n            // New emit result is different so rebuild using new emit result\n            _this2.requiredFilesToEmitCache.set(requiredFile, emitResult);\n\n            filesToRebuild.add(requiredFile);\n          }\n        } else {\n          // No emit history so rebuild\n          filesToRebuild.add(requiredFile);\n        }\n      }\n\n      if (filesToRebuild.size > 0) {\n        const rebuild = webpackModule => new Promise(resolve => compilation.rebuildModule(webpackModule, () => resolve()));\n\n        const modulesToRebuild = [];\n\n        for (const webpackModule of modules) {\n          const resource = webpackModule.resource;\n\n          if (resource && filesToRebuild.has((0, paths_1.normalizePath)(resource))) {\n            modulesToRebuild.push(webpackModule);\n          }\n        }\n\n        yield Promise.all(modulesToRebuild.map(webpackModule => rebuild(webpackModule)));\n      }\n\n      _this2.requiredFilesToEmit.clear();\n\n      _this2.requiredFilesToEmitCache.clear();\n    })();\n  }\n\n  loadConfiguration() {\n    const {\n      options: compilerOptions,\n      rootNames,\n      errors\n    } = this.compilerCli.readConfiguration(this.pluginOptions.tsconfig, this.pluginOptions.compilerOptions);\n    compilerOptions.enableIvy = true;\n    compilerOptions.noEmitOnError = false;\n    compilerOptions.suppressOutputPathCheck = true;\n    compilerOptions.outDir = undefined;\n    compilerOptions.inlineSources = compilerOptions.sourceMap;\n    compilerOptions.inlineSourceMap = false;\n    compilerOptions.mapRoot = undefined;\n    compilerOptions.sourceRoot = undefined;\n    compilerOptions.allowEmptyCodegenFiles = false;\n    compilerOptions.annotationsAs = 'decorators';\n    compilerOptions.enableResourceInlining = false;\n    return {\n      compilerOptions,\n      rootNames,\n      errors\n    };\n  }\n\n  updateAotProgram(compilerOptions, rootNames, host, diagnosticsReporter, resourceLoader) {\n    // Create the Angular specific program that contains the Angular compiler\n    const angularProgram = new this.compilerCli.NgtscProgram(rootNames, compilerOptions, host, this.ngtscNextProgram);\n    const angularCompiler = angularProgram.compiler; // The `ignoreForEmit` return value can be safely ignored when emitting. Only files\n    // that will be bundled (requested by Webpack) will be emitted. Combined with TypeScript's\n    // eliding of type only imports, this will cause type only files to be automatically ignored.\n    // Internal Angular type check files are also not resolvable by the bundler. Even if they\n    // were somehow errantly imported, the bundler would error before an emit was attempted.\n    // Diagnostics are still collected for all files which requires using `ignoreForDiagnostics`.\n\n    const {\n      ignoreForDiagnostics,\n      ignoreForEmit\n    } = angularCompiler; // SourceFile versions are required for builder programs.\n    // The wrapped host inside NgtscProgram adds additional files that will not have versions.\n\n    const typeScriptProgram = angularProgram.getTsProgram();\n    (0, host_1.augmentProgramWithVersioning)(typeScriptProgram);\n    let builder;\n\n    if (this.watchMode) {\n      builder = this.builder = ts.createEmitAndSemanticDiagnosticsBuilderProgram(typeScriptProgram, host, this.builder);\n      this.ngtscNextProgram = angularProgram;\n    } else {\n      // When not in watch mode, the startup cost of the incremental analysis can be avoided by\n      // using an abstract builder that only wraps a TypeScript program.\n      builder = ts.createAbstractBuilder(typeScriptProgram, host);\n    } // Update semantic diagnostics cache\n\n\n    const affectedFiles = new Set(); // Analyze affected files when in watch mode for incremental type checking\n\n    if ('getSemanticDiagnosticsOfNextAffectedFile' in builder) {\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        const result = builder.getSemanticDiagnosticsOfNextAffectedFile(undefined, sourceFile => {\n          // If the affected file is a TTC shim, add the shim's original source file.\n          // This ensures that changes that affect TTC are typechecked even when the changes\n          // are otherwise unrelated from a TS perspective and do not result in Ivy codegen changes.\n          // For example, changing @Input property types of a directive used in another component's\n          // template.\n          if (ignoreForDiagnostics.has(sourceFile) && sourceFile.fileName.endsWith('.ngtypecheck.ts')) {\n            // This file name conversion relies on internal compiler logic and should be converted\n            // to an official method when available. 15 is length of `.ngtypecheck.ts`\n            const originalFilename = sourceFile.fileName.slice(0, -15) + '.ts';\n            const originalSourceFile = builder.getSourceFile(originalFilename);\n\n            if (originalSourceFile) {\n              affectedFiles.add(originalSourceFile);\n            }\n\n            return true;\n          }\n\n          return false;\n        });\n\n        if (!result) {\n          break;\n        }\n\n        affectedFiles.add(result.affected);\n      }\n    } // Collect program level diagnostics\n\n\n    const diagnostics = [...angularCompiler.getOptionDiagnostics(), ...builder.getOptionsDiagnostics(), ...builder.getGlobalDiagnostics()];\n    diagnosticsReporter(diagnostics); // Collect source file specific diagnostics\n\n    for (const sourceFile of builder.getSourceFiles()) {\n      if (!ignoreForDiagnostics.has(sourceFile)) {\n        diagnosticsReporter(builder.getSyntacticDiagnostics(sourceFile));\n        diagnosticsReporter(builder.getSemanticDiagnostics(sourceFile));\n      }\n    }\n\n    const transformers = (0, transformation_1.createAotTransformers)(builder, this.pluginOptions);\n\n    const getDependencies = sourceFile => {\n      const dependencies = [];\n\n      for (const resourcePath of angularCompiler.getResourceDependencies(sourceFile)) {\n        dependencies.push(resourcePath, // Retrieve all dependencies of the resource (stylesheet imports, etc.)\n        ...resourceLoader.getResourceDependencies(resourcePath));\n      }\n\n      return dependencies;\n    }; // Required to support asynchronous resource loading\n    // Must be done before creating transformers or getting template diagnostics\n\n\n    const pendingAnalysis = angularCompiler.analyzeAsync().then(() => {\n      var _a;\n\n      this.requiredFilesToEmit.clear();\n\n      for (const sourceFile of builder.getSourceFiles()) {\n        if (sourceFile.isDeclarationFile) {\n          continue;\n        } // Collect sources that are required to be emitted\n\n\n        if (!ignoreForEmit.has(sourceFile) && !angularCompiler.incrementalDriver.safeToSkipEmit(sourceFile)) {\n          this.requiredFilesToEmit.add((0, paths_1.normalizePath)(sourceFile.fileName)); // If required to emit, diagnostics may have also changed\n\n          if (!ignoreForDiagnostics.has(sourceFile)) {\n            affectedFiles.add(sourceFile);\n          }\n        } else if (this.sourceFileCache && !affectedFiles.has(sourceFile) && !ignoreForDiagnostics.has(sourceFile)) {\n          // Use cached Angular diagnostics for unchanged and unaffected files\n          const angularDiagnostics = this.sourceFileCache.getAngularDiagnostics(sourceFile);\n\n          if (angularDiagnostics) {\n            diagnosticsReporter(angularDiagnostics);\n          }\n        }\n      } // Collect new Angular diagnostics for files affected by changes\n\n\n      const OptimizeFor = this.compilerCli.OptimizeFor;\n      const optimizeDiagnosticsFor = affectedFiles.size <= DIAGNOSTICS_AFFECTED_THRESHOLD ? OptimizeFor.SingleFile : OptimizeFor.WholeProgram;\n\n      for (const affectedFile of affectedFiles) {\n        const angularDiagnostics = angularCompiler.getDiagnosticsForFile(affectedFile, optimizeDiagnosticsFor);\n        diagnosticsReporter(angularDiagnostics);\n        (_a = this.sourceFileCache) === null || _a === void 0 ? void 0 : _a.updateAngularDiagnostics(affectedFile, angularDiagnostics);\n      }\n\n      return {\n        emitter: this.createFileEmitter(builder, (0, transformation_1.mergeTransformers)(angularCompiler.prepareEmit().transformers, transformers), getDependencies, sourceFile => {\n          this.requiredFilesToEmit.delete((0, paths_1.normalizePath)(sourceFile.fileName));\n          angularCompiler.incrementalDriver.recordSuccessfulEmit(sourceFile);\n        })\n      };\n    }).catch(err => ({\n      errorMessage: err instanceof Error ? err.message : `${err}`\n    }));\n\n    const analyzingFileEmitter = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (file) {\n        const analysis = yield pendingAnalysis;\n\n        if ('errorMessage' in analysis) {\n          throw new Error(analysis.errorMessage);\n        }\n\n        return analysis.emitter(file);\n      });\n\n      return function analyzingFileEmitter(_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return {\n      fileEmitter: analyzingFileEmitter,\n      builder,\n      internalFiles: ignoreForEmit\n    };\n  }\n\n  updateJitProgram(compilerOptions, rootNames, host, diagnosticsReporter) {\n    let builder;\n\n    if (this.watchMode) {\n      builder = this.builder = ts.createEmitAndSemanticDiagnosticsBuilderProgram(rootNames, compilerOptions, host, this.builder);\n    } else {\n      // When not in watch mode, the startup cost of the incremental analysis can be avoided by\n      // using an abstract builder that only wraps a TypeScript program.\n      builder = ts.createAbstractBuilder(rootNames, compilerOptions, host);\n    }\n\n    const diagnostics = [...builder.getOptionsDiagnostics(), ...builder.getGlobalDiagnostics(), ...builder.getSyntacticDiagnostics(), // Gather incremental semantic diagnostics\n    ...builder.getSemanticDiagnostics()];\n    diagnosticsReporter(diagnostics);\n    const transformers = (0, transformation_1.createJitTransformers)(builder, this.compilerCli, this.pluginOptions);\n    return {\n      fileEmitter: this.createFileEmitter(builder, transformers, () => []),\n      builder,\n      internalFiles: undefined\n    };\n  }\n\n  createFileEmitter(program, transformers = {}, getExtraDependencies, onAfterEmit) {\n    var _this3 = this;\n\n    return /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (file) {\n        const filePath = (0, paths_1.normalizePath)(file);\n\n        if (_this3.requiredFilesToEmitCache.has(filePath)) {\n          return _this3.requiredFilesToEmitCache.get(filePath);\n        }\n\n        const sourceFile = program.getSourceFile(filePath);\n\n        if (!sourceFile) {\n          return undefined;\n        }\n\n        let content;\n        let map;\n        program.emit(sourceFile, (filename, data) => {\n          if (filename.endsWith('.map')) {\n            map = data;\n          } else if (filename.endsWith('.js')) {\n            content = data;\n          }\n        }, undefined, undefined, transformers);\n        onAfterEmit === null || onAfterEmit === void 0 ? void 0 : onAfterEmit(sourceFile); // Capture emit history info for Angular rebuild analysis\n\n        const hash = content ? (yield _this3.addFileEmitHistory(filePath, content)).hash : undefined;\n        const dependencies = [...(_this3.fileDependencies.get(filePath) || []), ...getExtraDependencies(sourceFile)].map(paths_1.externalizePath);\n        return {\n          content,\n          map,\n          dependencies,\n          hash\n        };\n      });\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  initializeCompilerCli() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.compilerCliModule) {\n        return;\n      } // This uses a dynamic import to load `@angular/compiler-cli` which may be ESM.\n      // CommonJS code can load ESM code via a dynamic import. Unfortunately, TypeScript\n      // will currently, unconditionally downlevel dynamic import into a require call.\n      // require calls cannot load ESM code and will result in a runtime error. To workaround\n      // this, a Function constructor is used to prevent TypeScript from changing the dynamic import.\n      // Once TypeScript provides support for keeping the dynamic import this workaround can\n      // be dropped.\n\n\n      _this4.compilerCliModule = yield new Function(`return import('@angular/compiler-cli');`)();\n      _this4.compilerNgccModule = yield new Function(`return import('@angular/compiler-cli/ngcc');`)();\n    })();\n  }\n\n  addFileEmitHistory(filePath, content) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const historyData = {\n        length: content.length,\n        hash: (0, crypto_1.createHash)('md5').update(content).digest()\n      };\n\n      if (_this5.webpackCache) {\n        const history = yield _this5.getFileEmitHistory(filePath);\n\n        if (!history || Buffer.compare(history.hash, historyData.hash) !== 0) {\n          // Hash doesn't match or item doesn't exist.\n          yield _this5.webpackCache.storePromise(filePath, null, historyData);\n        }\n      } else if (_this5.watchMode) {\n        // The in memory file emit history is only required during watch mode.\n        _this5.fileEmitHistory.set(filePath, historyData);\n      }\n\n      return historyData;\n    })();\n  }\n\n  getFileEmitHistory(filePath) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this6.webpackCache ? _this6.webpackCache.getPromise(filePath, null) : _this6.fileEmitHistory.get(filePath);\n    })();\n  }\n\n}\n\nexports.AngularWebpackPlugin = AngularWebpackPlugin;","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/@ngtools/webpack/src/ivy/plugin.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","AngularWebpackPlugin","assert_1","require","crypto_1","ts","ngcc_processor_1","paths_plugin_1","resource_loader_1","cache_1","diagnostics_1","host_1","paths_1","symbol_1","system_1","transformation_1","DIAGNOSTICS_AFFECTED_THRESHOLD","initializeNgccProcessor","compiler","tsconfig","compilerNgccModule","_a","_b","_c","inputFileSystem","options","webpackOptions","mainFields","resolve","flat","errors","warnings","resolver","resolverFactory","cache","extensions","useSyncFileSystemCalls","strict","ok","processor","NgccProcessor","context","PLUGIN_NAME","compilationFileEmitters","WeakMap","constructor","fileDependencies","Map","requiredFilesToEmit","Set","requiredFilesToEmitCache","fileEmitHistory","pluginOptions","emitClassMetadata","emitNgModuleScope","jitMode","fileReplacements","substitutions","directTemplateLoading","compilerCli","compilerCliModule","apply","NormalModuleReplacementPlugin","util","webpack","key","entries","RegExp","replace","pathsPlugin","TypeScriptPathsPlugin","hooks","afterResolvers","tap","resolveOptions","for","originalMainFields","ivyMainFields","map","f","plugins","push","cleverMerge","beforeCompile","tapPromise","initializeCompilerCli","ngccProcessor","resourceLoader","previousUnused","thisCompilation","compilation","emitRegistration","registerWithCompilation","watchMode","webpackCache","getCache","WebpackResourceLoader","process","forEach","warning","addWarning","error","addError","compilerOptions","rootNames","loadConfiguration","diagnosticsReporter","createDiagnosticsReporter","diagnostic","formatDiagnostics","update","system","createWebpackSystem","normalizePath","host","createIncrementalCompilerHost","sourceFileCache","changedFiles","changedFile","modifiedFiles","removedFiles","normalizedChangedFile","delete","invalidate","add","SourceFileCache","augmentHostWithCaching","moduleResolutionCache","createModuleResolutionCache","getCurrentDirectory","getCanonicalFileName","bind","augmentHostWithDependencyCollection","augmentHostWithNgcc","augmentHostWithResources","inlineStyleFileExtension","augmentHostWithReplacements","augmentHostWithSubstitutions","fileEmitter","builder","internalFiles","updateJitProgram","updateAotProgram","currentUnused","sourceFile","getSourceFiles","has","externalizePath","fileName","isDeclarationFile","finishModules","modules","rebuildRequiredFiles","clearParentCompilation","length","webpackModule","resource","markResourceUsed","unused","fileEmitters","FileEmitterCollection","set","NormalModule","getCompilationHooks","loader","loaderContext","AngularPluginSymbol","register","normalizedResourcePath","dependencies","dependency","size","filesToRebuild","requiredFile","history","getFileEmitHistory","emitResult","content","hash","Buffer","compare","rebuild","Promise","rebuildModule","modulesToRebuild","all","clear","readConfiguration","enableIvy","noEmitOnError","suppressOutputPathCheck","outDir","inlineSources","sourceMap","inlineSourceMap","mapRoot","sourceRoot","allowEmptyCodegenFiles","annotationsAs","enableResourceInlining","angularProgram","NgtscProgram","ngtscNextProgram","angularCompiler","ignoreForDiagnostics","ignoreForEmit","typeScriptProgram","getTsProgram","augmentProgramWithVersioning","createEmitAndSemanticDiagnosticsBuilderProgram","createAbstractBuilder","affectedFiles","getSemanticDiagnosticsOfNextAffectedFile","endsWith","originalFilename","slice","originalSourceFile","getSourceFile","affected","diagnostics","getOptionDiagnostics","getOptionsDiagnostics","getGlobalDiagnostics","getSyntacticDiagnostics","getSemanticDiagnostics","transformers","createAotTransformers","getDependencies","resourcePath","getResourceDependencies","pendingAnalysis","analyzeAsync","then","incrementalDriver","safeToSkipEmit","angularDiagnostics","getAngularDiagnostics","OptimizeFor","optimizeDiagnosticsFor","SingleFile","WholeProgram","affectedFile","getDiagnosticsForFile","updateAngularDiagnostics","emitter","createFileEmitter","mergeTransformers","prepareEmit","recordSuccessfulEmit","catch","err","errorMessage","Error","message","analyzingFileEmitter","file","analysis","createJitTransformers","program","getExtraDependencies","onAfterEmit","filePath","emit","filename","data","addFileEmitHistory","Function","historyData","createHash","digest","storePromise","getPromise"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AngularWebpackPlugin = void 0;\nconst assert_1 = require(\"assert\");\nconst crypto_1 = require(\"crypto\");\nconst ts = __importStar(require(\"typescript\"));\nconst ngcc_processor_1 = require(\"../ngcc_processor\");\nconst paths_plugin_1 = require(\"../paths-plugin\");\nconst resource_loader_1 = require(\"../resource_loader\");\nconst cache_1 = require(\"./cache\");\nconst diagnostics_1 = require(\"./diagnostics\");\nconst host_1 = require(\"./host\");\nconst paths_1 = require(\"./paths\");\nconst symbol_1 = require(\"./symbol\");\nconst system_1 = require(\"./system\");\nconst transformation_1 = require(\"./transformation\");\n/**\n * The threshold used to determine whether Angular file diagnostics should optimize for full programs\n * or single files. If the number of affected files for a build is more than the threshold, full\n * program optimization will be used.\n */\nconst DIAGNOSTICS_AFFECTED_THRESHOLD = 1;\nfunction initializeNgccProcessor(compiler, tsconfig, compilerNgccModule) {\n    var _a, _b, _c;\n    const { inputFileSystem, options: webpackOptions } = compiler;\n    const mainFields = (_c = (_b = (_a = webpackOptions.resolve) === null || _a === void 0 ? void 0 : _a.mainFields) === null || _b === void 0 ? void 0 : _b.flat()) !== null && _c !== void 0 ? _c : [];\n    const errors = [];\n    const warnings = [];\n    const resolver = compiler.resolverFactory.get('normal', {\n        // Caching must be disabled because it causes the resolver to become async after a rebuild\n        cache: false,\n        extensions: ['.json'],\n        useSyncFileSystemCalls: true,\n    });\n    // The compilerNgccModule field is guaranteed to be defined during a compilation\n    // due to the `beforeCompile` hook. Usage of this property accessor prior to the\n    // hook execution is an implementation error.\n    assert_1.strict.ok(compilerNgccModule, `'@angular/compiler-cli/ngcc' used prior to Webpack compilation.`);\n    const processor = new ngcc_processor_1.NgccProcessor(compilerNgccModule, mainFields, warnings, errors, compiler.context, tsconfig, inputFileSystem, resolver);\n    return { processor, errors, warnings };\n}\nconst PLUGIN_NAME = 'angular-compiler';\nconst compilationFileEmitters = new WeakMap();\nclass AngularWebpackPlugin {\n    constructor(options = {}) {\n        this.fileDependencies = new Map();\n        this.requiredFilesToEmit = new Set();\n        this.requiredFilesToEmitCache = new Map();\n        this.fileEmitHistory = new Map();\n        this.pluginOptions = {\n            emitClassMetadata: false,\n            emitNgModuleScope: false,\n            jitMode: false,\n            fileReplacements: {},\n            substitutions: {},\n            directTemplateLoading: true,\n            tsconfig: 'tsconfig.json',\n            ...options,\n        };\n    }\n    get compilerCli() {\n        // The compilerCliModule field is guaranteed to be defined during a compilation\n        // due to the `beforeCompile` hook. Usage of this property accessor prior to the\n        // hook execution is an implementation error.\n        assert_1.strict.ok(this.compilerCliModule, `'@angular/compiler-cli' used prior to Webpack compilation.`);\n        return this.compilerCliModule;\n    }\n    get options() {\n        return this.pluginOptions;\n    }\n    // eslint-disable-next-line max-lines-per-function\n    apply(compiler) {\n        const { NormalModuleReplacementPlugin, util } = compiler.webpack;\n        // Setup file replacements with webpack\n        for (const [key, value] of Object.entries(this.pluginOptions.fileReplacements)) {\n            new NormalModuleReplacementPlugin(new RegExp('^' + key.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&') + '$'), value).apply(compiler);\n        }\n        // Set resolver options\n        const pathsPlugin = new paths_plugin_1.TypeScriptPathsPlugin();\n        compiler.hooks.afterResolvers.tap(PLUGIN_NAME, (compiler) => {\n            // When Ivy is enabled we need to add the fields added by NGCC\n            // to take precedence over the provided mainFields.\n            // NGCC adds fields in package.json suffixed with '_ivy_ngcc'\n            // Example: module -> module__ivy_ngcc\n            compiler.resolverFactory.hooks.resolveOptions\n                .for('normal')\n                .tap(PLUGIN_NAME, (resolveOptions) => {\n                var _a, _b;\n                const originalMainFields = resolveOptions.mainFields;\n                const ivyMainFields = (_a = originalMainFields === null || originalMainFields === void 0 ? void 0 : originalMainFields.flat().map((f) => `${f}_ivy_ngcc`)) !== null && _a !== void 0 ? _a : [];\n                (_b = resolveOptions.plugins) !== null && _b !== void 0 ? _b : (resolveOptions.plugins = []);\n                resolveOptions.plugins.push(pathsPlugin);\n                // https://github.com/webpack/webpack/issues/11635#issuecomment-707016779\n                return util.cleverMerge(resolveOptions, { mainFields: [...ivyMainFields, '...'] });\n            });\n        });\n        // Load the compiler-cli if not already available\n        compiler.hooks.beforeCompile.tapPromise(PLUGIN_NAME, () => this.initializeCompilerCli());\n        let ngccProcessor;\n        let resourceLoader;\n        let previousUnused;\n        compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation) => {\n            // Register plugin to ensure deterministic emit order in multi-plugin usage\n            const emitRegistration = this.registerWithCompilation(compilation);\n            this.watchMode = compiler.watchMode;\n            // Initialize webpack cache\n            if (!this.webpackCache && compilation.options.cache) {\n                this.webpackCache = compilation.getCache(PLUGIN_NAME);\n            }\n            // Initialize the resource loader if not already setup\n            if (!resourceLoader) {\n                resourceLoader = new resource_loader_1.WebpackResourceLoader(this.watchMode);\n            }\n            // Initialize and process eager ngcc if not already setup\n            if (!ngccProcessor) {\n                const { processor, errors, warnings } = initializeNgccProcessor(compiler, this.pluginOptions.tsconfig, this.compilerNgccModule);\n                processor.process();\n                warnings.forEach((warning) => (0, diagnostics_1.addWarning)(compilation, warning));\n                errors.forEach((error) => (0, diagnostics_1.addError)(compilation, error));\n                ngccProcessor = processor;\n            }\n            // Setup and read TypeScript and Angular compiler configuration\n            const { compilerOptions, rootNames, errors } = this.loadConfiguration();\n            // Create diagnostics reporter and report configuration file errors\n            const diagnosticsReporter = (0, diagnostics_1.createDiagnosticsReporter)(compilation, (diagnostic) => this.compilerCli.formatDiagnostics([diagnostic]));\n            diagnosticsReporter(errors);\n            // Update TypeScript path mapping plugin with new configuration\n            pathsPlugin.update(compilerOptions);\n            // Create a Webpack-based TypeScript compiler host\n            const system = (0, system_1.createWebpackSystem)(\n            // Webpack lacks an InputFileSytem type definition with sync functions\n            compiler.inputFileSystem, (0, paths_1.normalizePath)(compiler.context));\n            const host = ts.createIncrementalCompilerHost(compilerOptions, system);\n            // Setup source file caching and reuse cache from previous compilation if present\n            let cache = this.sourceFileCache;\n            let changedFiles;\n            if (cache) {\n                changedFiles = new Set();\n                for (const changedFile of [...compiler.modifiedFiles, ...compiler.removedFiles]) {\n                    const normalizedChangedFile = (0, paths_1.normalizePath)(changedFile);\n                    // Invalidate file dependencies\n                    this.fileDependencies.delete(normalizedChangedFile);\n                    // Invalidate existing cache\n                    cache.invalidate(normalizedChangedFile);\n                    changedFiles.add(normalizedChangedFile);\n                }\n            }\n            else {\n                // Initialize a new cache\n                cache = new cache_1.SourceFileCache();\n                // Only store cache if in watch mode\n                if (this.watchMode) {\n                    this.sourceFileCache = cache;\n                }\n            }\n            (0, host_1.augmentHostWithCaching)(host, cache);\n            const moduleResolutionCache = ts.createModuleResolutionCache(host.getCurrentDirectory(), host.getCanonicalFileName.bind(host), compilerOptions);\n            // Setup source file dependency collection\n            (0, host_1.augmentHostWithDependencyCollection)(host, this.fileDependencies, moduleResolutionCache);\n            // Setup on demand ngcc\n            (0, host_1.augmentHostWithNgcc)(host, ngccProcessor, moduleResolutionCache);\n            // Setup resource loading\n            resourceLoader.update(compilation, changedFiles);\n            (0, host_1.augmentHostWithResources)(host, resourceLoader, {\n                directTemplateLoading: this.pluginOptions.directTemplateLoading,\n                inlineStyleFileExtension: this.pluginOptions.inlineStyleFileExtension,\n            });\n            // Setup source file adjustment options\n            (0, host_1.augmentHostWithReplacements)(host, this.pluginOptions.fileReplacements, moduleResolutionCache);\n            (0, host_1.augmentHostWithSubstitutions)(host, this.pluginOptions.substitutions);\n            // Create the file emitter used by the webpack loader\n            const { fileEmitter, builder, internalFiles } = this.pluginOptions.jitMode\n                ? this.updateJitProgram(compilerOptions, rootNames, host, diagnosticsReporter)\n                : this.updateAotProgram(compilerOptions, rootNames, host, diagnosticsReporter, resourceLoader);\n            // Set of files used during the unused TypeScript file analysis\n            const currentUnused = new Set();\n            for (const sourceFile of builder.getSourceFiles()) {\n                if (internalFiles === null || internalFiles === void 0 ? void 0 : internalFiles.has(sourceFile)) {\n                    continue;\n                }\n                // Ensure all program files are considered part of the compilation and will be watched.\n                // Webpack does not normalize paths. Therefore, we need to normalize the path with FS seperators.\n                compilation.fileDependencies.add((0, paths_1.externalizePath)(sourceFile.fileName));\n                // Add all non-declaration files to the initial set of unused files. The set will be\n                // analyzed and pruned after all Webpack modules are finished building.\n                if (!sourceFile.isDeclarationFile) {\n                    currentUnused.add((0, paths_1.normalizePath)(sourceFile.fileName));\n                }\n            }\n            compilation.hooks.finishModules.tapPromise(PLUGIN_NAME, async (modules) => {\n                // Rebuild any remaining AOT required modules\n                await this.rebuildRequiredFiles(modules, compilation, fileEmitter);\n                // Clear out the Webpack compilation to avoid an extra retaining reference\n                resourceLoader === null || resourceLoader === void 0 ? void 0 : resourceLoader.clearParentCompilation();\n                // Analyze program for unused files\n                if (compilation.errors.length > 0) {\n                    return;\n                }\n                for (const webpackModule of modules) {\n                    const resource = webpackModule.resource;\n                    if (resource) {\n                        this.markResourceUsed((0, paths_1.normalizePath)(resource), currentUnused);\n                    }\n                }\n                for (const unused of currentUnused) {\n                    if (previousUnused && previousUnused.has(unused)) {\n                        continue;\n                    }\n                    (0, diagnostics_1.addWarning)(compilation, `${unused} is part of the TypeScript compilation but it's unused.\\n` +\n                        `Add only entry points to the 'files' or 'include' properties in your tsconfig.`);\n                }\n                previousUnused = currentUnused;\n            });\n            // Store file emitter for loader usage\n            emitRegistration.update(fileEmitter);\n        });\n    }\n    registerWithCompilation(compilation) {\n        let fileEmitters = compilationFileEmitters.get(compilation);\n        if (!fileEmitters) {\n            fileEmitters = new symbol_1.FileEmitterCollection();\n            compilationFileEmitters.set(compilation, fileEmitters);\n            compilation.compiler.webpack.NormalModule.getCompilationHooks(compilation).loader.tap(PLUGIN_NAME, (loaderContext) => {\n                loaderContext[symbol_1.AngularPluginSymbol] = fileEmitters;\n            });\n        }\n        const emitRegistration = fileEmitters.register();\n        return emitRegistration;\n    }\n    markResourceUsed(normalizedResourcePath, currentUnused) {\n        if (!currentUnused.has(normalizedResourcePath)) {\n            return;\n        }\n        currentUnused.delete(normalizedResourcePath);\n        const dependencies = this.fileDependencies.get(normalizedResourcePath);\n        if (!dependencies) {\n            return;\n        }\n        for (const dependency of dependencies) {\n            this.markResourceUsed((0, paths_1.normalizePath)(dependency), currentUnused);\n        }\n    }\n    async rebuildRequiredFiles(modules, compilation, fileEmitter) {\n        if (this.requiredFilesToEmit.size === 0) {\n            return;\n        }\n        const filesToRebuild = new Set();\n        for (const requiredFile of this.requiredFilesToEmit) {\n            const history = await this.getFileEmitHistory(requiredFile);\n            if (history) {\n                const emitResult = await fileEmitter(requiredFile);\n                if ((emitResult === null || emitResult === void 0 ? void 0 : emitResult.content) === undefined ||\n                    history.length !== emitResult.content.length ||\n                    emitResult.hash === undefined ||\n                    Buffer.compare(history.hash, emitResult.hash) !== 0) {\n                    // New emit result is different so rebuild using new emit result\n                    this.requiredFilesToEmitCache.set(requiredFile, emitResult);\n                    filesToRebuild.add(requiredFile);\n                }\n            }\n            else {\n                // No emit history so rebuild\n                filesToRebuild.add(requiredFile);\n            }\n        }\n        if (filesToRebuild.size > 0) {\n            const rebuild = (webpackModule) => new Promise((resolve) => compilation.rebuildModule(webpackModule, () => resolve()));\n            const modulesToRebuild = [];\n            for (const webpackModule of modules) {\n                const resource = webpackModule.resource;\n                if (resource && filesToRebuild.has((0, paths_1.normalizePath)(resource))) {\n                    modulesToRebuild.push(webpackModule);\n                }\n            }\n            await Promise.all(modulesToRebuild.map((webpackModule) => rebuild(webpackModule)));\n        }\n        this.requiredFilesToEmit.clear();\n        this.requiredFilesToEmitCache.clear();\n    }\n    loadConfiguration() {\n        const { options: compilerOptions, rootNames, errors, } = this.compilerCli.readConfiguration(this.pluginOptions.tsconfig, this.pluginOptions.compilerOptions);\n        compilerOptions.enableIvy = true;\n        compilerOptions.noEmitOnError = false;\n        compilerOptions.suppressOutputPathCheck = true;\n        compilerOptions.outDir = undefined;\n        compilerOptions.inlineSources = compilerOptions.sourceMap;\n        compilerOptions.inlineSourceMap = false;\n        compilerOptions.mapRoot = undefined;\n        compilerOptions.sourceRoot = undefined;\n        compilerOptions.allowEmptyCodegenFiles = false;\n        compilerOptions.annotationsAs = 'decorators';\n        compilerOptions.enableResourceInlining = false;\n        return { compilerOptions, rootNames, errors };\n    }\n    updateAotProgram(compilerOptions, rootNames, host, diagnosticsReporter, resourceLoader) {\n        // Create the Angular specific program that contains the Angular compiler\n        const angularProgram = new this.compilerCli.NgtscProgram(rootNames, compilerOptions, host, this.ngtscNextProgram);\n        const angularCompiler = angularProgram.compiler;\n        // The `ignoreForEmit` return value can be safely ignored when emitting. Only files\n        // that will be bundled (requested by Webpack) will be emitted. Combined with TypeScript's\n        // eliding of type only imports, this will cause type only files to be automatically ignored.\n        // Internal Angular type check files are also not resolvable by the bundler. Even if they\n        // were somehow errantly imported, the bundler would error before an emit was attempted.\n        // Diagnostics are still collected for all files which requires using `ignoreForDiagnostics`.\n        const { ignoreForDiagnostics, ignoreForEmit } = angularCompiler;\n        // SourceFile versions are required for builder programs.\n        // The wrapped host inside NgtscProgram adds additional files that will not have versions.\n        const typeScriptProgram = angularProgram.getTsProgram();\n        (0, host_1.augmentProgramWithVersioning)(typeScriptProgram);\n        let builder;\n        if (this.watchMode) {\n            builder = this.builder = ts.createEmitAndSemanticDiagnosticsBuilderProgram(typeScriptProgram, host, this.builder);\n            this.ngtscNextProgram = angularProgram;\n        }\n        else {\n            // When not in watch mode, the startup cost of the incremental analysis can be avoided by\n            // using an abstract builder that only wraps a TypeScript program.\n            builder = ts.createAbstractBuilder(typeScriptProgram, host);\n        }\n        // Update semantic diagnostics cache\n        const affectedFiles = new Set();\n        // Analyze affected files when in watch mode for incremental type checking\n        if ('getSemanticDiagnosticsOfNextAffectedFile' in builder) {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const result = builder.getSemanticDiagnosticsOfNextAffectedFile(undefined, (sourceFile) => {\n                    // If the affected file is a TTC shim, add the shim's original source file.\n                    // This ensures that changes that affect TTC are typechecked even when the changes\n                    // are otherwise unrelated from a TS perspective and do not result in Ivy codegen changes.\n                    // For example, changing @Input property types of a directive used in another component's\n                    // template.\n                    if (ignoreForDiagnostics.has(sourceFile) &&\n                        sourceFile.fileName.endsWith('.ngtypecheck.ts')) {\n                        // This file name conversion relies on internal compiler logic and should be converted\n                        // to an official method when available. 15 is length of `.ngtypecheck.ts`\n                        const originalFilename = sourceFile.fileName.slice(0, -15) + '.ts';\n                        const originalSourceFile = builder.getSourceFile(originalFilename);\n                        if (originalSourceFile) {\n                            affectedFiles.add(originalSourceFile);\n                        }\n                        return true;\n                    }\n                    return false;\n                });\n                if (!result) {\n                    break;\n                }\n                affectedFiles.add(result.affected);\n            }\n        }\n        // Collect program level diagnostics\n        const diagnostics = [\n            ...angularCompiler.getOptionDiagnostics(),\n            ...builder.getOptionsDiagnostics(),\n            ...builder.getGlobalDiagnostics(),\n        ];\n        diagnosticsReporter(diagnostics);\n        // Collect source file specific diagnostics\n        for (const sourceFile of builder.getSourceFiles()) {\n            if (!ignoreForDiagnostics.has(sourceFile)) {\n                diagnosticsReporter(builder.getSyntacticDiagnostics(sourceFile));\n                diagnosticsReporter(builder.getSemanticDiagnostics(sourceFile));\n            }\n        }\n        const transformers = (0, transformation_1.createAotTransformers)(builder, this.pluginOptions);\n        const getDependencies = (sourceFile) => {\n            const dependencies = [];\n            for (const resourcePath of angularCompiler.getResourceDependencies(sourceFile)) {\n                dependencies.push(resourcePath, \n                // Retrieve all dependencies of the resource (stylesheet imports, etc.)\n                ...resourceLoader.getResourceDependencies(resourcePath));\n            }\n            return dependencies;\n        };\n        // Required to support asynchronous resource loading\n        // Must be done before creating transformers or getting template diagnostics\n        const pendingAnalysis = angularCompiler\n            .analyzeAsync()\n            .then(() => {\n            var _a;\n            this.requiredFilesToEmit.clear();\n            for (const sourceFile of builder.getSourceFiles()) {\n                if (sourceFile.isDeclarationFile) {\n                    continue;\n                }\n                // Collect sources that are required to be emitted\n                if (!ignoreForEmit.has(sourceFile) &&\n                    !angularCompiler.incrementalDriver.safeToSkipEmit(sourceFile)) {\n                    this.requiredFilesToEmit.add((0, paths_1.normalizePath)(sourceFile.fileName));\n                    // If required to emit, diagnostics may have also changed\n                    if (!ignoreForDiagnostics.has(sourceFile)) {\n                        affectedFiles.add(sourceFile);\n                    }\n                }\n                else if (this.sourceFileCache &&\n                    !affectedFiles.has(sourceFile) &&\n                    !ignoreForDiagnostics.has(sourceFile)) {\n                    // Use cached Angular diagnostics for unchanged and unaffected files\n                    const angularDiagnostics = this.sourceFileCache.getAngularDiagnostics(sourceFile);\n                    if (angularDiagnostics) {\n                        diagnosticsReporter(angularDiagnostics);\n                    }\n                }\n            }\n            // Collect new Angular diagnostics for files affected by changes\n            const OptimizeFor = this.compilerCli.OptimizeFor;\n            const optimizeDiagnosticsFor = affectedFiles.size <= DIAGNOSTICS_AFFECTED_THRESHOLD\n                ? OptimizeFor.SingleFile\n                : OptimizeFor.WholeProgram;\n            for (const affectedFile of affectedFiles) {\n                const angularDiagnostics = angularCompiler.getDiagnosticsForFile(affectedFile, optimizeDiagnosticsFor);\n                diagnosticsReporter(angularDiagnostics);\n                (_a = this.sourceFileCache) === null || _a === void 0 ? void 0 : _a.updateAngularDiagnostics(affectedFile, angularDiagnostics);\n            }\n            return {\n                emitter: this.createFileEmitter(builder, (0, transformation_1.mergeTransformers)(angularCompiler.prepareEmit().transformers, transformers), getDependencies, (sourceFile) => {\n                    this.requiredFilesToEmit.delete((0, paths_1.normalizePath)(sourceFile.fileName));\n                    angularCompiler.incrementalDriver.recordSuccessfulEmit(sourceFile);\n                }),\n            };\n        })\n            .catch((err) => ({ errorMessage: err instanceof Error ? err.message : `${err}` }));\n        const analyzingFileEmitter = async (file) => {\n            const analysis = await pendingAnalysis;\n            if ('errorMessage' in analysis) {\n                throw new Error(analysis.errorMessage);\n            }\n            return analysis.emitter(file);\n        };\n        return {\n            fileEmitter: analyzingFileEmitter,\n            builder,\n            internalFiles: ignoreForEmit,\n        };\n    }\n    updateJitProgram(compilerOptions, rootNames, host, diagnosticsReporter) {\n        let builder;\n        if (this.watchMode) {\n            builder = this.builder = ts.createEmitAndSemanticDiagnosticsBuilderProgram(rootNames, compilerOptions, host, this.builder);\n        }\n        else {\n            // When not in watch mode, the startup cost of the incremental analysis can be avoided by\n            // using an abstract builder that only wraps a TypeScript program.\n            builder = ts.createAbstractBuilder(rootNames, compilerOptions, host);\n        }\n        const diagnostics = [\n            ...builder.getOptionsDiagnostics(),\n            ...builder.getGlobalDiagnostics(),\n            ...builder.getSyntacticDiagnostics(),\n            // Gather incremental semantic diagnostics\n            ...builder.getSemanticDiagnostics(),\n        ];\n        diagnosticsReporter(diagnostics);\n        const transformers = (0, transformation_1.createJitTransformers)(builder, this.compilerCli, this.pluginOptions);\n        return {\n            fileEmitter: this.createFileEmitter(builder, transformers, () => []),\n            builder,\n            internalFiles: undefined,\n        };\n    }\n    createFileEmitter(program, transformers = {}, getExtraDependencies, onAfterEmit) {\n        return async (file) => {\n            const filePath = (0, paths_1.normalizePath)(file);\n            if (this.requiredFilesToEmitCache.has(filePath)) {\n                return this.requiredFilesToEmitCache.get(filePath);\n            }\n            const sourceFile = program.getSourceFile(filePath);\n            if (!sourceFile) {\n                return undefined;\n            }\n            let content;\n            let map;\n            program.emit(sourceFile, (filename, data) => {\n                if (filename.endsWith('.map')) {\n                    map = data;\n                }\n                else if (filename.endsWith('.js')) {\n                    content = data;\n                }\n            }, undefined, undefined, transformers);\n            onAfterEmit === null || onAfterEmit === void 0 ? void 0 : onAfterEmit(sourceFile);\n            // Capture emit history info for Angular rebuild analysis\n            const hash = content ? (await this.addFileEmitHistory(filePath, content)).hash : undefined;\n            const dependencies = [\n                ...(this.fileDependencies.get(filePath) || []),\n                ...getExtraDependencies(sourceFile),\n            ].map(paths_1.externalizePath);\n            return { content, map, dependencies, hash };\n        };\n    }\n    async initializeCompilerCli() {\n        if (this.compilerCliModule) {\n            return;\n        }\n        // This uses a dynamic import to load `@angular/compiler-cli` which may be ESM.\n        // CommonJS code can load ESM code via a dynamic import. Unfortunately, TypeScript\n        // will currently, unconditionally downlevel dynamic import into a require call.\n        // require calls cannot load ESM code and will result in a runtime error. To workaround\n        // this, a Function constructor is used to prevent TypeScript from changing the dynamic import.\n        // Once TypeScript provides support for keeping the dynamic import this workaround can\n        // be dropped.\n        this.compilerCliModule = await new Function(`return import('@angular/compiler-cli');`)();\n        this.compilerNgccModule = await new Function(`return import('@angular/compiler-cli/ngcc');`)();\n    }\n    async addFileEmitHistory(filePath, content) {\n        const historyData = {\n            length: content.length,\n            hash: (0, crypto_1.createHash)('md5').update(content).digest(),\n        };\n        if (this.webpackCache) {\n            const history = await this.getFileEmitHistory(filePath);\n            if (!history || Buffer.compare(history.hash, historyData.hash) !== 0) {\n                // Hash doesn't match or item doesn't exist.\n                await this.webpackCache.storePromise(filePath, null, historyData);\n            }\n        }\n        else if (this.watchMode) {\n            // The in memory file emit history is only required during watch mode.\n            this.fileEmitHistory.set(filePath, historyData);\n        }\n        return historyData;\n    }\n    async getFileEmitHistory(filePath) {\n        return this.webpackCache\n            ? this.webpackCache.getPromise(filePath, null)\n            : this.fileEmitHistory.get(filePath);\n    }\n}\nexports.AngularWebpackPlugin = AngularWebpackPlugin;\n"]},"metadata":{},"sourceType":"script"}