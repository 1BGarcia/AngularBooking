{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inlineLocales = exports.createI18nPlugins = void 0;\n\nconst remapping_1 = __importDefault(require(\"@ampproject/remapping\"));\n\nconst core_1 = require(\"@babel/core\");\n\nconst template_1 = __importDefault(require(\"@babel/template\"));\n\nconst fs = __importStar(require(\"fs\"));\n\nconst path = __importStar(require(\"path\"));\n\nconst worker_threads_1 = require(\"worker_threads\");\n\nconst environment_options_1 = require(\"./environment-options\");\n\nconst load_esm_1 = require(\"./load-esm\"); // Lazy loaded webpack-sources object\n// Webpack is only imported if needed during the processing\n\n\nlet webpackSources;\nconst {\n  i18n\n} = worker_threads_1.workerData || {};\n/**\n * Internal flag to enable the direct usage of the `@angular/localize` translation plugins.\n * Their usage is currently several times slower than the string manipulation method.\n * Future work to optimize the plugins should enable plugin usage as the default.\n */\n\nconst USE_LOCALIZE_PLUGINS = false;\n/**\n * Cached instance of the `@angular/localize/tools` module.\n * This is used to remove the need to repeatedly import the module per file translation.\n */\n\nlet localizeToolsModule;\n/**\n * Attempts to load the `@angular/localize/tools` module containing the functionality to\n * perform the file translations.\n * This module must be dynamically loaded as it is an ESM module and this file is CommonJS.\n */\n\nfunction loadLocalizeTools() {\n  return _loadLocalizeTools.apply(this, arguments);\n}\n\nfunction _loadLocalizeTools() {\n  _loadLocalizeTools = _asyncToGenerator(function* () {\n    if (localizeToolsModule !== undefined) {\n      return localizeToolsModule;\n    } // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n    // Once TypeScript provides support for keeping the dynamic import this workaround can be\n    // changed to a direct dynamic import.\n\n\n    return (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n  });\n  return _loadLocalizeTools.apply(this, arguments);\n}\n\nfunction createI18nPlugins(_x, _x2, _x3, _x4, _x5) {\n  return _createI18nPlugins.apply(this, arguments);\n}\n\nfunction _createI18nPlugins() {\n  _createI18nPlugins = _asyncToGenerator(function* (locale, translation, missingTranslation, shouldInline, localeDataContent) {\n    const {\n      Diagnostics,\n      makeEs2015TranslatePlugin,\n      makeEs5TranslatePlugin,\n      makeLocalePlugin\n    } = yield loadLocalizeTools();\n    const plugins = [];\n    const diagnostics = new Diagnostics();\n\n    if (shouldInline) {\n      plugins.push( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      makeEs2015TranslatePlugin(diagnostics, translation || {}, {\n        missingTranslation: translation === undefined ? 'ignore' : missingTranslation\n      }));\n      plugins.push( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      makeEs5TranslatePlugin(diagnostics, translation || {}, {\n        missingTranslation: translation === undefined ? 'ignore' : missingTranslation\n      }));\n    }\n\n    plugins.push(makeLocalePlugin(locale));\n\n    if (localeDataContent) {\n      plugins.push({\n        visitor: {\n          Program(path) {\n            path.unshiftContainer('body', template_1.default.ast(localeDataContent));\n          }\n\n        }\n      });\n    }\n\n    return {\n      diagnostics,\n      plugins\n    };\n  });\n  return _createI18nPlugins.apply(this, arguments);\n}\n\nexports.createI18nPlugins = createI18nPlugins;\nconst localizeName = '$localize';\n\nfunction inlineLocales(_x6) {\n  return _inlineLocales.apply(this, arguments);\n}\n\nfunction _inlineLocales() {\n  _inlineLocales = _asyncToGenerator(function* (options) {\n    var _a;\n\n    if (!i18n || i18n.inlineLocales.size === 0) {\n      return {\n        file: options.filename,\n        diagnostics: [],\n        count: 0\n      };\n    }\n\n    if (i18n.flatOutput && i18n.inlineLocales.size > 1) {\n      throw new Error('Flat output is only supported when inlining one locale.');\n    }\n\n    const hasLocalizeName = options.code.includes(localizeName);\n\n    if (!hasLocalizeName && !options.setLocale) {\n      return inlineCopyOnly(options);\n    }\n\n    yield loadLocalizeTools();\n    let ast;\n\n    try {\n      ast = (0, core_1.parseSync)(options.code, {\n        babelrc: false,\n        configFile: false,\n        sourceType: 'script',\n        filename: options.filename\n      });\n    } catch (error) {\n      if (error.message) {\n        // Make the error more readable.\n        // Same errors will contain the full content of the file as the error message\n        // Which makes it hard to find the actual error message.\n        const index = error.message.indexOf(')\\n');\n        const msg = index !== -1 ? error.message.substr(0, index + 1) : error.message;\n        throw new Error(`${msg}\\nAn error occurred inlining file \"${options.filename}\"`);\n      }\n    }\n\n    if (!ast) {\n      throw new Error(`Unknown error occurred inlining file \"${options.filename}\"`);\n    }\n\n    if (!USE_LOCALIZE_PLUGINS) {\n      return inlineLocalesDirect(ast, options);\n    }\n\n    const diagnostics = [];\n\n    for (const locale of i18n.inlineLocales) {\n      const isSourceLocale = locale === i18n.sourceLocale; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      const translations = isSourceLocale ? {} : i18n.locales[locale].translation || {};\n      let localeDataContent;\n\n      if (options.setLocale) {\n        // If locale data is provided, load it and prepend to file\n        const localeDataPath = (_a = i18n.locales[locale]) === null || _a === void 0 ? void 0 : _a.dataPath;\n\n        if (localeDataPath) {\n          localeDataContent = yield loadLocaleData(localeDataPath, true, options.es5);\n        }\n      }\n\n      const {\n        diagnostics: localeDiagnostics,\n        plugins\n      } = yield createI18nPlugins(locale, translations, isSourceLocale ? 'ignore' : options.missingTranslation || 'warning', true, localeDataContent);\n      const transformResult = yield (0, core_1.transformFromAstSync)(ast, options.code, {\n        filename: options.filename,\n        // using false ensures that babel will NOT search and process sourcemap comments (large memory usage)\n        // The types do not include the false option even though it is valid\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        inputSourceMap: false,\n        babelrc: false,\n        configFile: false,\n        plugins,\n        compact: !environment_options_1.shouldBeautify,\n        sourceMaps: !!options.map\n      });\n      diagnostics.push(...localeDiagnostics.messages);\n\n      if (!transformResult || !transformResult.code) {\n        throw new Error(`Unknown error occurred processing bundle for \"${options.filename}\".`);\n      }\n\n      const outputPath = path.join(options.outputPath, i18n.flatOutput ? '' : locale, options.filename);\n      fs.writeFileSync(outputPath, transformResult.code);\n\n      if (options.map && transformResult.map) {\n        const outputMap = (0, remapping_1.default)([transformResult.map, options.map], () => null);\n        fs.writeFileSync(outputPath + '.map', JSON.stringify(outputMap));\n      }\n    }\n\n    return {\n      file: options.filename,\n      diagnostics\n    };\n  });\n  return _inlineLocales.apply(this, arguments);\n}\n\nexports.inlineLocales = inlineLocales;\n\nfunction inlineLocalesDirect(_x7, _x8) {\n  return _inlineLocalesDirect.apply(this, arguments);\n}\n\nfunction _inlineLocalesDirect() {\n  _inlineLocalesDirect = _asyncToGenerator(function* (ast, options) {\n    if (!i18n || i18n.inlineLocales.size === 0) {\n      return {\n        file: options.filename,\n        diagnostics: [],\n        count: 0\n      };\n    }\n\n    const {\n      default: generate\n    } = yield Promise.resolve().then(() => __importStar(require('@babel/generator')));\n    const localizeDiag = yield loadLocalizeTools();\n    const diagnostics = new localizeDiag.Diagnostics();\n    const positions = findLocalizePositions(ast, options, localizeDiag);\n\n    if (positions.length === 0 && !options.setLocale) {\n      return inlineCopyOnly(options);\n    }\n\n    const inputMap = !!options.map && JSON.parse(options.map); // Cleanup source root otherwise it will be added to each source entry\n\n    const mapSourceRoot = inputMap && inputMap.sourceRoot;\n\n    if (inputMap) {\n      delete inputMap.sourceRoot;\n    } // Load Webpack only when needed\n\n\n    if (webpackSources === undefined) {\n      webpackSources = (yield Promise.resolve().then(() => __importStar(require('webpack')))).sources;\n    }\n\n    const {\n      ConcatSource,\n      OriginalSource,\n      ReplaceSource,\n      SourceMapSource\n    } = webpackSources;\n\n    for (const locale of i18n.inlineLocales) {\n      const content = new ReplaceSource(inputMap ? new SourceMapSource(options.code, options.filename, inputMap) : new OriginalSource(options.code, options.filename));\n      const isSourceLocale = locale === i18n.sourceLocale; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      const translations = isSourceLocale ? {} : i18n.locales[locale].translation || {};\n\n      for (const position of positions) {\n        const translated = localizeDiag.translate(diagnostics, translations, position.messageParts, position.expressions, isSourceLocale ? 'ignore' : options.missingTranslation || 'warning');\n        const expression = localizeDiag.buildLocalizeReplacement(translated[0], translated[1]);\n        const {\n          code\n        } = generate(expression);\n        content.replace(position.start, position.end - 1, code);\n      }\n\n      let outputSource = content;\n\n      if (options.setLocale) {\n        const setLocaleText = `var $localize=Object.assign(void 0===$localize?{}:$localize,{locale:\"${locale}\"});\\n`; // If locale data is provided, load it and prepend to file\n\n        let localeDataSource;\n        const localeDataPath = i18n.locales[locale] && i18n.locales[locale].dataPath;\n\n        if (localeDataPath) {\n          const localeDataContent = yield loadLocaleData(localeDataPath, true, options.es5);\n          localeDataSource = new OriginalSource(localeDataContent, path.basename(localeDataPath));\n        }\n\n        outputSource = localeDataSource ? // The semicolon ensures that there is no syntax error between statements\n        new ConcatSource(setLocaleText, localeDataSource, ';\\n', content) : new ConcatSource(setLocaleText, content);\n      }\n\n      const {\n        source: outputCode,\n        map: outputMap\n      } = outputSource.sourceAndMap();\n      const outputPath = path.join(options.outputPath, i18n.flatOutput ? '' : locale, options.filename);\n      fs.writeFileSync(outputPath, outputCode);\n\n      if (inputMap && outputMap) {\n        outputMap.file = options.filename;\n\n        if (mapSourceRoot) {\n          outputMap.sourceRoot = mapSourceRoot;\n        }\n\n        fs.writeFileSync(outputPath + '.map', JSON.stringify(outputMap));\n      }\n    }\n\n    return {\n      file: options.filename,\n      diagnostics: diagnostics.messages,\n      count: positions.length\n    };\n  });\n  return _inlineLocalesDirect.apply(this, arguments);\n}\n\nfunction inlineCopyOnly(options) {\n  if (!i18n) {\n    throw new Error('i18n options are missing');\n  }\n\n  for (const locale of i18n.inlineLocales) {\n    const outputPath = path.join(options.outputPath, i18n.flatOutput ? '' : locale, options.filename);\n    fs.writeFileSync(outputPath, options.code);\n\n    if (options.map) {\n      fs.writeFileSync(outputPath + '.map', options.map);\n    }\n  }\n\n  return {\n    file: options.filename,\n    diagnostics: [],\n    count: 0\n  };\n}\n\nfunction findLocalizePositions(ast, options, utils) {\n  const positions = []; // Workaround to ensure a path hub is present for traversal\n\n  const {\n    File\n  } = require('@babel/core');\n\n  const file = new File({}, {\n    code: options.code,\n    ast\n  });\n\n  if (options.es5) {\n    (0, core_1.traverse)(file.ast, {\n      CallExpression(path) {\n        const callee = path.get('callee');\n\n        if (callee.isIdentifier() && callee.node.name === localizeName && utils.isGlobalIdentifier(callee)) {\n          const [messageParts, expressions] = unwrapLocalizeCall(path, utils);\n          positions.push({\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            start: path.node.start,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            end: path.node.end,\n            messageParts,\n            expressions\n          });\n        }\n      }\n\n    });\n  } else {\n    (0, core_1.traverse)(file.ast, {\n      TaggedTemplateExpression(path) {\n        if (core_1.types.isIdentifier(path.node.tag) && path.node.tag.name === localizeName) {\n          const [messageParts, expressions] = unwrapTemplateLiteral(path, utils);\n          positions.push({\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            start: path.node.start,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            end: path.node.end,\n            messageParts,\n            expressions\n          });\n        }\n      }\n\n    });\n  }\n\n  return positions;\n}\n\nfunction unwrapTemplateLiteral(path, utils) {\n  const [messageParts] = utils.unwrapMessagePartsFromTemplateLiteral(path.get('quasi').get('quasis'));\n  const [expressions] = utils.unwrapExpressionsFromTemplateLiteral(path.get('quasi'));\n  return [messageParts, expressions];\n}\n\nfunction unwrapLocalizeCall(path, utils) {\n  const [messageParts] = utils.unwrapMessagePartsFromLocalizeCall(path);\n  const [expressions] = utils.unwrapSubstitutionsFromLocalizeCall(path);\n  return [messageParts, expressions];\n}\n\nfunction loadLocaleData(_x9, _x10, _x11) {\n  return _loadLocaleData.apply(this, arguments);\n}\n\nfunction _loadLocaleData() {\n  _loadLocaleData = _asyncToGenerator(function* (path, optimize, es5) {\n    // The path is validated during option processing before the build starts\n    const content = fs.readFileSync(path, 'utf8'); // Downlevel and optimize the data\n\n    const transformResult = yield (0, core_1.transformAsync)(content, {\n      filename: path,\n      // The types do not include the false option even though it is valid\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      inputSourceMap: false,\n      babelrc: false,\n      configFile: false,\n      presets: [[require.resolve('@babel/preset-env'), {\n        bugfixes: true,\n        // IE 11 is the oldest supported browser\n        targets: es5 ? {\n          ie: '11'\n        } : {\n          esmodules: true\n        }\n      }]],\n      minified: environment_options_1.allowMinify && optimize,\n      compact: !environment_options_1.shouldBeautify && optimize,\n      comments: !optimize\n    });\n\n    if (!transformResult || !transformResult.code) {\n      throw new Error(`Unknown error occurred processing bundle for \"${path}\".`);\n    }\n\n    return transformResult.code;\n  });\n  return _loadLocaleData.apply(this, arguments);\n}","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/@angular-devkit/build-angular/src/utils/process-bundle.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","inlineLocales","createI18nPlugins","remapping_1","require","core_1","template_1","fs","path","worker_threads_1","environment_options_1","load_esm_1","webpackSources","i18n","workerData","USE_LOCALIZE_PLUGINS","localizeToolsModule","loadLocalizeTools","loadEsmModule","locale","translation","missingTranslation","shouldInline","localeDataContent","Diagnostics","makeEs2015TranslatePlugin","makeEs5TranslatePlugin","makeLocalePlugin","plugins","diagnostics","push","visitor","Program","unshiftContainer","default","ast","localizeName","options","_a","size","file","filename","count","flatOutput","Error","hasLocalizeName","code","includes","setLocale","inlineCopyOnly","parseSync","babelrc","configFile","sourceType","error","message","index","indexOf","msg","substr","inlineLocalesDirect","isSourceLocale","sourceLocale","translations","locales","localeDataPath","dataPath","loadLocaleData","es5","localeDiagnostics","transformResult","transformFromAstSync","inputSourceMap","compact","shouldBeautify","sourceMaps","map","messages","outputPath","join","writeFileSync","outputMap","JSON","stringify","generate","Promise","resolve","then","localizeDiag","positions","findLocalizePositions","length","inputMap","parse","mapSourceRoot","sourceRoot","sources","ConcatSource","OriginalSource","ReplaceSource","SourceMapSource","content","position","translated","translate","messageParts","expressions","expression","buildLocalizeReplacement","replace","start","end","outputSource","setLocaleText","localeDataSource","basename","source","outputCode","sourceAndMap","utils","File","traverse","CallExpression","callee","isIdentifier","node","name","isGlobalIdentifier","unwrapLocalizeCall","TaggedTemplateExpression","types","tag","unwrapTemplateLiteral","unwrapMessagePartsFromTemplateLiteral","unwrapExpressionsFromTemplateLiteral","unwrapMessagePartsFromLocalizeCall","unwrapSubstitutionsFromLocalizeCall","optimize","readFileSync","transformAsync","presets","bugfixes","targets","ie","esmodules","minified","allowMinify","comments"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.inlineLocales = exports.createI18nPlugins = void 0;\nconst remapping_1 = __importDefault(require(\"@ampproject/remapping\"));\nconst core_1 = require(\"@babel/core\");\nconst template_1 = __importDefault(require(\"@babel/template\"));\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst worker_threads_1 = require(\"worker_threads\");\nconst environment_options_1 = require(\"./environment-options\");\nconst load_esm_1 = require(\"./load-esm\");\n// Lazy loaded webpack-sources object\n// Webpack is only imported if needed during the processing\nlet webpackSources;\nconst { i18n } = (worker_threads_1.workerData || {});\n/**\n * Internal flag to enable the direct usage of the `@angular/localize` translation plugins.\n * Their usage is currently several times slower than the string manipulation method.\n * Future work to optimize the plugins should enable plugin usage as the default.\n */\nconst USE_LOCALIZE_PLUGINS = false;\n/**\n * Cached instance of the `@angular/localize/tools` module.\n * This is used to remove the need to repeatedly import the module per file translation.\n */\nlet localizeToolsModule;\n/**\n * Attempts to load the `@angular/localize/tools` module containing the functionality to\n * perform the file translations.\n * This module must be dynamically loaded as it is an ESM module and this file is CommonJS.\n */\nasync function loadLocalizeTools() {\n    if (localizeToolsModule !== undefined) {\n        return localizeToolsModule;\n    }\n    // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n    // Once TypeScript provides support for keeping the dynamic import this workaround can be\n    // changed to a direct dynamic import.\n    return (0, load_esm_1.loadEsmModule)('@angular/localize/tools');\n}\nasync function createI18nPlugins(locale, translation, missingTranslation, shouldInline, localeDataContent) {\n    const { Diagnostics, makeEs2015TranslatePlugin, makeEs5TranslatePlugin, makeLocalePlugin } = await loadLocalizeTools();\n    const plugins = [];\n    const diagnostics = new Diagnostics();\n    if (shouldInline) {\n        plugins.push(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        makeEs2015TranslatePlugin(diagnostics, (translation || {}), {\n            missingTranslation: translation === undefined ? 'ignore' : missingTranslation,\n        }));\n        plugins.push(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        makeEs5TranslatePlugin(diagnostics, (translation || {}), {\n            missingTranslation: translation === undefined ? 'ignore' : missingTranslation,\n        }));\n    }\n    plugins.push(makeLocalePlugin(locale));\n    if (localeDataContent) {\n        plugins.push({\n            visitor: {\n                Program(path) {\n                    path.unshiftContainer('body', template_1.default.ast(localeDataContent));\n                },\n            },\n        });\n    }\n    return { diagnostics, plugins };\n}\nexports.createI18nPlugins = createI18nPlugins;\nconst localizeName = '$localize';\nasync function inlineLocales(options) {\n    var _a;\n    if (!i18n || i18n.inlineLocales.size === 0) {\n        return { file: options.filename, diagnostics: [], count: 0 };\n    }\n    if (i18n.flatOutput && i18n.inlineLocales.size > 1) {\n        throw new Error('Flat output is only supported when inlining one locale.');\n    }\n    const hasLocalizeName = options.code.includes(localizeName);\n    if (!hasLocalizeName && !options.setLocale) {\n        return inlineCopyOnly(options);\n    }\n    await loadLocalizeTools();\n    let ast;\n    try {\n        ast = (0, core_1.parseSync)(options.code, {\n            babelrc: false,\n            configFile: false,\n            sourceType: 'script',\n            filename: options.filename,\n        });\n    }\n    catch (error) {\n        if (error.message) {\n            // Make the error more readable.\n            // Same errors will contain the full content of the file as the error message\n            // Which makes it hard to find the actual error message.\n            const index = error.message.indexOf(')\\n');\n            const msg = index !== -1 ? error.message.substr(0, index + 1) : error.message;\n            throw new Error(`${msg}\\nAn error occurred inlining file \"${options.filename}\"`);\n        }\n    }\n    if (!ast) {\n        throw new Error(`Unknown error occurred inlining file \"${options.filename}\"`);\n    }\n    if (!USE_LOCALIZE_PLUGINS) {\n        return inlineLocalesDirect(ast, options);\n    }\n    const diagnostics = [];\n    for (const locale of i18n.inlineLocales) {\n        const isSourceLocale = locale === i18n.sourceLocale;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const translations = isSourceLocale ? {} : i18n.locales[locale].translation || {};\n        let localeDataContent;\n        if (options.setLocale) {\n            // If locale data is provided, load it and prepend to file\n            const localeDataPath = (_a = i18n.locales[locale]) === null || _a === void 0 ? void 0 : _a.dataPath;\n            if (localeDataPath) {\n                localeDataContent = await loadLocaleData(localeDataPath, true, options.es5);\n            }\n        }\n        const { diagnostics: localeDiagnostics, plugins } = await createI18nPlugins(locale, translations, isSourceLocale ? 'ignore' : options.missingTranslation || 'warning', true, localeDataContent);\n        const transformResult = await (0, core_1.transformFromAstSync)(ast, options.code, {\n            filename: options.filename,\n            // using false ensures that babel will NOT search and process sourcemap comments (large memory usage)\n            // The types do not include the false option even though it is valid\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            inputSourceMap: false,\n            babelrc: false,\n            configFile: false,\n            plugins,\n            compact: !environment_options_1.shouldBeautify,\n            sourceMaps: !!options.map,\n        });\n        diagnostics.push(...localeDiagnostics.messages);\n        if (!transformResult || !transformResult.code) {\n            throw new Error(`Unknown error occurred processing bundle for \"${options.filename}\".`);\n        }\n        const outputPath = path.join(options.outputPath, i18n.flatOutput ? '' : locale, options.filename);\n        fs.writeFileSync(outputPath, transformResult.code);\n        if (options.map && transformResult.map) {\n            const outputMap = (0, remapping_1.default)([transformResult.map, options.map], () => null);\n            fs.writeFileSync(outputPath + '.map', JSON.stringify(outputMap));\n        }\n    }\n    return { file: options.filename, diagnostics };\n}\nexports.inlineLocales = inlineLocales;\nasync function inlineLocalesDirect(ast, options) {\n    if (!i18n || i18n.inlineLocales.size === 0) {\n        return { file: options.filename, diagnostics: [], count: 0 };\n    }\n    const { default: generate } = await Promise.resolve().then(() => __importStar(require('@babel/generator')));\n    const localizeDiag = await loadLocalizeTools();\n    const diagnostics = new localizeDiag.Diagnostics();\n    const positions = findLocalizePositions(ast, options, localizeDiag);\n    if (positions.length === 0 && !options.setLocale) {\n        return inlineCopyOnly(options);\n    }\n    const inputMap = !!options.map && JSON.parse(options.map);\n    // Cleanup source root otherwise it will be added to each source entry\n    const mapSourceRoot = inputMap && inputMap.sourceRoot;\n    if (inputMap) {\n        delete inputMap.sourceRoot;\n    }\n    // Load Webpack only when needed\n    if (webpackSources === undefined) {\n        webpackSources = (await Promise.resolve().then(() => __importStar(require('webpack')))).sources;\n    }\n    const { ConcatSource, OriginalSource, ReplaceSource, SourceMapSource } = webpackSources;\n    for (const locale of i18n.inlineLocales) {\n        const content = new ReplaceSource(inputMap\n            ? new SourceMapSource(options.code, options.filename, inputMap)\n            : new OriginalSource(options.code, options.filename));\n        const isSourceLocale = locale === i18n.sourceLocale;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const translations = isSourceLocale ? {} : i18n.locales[locale].translation || {};\n        for (const position of positions) {\n            const translated = localizeDiag.translate(diagnostics, translations, position.messageParts, position.expressions, isSourceLocale ? 'ignore' : options.missingTranslation || 'warning');\n            const expression = localizeDiag.buildLocalizeReplacement(translated[0], translated[1]);\n            const { code } = generate(expression);\n            content.replace(position.start, position.end - 1, code);\n        }\n        let outputSource = content;\n        if (options.setLocale) {\n            const setLocaleText = `var $localize=Object.assign(void 0===$localize?{}:$localize,{locale:\"${locale}\"});\\n`;\n            // If locale data is provided, load it and prepend to file\n            let localeDataSource;\n            const localeDataPath = i18n.locales[locale] && i18n.locales[locale].dataPath;\n            if (localeDataPath) {\n                const localeDataContent = await loadLocaleData(localeDataPath, true, options.es5);\n                localeDataSource = new OriginalSource(localeDataContent, path.basename(localeDataPath));\n            }\n            outputSource = localeDataSource\n                ? // The semicolon ensures that there is no syntax error between statements\n                    new ConcatSource(setLocaleText, localeDataSource, ';\\n', content)\n                : new ConcatSource(setLocaleText, content);\n        }\n        const { source: outputCode, map: outputMap } = outputSource.sourceAndMap();\n        const outputPath = path.join(options.outputPath, i18n.flatOutput ? '' : locale, options.filename);\n        fs.writeFileSync(outputPath, outputCode);\n        if (inputMap && outputMap) {\n            outputMap.file = options.filename;\n            if (mapSourceRoot) {\n                outputMap.sourceRoot = mapSourceRoot;\n            }\n            fs.writeFileSync(outputPath + '.map', JSON.stringify(outputMap));\n        }\n    }\n    return { file: options.filename, diagnostics: diagnostics.messages, count: positions.length };\n}\nfunction inlineCopyOnly(options) {\n    if (!i18n) {\n        throw new Error('i18n options are missing');\n    }\n    for (const locale of i18n.inlineLocales) {\n        const outputPath = path.join(options.outputPath, i18n.flatOutput ? '' : locale, options.filename);\n        fs.writeFileSync(outputPath, options.code);\n        if (options.map) {\n            fs.writeFileSync(outputPath + '.map', options.map);\n        }\n    }\n    return { file: options.filename, diagnostics: [], count: 0 };\n}\nfunction findLocalizePositions(ast, options, utils) {\n    const positions = [];\n    // Workaround to ensure a path hub is present for traversal\n    const { File } = require('@babel/core');\n    const file = new File({}, { code: options.code, ast });\n    if (options.es5) {\n        (0, core_1.traverse)(file.ast, {\n            CallExpression(path) {\n                const callee = path.get('callee');\n                if (callee.isIdentifier() &&\n                    callee.node.name === localizeName &&\n                    utils.isGlobalIdentifier(callee)) {\n                    const [messageParts, expressions] = unwrapLocalizeCall(path, utils);\n                    positions.push({\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        start: path.node.start,\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        end: path.node.end,\n                        messageParts,\n                        expressions,\n                    });\n                }\n            },\n        });\n    }\n    else {\n        (0, core_1.traverse)(file.ast, {\n            TaggedTemplateExpression(path) {\n                if (core_1.types.isIdentifier(path.node.tag) && path.node.tag.name === localizeName) {\n                    const [messageParts, expressions] = unwrapTemplateLiteral(path, utils);\n                    positions.push({\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        start: path.node.start,\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        end: path.node.end,\n                        messageParts,\n                        expressions,\n                    });\n                }\n            },\n        });\n    }\n    return positions;\n}\nfunction unwrapTemplateLiteral(path, utils) {\n    const [messageParts] = utils.unwrapMessagePartsFromTemplateLiteral(path.get('quasi').get('quasis'));\n    const [expressions] = utils.unwrapExpressionsFromTemplateLiteral(path.get('quasi'));\n    return [messageParts, expressions];\n}\nfunction unwrapLocalizeCall(path, utils) {\n    const [messageParts] = utils.unwrapMessagePartsFromLocalizeCall(path);\n    const [expressions] = utils.unwrapSubstitutionsFromLocalizeCall(path);\n    return [messageParts, expressions];\n}\nasync function loadLocaleData(path, optimize, es5) {\n    // The path is validated during option processing before the build starts\n    const content = fs.readFileSync(path, 'utf8');\n    // Downlevel and optimize the data\n    const transformResult = await (0, core_1.transformAsync)(content, {\n        filename: path,\n        // The types do not include the false option even though it is valid\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        inputSourceMap: false,\n        babelrc: false,\n        configFile: false,\n        presets: [\n            [\n                require.resolve('@babel/preset-env'),\n                {\n                    bugfixes: true,\n                    // IE 11 is the oldest supported browser\n                    targets: es5 ? { ie: '11' } : { esmodules: true },\n                },\n            ],\n        ],\n        minified: environment_options_1.allowMinify && optimize,\n        compact: !environment_options_1.shouldBeautify && optimize,\n        comments: !optimize,\n    });\n    if (!transformResult || !transformResult.code) {\n        throw new Error(`Unknown error occurred processing bundle for \"${path}\".`);\n    }\n    return transformResult.code;\n}\n"]},"metadata":{},"sourceType":"script"}