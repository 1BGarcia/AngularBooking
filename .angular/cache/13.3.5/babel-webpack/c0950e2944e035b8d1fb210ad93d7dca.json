{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"E:\\\\M7ProyectoAngular\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRenderFunctionFromSassImplementation = getRenderFunctionFromSassImplementation;\nexports.getSassImplementation = getSassImplementation;\nexports.getSassOptions = getSassOptions;\nexports.getWebpackImporter = getWebpackImporter;\nexports.getWebpackResolver = getWebpackResolver;\nexports.isSupportedFibers = isSupportedFibers;\nexports.normalizeSourceMap = normalizeSourceMap;\n\nvar _url = _interopRequireDefault(require(\"url\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _full = require(\"klona/full\");\n\nvar _neoAsync = _interopRequireDefault(require(\"neo-async\"));\n\nvar _SassWarning = _interopRequireDefault(require(\"./SassWarning\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getDefaultSassImplementation() {\n  let sassImplPkg = \"sass\";\n\n  try {\n    require.resolve(\"sass\");\n  } catch (error) {\n    try {\n      require.resolve(\"node-sass\");\n\n      sassImplPkg = \"node-sass\";\n    } catch (ignoreError) {\n      sassImplPkg = \"sass\";\n    }\n  } // eslint-disable-next-line import/no-dynamic-require, global-require\n\n\n  return require(sassImplPkg);\n}\n/**\n * This function is not Webpack-specific and can be used by tools wishing to mimic `sass-loader`'s behaviour, so its signature should not be changed.\n */\n\n\nfunction getSassImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n\n  if (!resolvedImplementation) {\n    try {\n      resolvedImplementation = getDefaultSassImplementation();\n    } catch (error) {\n      loaderContext.emitError(error);\n      return;\n    }\n  }\n\n  if (typeof resolvedImplementation === \"string\") {\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(resolvedImplementation);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  }\n\n  const {\n    info\n  } = resolvedImplementation;\n\n  if (!info) {\n    loaderContext.emitError(new Error(\"Unknown Sass implementation.\"));\n    return;\n  }\n\n  const infoParts = info.split(\"\\t\");\n\n  if (infoParts.length < 2) {\n    loaderContext.emitError(new Error(`Unknown Sass implementation \"${info}\".`));\n    return;\n  }\n\n  const [implementationName] = infoParts;\n\n  if (implementationName === \"dart-sass\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  } else if (implementationName === \"node-sass\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  }\n\n  loaderContext.emitError(new Error(`Unknown Sass implementation \"${implementationName}\".`));\n}\n/**\n * @param {any} loaderContext\n * @returns {boolean}\n */\n\n\nfunction isProductionLikeMode(loaderContext) {\n  return loaderContext.mode === \"production\" || !loaderContext.mode;\n}\n\nfunction proxyCustomImporters(importers, loaderContext) {\n  return [].concat(importers).map(importer => function proxyImporter(...args) {\n    const self = { ...this,\n      webpackLoaderContext: loaderContext\n    };\n    return importer.apply(self, args);\n  });\n}\n\nfunction isSupportedFibers() {\n  const [nodeVersion] = process.versions.node.split(\".\");\n  return Number(nodeVersion) < 16;\n}\n/**\n * Derives the sass options from the loader context and normalizes its values with sane defaults.\n *\n * @param {object} loaderContext\n * @param {object} loaderOptions\n * @param {string} content\n * @param {object} implementation\n * @param {boolean} useSourceMap\n * @returns {Object}\n */\n\n\nfunction getSassOptions(_x, _x2, _x3, _x4, _x5) {\n  return _getSassOptions.apply(this, arguments);\n}\n\nfunction _getSassOptions() {\n  _getSassOptions = _asyncToGenerator(function* (loaderContext, loaderOptions, content, implementation, useSourceMap) {\n    const options = (0, _full.klona)(loaderOptions.sassOptions ? typeof loaderOptions.sassOptions === \"function\" ? loaderOptions.sassOptions(loaderContext) || {} : loaderOptions.sassOptions : {});\n    const isDartSass = implementation.info.includes(\"dart-sass\");\n\n    if (isDartSass && isSupportedFibers()) {\n      const shouldTryToResolveFibers = !options.fiber && options.fiber !== false;\n\n      if (shouldTryToResolveFibers) {\n        let fibers;\n\n        try {\n          fibers = require.resolve(\"fibers\");\n        } catch (_error) {// Nothing\n        }\n\n        if (fibers) {\n          // eslint-disable-next-line global-require, import/no-dynamic-require\n          options.fiber = require(fibers);\n        }\n      } else if (options.fiber === false) {\n        // Don't pass the `fiber` option for `sass` (`Dart Sass`)\n        delete options.fiber;\n      }\n    } else {\n      // Don't pass the `fiber` option for `node-sass`\n      delete options.fiber;\n    }\n\n    options.file = loaderContext.resourcePath;\n    options.data = loaderOptions.additionalData ? typeof loaderOptions.additionalData === \"function\" ? yield loaderOptions.additionalData(content, loaderContext) : `${loaderOptions.additionalData}\\n${content}` : content; // opt.outputStyle\n\n    if (!options.outputStyle && isProductionLikeMode(loaderContext)) {\n      options.outputStyle = \"compressed\";\n    }\n\n    if (useSourceMap) {\n      // Deliberately overriding the sourceMap option here.\n      // node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\n      // In case it is a string, options.sourceMap should be a path where the source map is written.\n      // But since we're using the data option, the source map will not actually be written, but\n      // all paths in sourceMap.sources will be relative to that path.\n      // Pretty complicated... :(\n      options.sourceMap = true;\n      options.outFile = _path.default.join(loaderContext.rootContext, \"style.css.map\");\n      options.sourceMapContents = true;\n      options.omitSourceMapUrl = true;\n      options.sourceMapEmbed = false;\n    }\n\n    const {\n      resourcePath\n    } = loaderContext;\n\n    const ext = _path.default.extname(resourcePath); // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n\n    if (ext && ext.toLowerCase() === \".sass\" && typeof options.indentedSyntax === \"undefined\") {\n      options.indentedSyntax = true;\n    } else {\n      options.indentedSyntax = Boolean(options.indentedSyntax);\n    } // Allow passing custom importers to `sass`/`node-sass`. Accepts `Function` or an array of `Function`s.\n\n\n    options.importer = options.importer ? proxyCustomImporters(Array.isArray(options.importer) ? options.importer : [options.importer], loaderContext) : [];\n    options.includePaths = [].concat(process.cwd()).concat( // We use `includePaths` in context for resolver, so it should be always absolute\n    (options.includePaths || []).map(includePath => _path.default.isAbsolute(includePath) ? includePath : _path.default.join(process.cwd(), includePath))).concat(process.env.SASS_PATH ? process.env.SASS_PATH.split(process.platform === \"win32\" ? \";\" : \":\") : []);\n\n    if (typeof options.charset === \"undefined\") {\n      options.charset = true;\n    }\n\n    if (!options.logger) {\n      // TODO set me to `true` by default in the next major release\n      const needEmitWarning = loaderOptions.warnRuleAsWarning === true;\n      const logger = loaderContext.getLogger(\"sass-loader\");\n\n      const formatSpan = span => `${span.url || \"-\"}:${span.start.line}:${span.start.column}: `;\n\n      options.logger = {\n        debug(message, loggerOptions) {\n          let builtMessage = \"\";\n\n          if (loggerOptions.span) {\n            builtMessage = formatSpan(loggerOptions.span);\n          }\n\n          builtMessage += message;\n          logger.debug(builtMessage);\n        },\n\n        warn(message, loggerOptions) {\n          let builtMessage = \"\";\n\n          if (loggerOptions.deprecation) {\n            builtMessage += \"Deprecation \";\n          }\n\n          if (loggerOptions.span && !loggerOptions.stack) {\n            builtMessage = formatSpan(loggerOptions.span);\n          }\n\n          builtMessage += message;\n\n          if (loggerOptions.stack) {\n            builtMessage += `\\n\\n${loggerOptions.stack}`;\n          }\n\n          if (needEmitWarning) {\n            loaderContext.emitWarning(new _SassWarning.default(builtMessage, loggerOptions));\n          } else {\n            logger.warn(builtMessage);\n          }\n        }\n\n      };\n    }\n\n    return options;\n  });\n  return _getSassOptions.apply(this, arguments);\n}\n\nconst MODULE_REQUEST_REGEX = /^[^?]*~/; // Examples:\n// - ~package\n// - ~package/\n// - ~@org\n// - ~@org/\n// - ~@org/package\n// - ~@org/package/\n\nconst IS_MODULE_IMPORT = /^~([^/]+|[^/]+\\/|@[^/]+[/][^/]+|@[^/]+\\/?|@[^/]+[/][^/]+\\/)$/;\n/**\n * When `sass`/`node-sass` tries to resolve an import, it uses a special algorithm.\n * Since the `sass-loader` uses webpack to resolve the modules, we need to simulate that algorithm.\n * This function returns an array of import paths to try.\n * The last entry in the array is always the original url to enable straight-forward webpack.config aliases.\n *\n * We don't need emulate `dart-sass` \"It's not clear which file to import.\" errors (when \"file.ext\" and \"_file.ext\" files are present simultaneously in the same directory).\n * This reduces performance and `dart-sass` always do it on own side.\n *\n * @param {string} url\n * @param {boolean} forWebpackResolver\n * @param {boolean} fromImport\n * @returns {Array<string>}\n */\n\nfunction getPossibleRequests( // eslint-disable-next-line no-shadow\nurl, forWebpackResolver = false, fromImport = false) {\n  let request = url; // In case there is module request, send this to webpack resolver\n\n  if (forWebpackResolver) {\n    if (MODULE_REQUEST_REGEX.test(url)) {\n      request = request.replace(MODULE_REQUEST_REGEX, \"\");\n    }\n\n    if (IS_MODULE_IMPORT.test(url)) {\n      request = request[request.length - 1] === \"/\" ? request : `${request}/`;\n      return [...new Set([request, url])];\n    }\n  } // Keep in mind: ext can also be something like '.datepicker' when the true extension is omitted and the filename contains a dot.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/167\n\n\n  const extension = _path.default.extname(request).toLowerCase(); // Because @import is also defined in CSS, Sass needs a way of compiling plain CSS @imports without trying to import the files at compile time.\n  // To accomplish this, and to ensure SCSS is as much of a superset of CSS as possible, Sass will compile any @imports with the following characteristics to plain CSS imports:\n  //  - imports where the URL ends with .css.\n  //  - imports where the URL begins http:// or https://.\n  //  - imports where the URL is written as a url().\n  //  - imports that have media queries.\n  //\n  // The `node-sass` package sends `@import` ending on `.css` to importer, it is bug, so we skip resolve\n\n\n  if (extension === \".css\") {\n    return [];\n  }\n\n  const dirname = _path.default.dirname(request);\n\n  const normalizedDirname = dirname === \".\" ? \"\" : `${dirname}/`;\n\n  const basename = _path.default.basename(request);\n\n  const basenameWithoutExtension = _path.default.basename(request, extension);\n\n  return [...new Set([].concat(fromImport ? [`${normalizedDirname}_${basenameWithoutExtension}.import${extension}`, `${normalizedDirname}${basenameWithoutExtension}.import${extension}`] : []).concat([`${normalizedDirname}_${basename}`, `${normalizedDirname}${basename}`]).concat(forWebpackResolver ? [url] : []))];\n}\n\nfunction promiseResolve(callbackResolve) {\n  return (context, request) => new Promise((resolve, reject) => {\n    callbackResolve(context, request, (error, result) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\nconst IS_SPECIAL_MODULE_IMPORT = /^~[^/]+$/; // `[drive_letter]:\\` + `\\\\[server]\\[sharename]\\`\n\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\n/**\n * @public\n * Create the resolve function used in the custom Sass importer.\n *\n * Can be used by external tools to mimic how `sass-loader` works, for example\n * in a Jest transform. Such usages will want to wrap `resolve.create` from\n * [`enhanced-resolve`]{@link https://github.com/webpack/enhanced-resolve} to\n * pass as the `resolverFactory` argument.\n *\n * @param {Function} resolverFactory - A factory function for creating a Webpack\n *   resolver.\n * @param {Object} implementation - The imported Sass implementation, both\n *   `sass` (Dart Sass) and `node-sass` are supported.\n * @param {string[]} [includePaths] - The list of include paths passed to Sass.\n *\n * @throws If a compatible Sass implementation cannot be found.\n */\n\nfunction getWebpackResolver(resolverFactory, implementation, includePaths = []) {\n  function startResolving(_x6) {\n    return _startResolving.apply(this, arguments);\n  }\n\n  function _startResolving() {\n    _startResolving = _asyncToGenerator(function* (resolutionMap) {\n      if (resolutionMap.length === 0) {\n        return Promise.reject();\n      }\n\n      const [{\n        possibleRequests\n      }] = resolutionMap;\n\n      if (possibleRequests.length === 0) {\n        return Promise.reject();\n      }\n\n      const [{\n        resolve,\n        context\n      }] = resolutionMap;\n\n      try {\n        return yield resolve(context, possibleRequests[0]);\n      } catch (_ignoreError) {\n        const [, ...tailResult] = possibleRequests;\n\n        if (tailResult.length === 0) {\n          const [, ...tailResolutionMap] = resolutionMap;\n          return startResolving(tailResolutionMap);\n        } // eslint-disable-next-line no-param-reassign\n\n\n        resolutionMap[0].possibleRequests = tailResult;\n        return startResolving(resolutionMap);\n      }\n    });\n    return _startResolving.apply(this, arguments);\n  }\n\n  const isDartSass = implementation.info.includes(\"dart-sass\"); // We only have one difference with the built-in sass resolution logic and out resolution logic:\n  // First, we look at the files starting with `_`, then without `_` (i.e. `_name.sass`, `_name.scss`, `_name.css`, `name.sass`, `name.scss`, `name.css`),\n  // although `sass` look together by extensions (i.e. `_name.sass`/`name.sass`/`_name.scss`/`name.scss`/`_name.css`/`name.css`).\n  // It shouldn't be a problem because `sass` throw errors:\n  // - on having `_name.sass` and `name.sass` (extension can be `sass`, `scss` or `css`) in the same directory\n  // - on having `_name.sass` and `_name.scss` in the same directory\n  //\n  // Also `sass` prefer `sass`/`scss` over `css`.\n\n  const sassModuleResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: [\"_index\", \"index\"],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const sassImportResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: [\"_index.import\", \"_index\", \"index.import\", \"index\"],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const webpackModuleResolve = promiseResolve(resolverFactory({\n    dependencyType: \"sass\",\n    conditionNames: [\"sass\", \"style\"],\n    mainFields: [\"sass\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"_index\", \"index\", \"...\"],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const webpackImportResolve = promiseResolve(resolverFactory({\n    dependencyType: \"sass\",\n    conditionNames: [\"sass\", \"style\"],\n    mainFields: [\"sass\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"_index.import\", \"_index\", \"index.import\", \"index\", \"...\"],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  return (context, request, fromImport) => {\n    // See https://github.com/webpack/webpack/issues/12340\n    // Because `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`\n    // custom importer may not return `{ file: '/path/to/name.ext' }` and therefore our `context` will be relative\n    if (!isDartSass && !_path.default.isAbsolute(context)) {\n      return Promise.reject();\n    }\n\n    const originalRequest = request;\n    const isFileScheme = originalRequest.slice(0, 5).toLowerCase() === \"file:\";\n\n    if (isFileScheme) {\n      try {\n        // eslint-disable-next-line no-param-reassign\n        request = _url.default.fileURLToPath(originalRequest);\n      } catch (ignoreError) {\n        // eslint-disable-next-line no-param-reassign\n        request = request.slice(7);\n      }\n    }\n\n    let resolutionMap = [];\n    const needEmulateSassResolver = // `sass` doesn't support module import\n    !IS_SPECIAL_MODULE_IMPORT.test(request) && // We need improve absolute paths handling.\n    // Absolute paths should be resolved:\n    // - Server-relative URLs - `<context>/path/to/file.ext` (where `<context>` is root context)\n    // - Absolute path - `/full/path/to/file.ext` or `C:\\\\full\\path\\to\\file.ext`\n    !isFileScheme && !originalRequest.startsWith(\"/\") && !IS_NATIVE_WIN32_PATH.test(originalRequest);\n\n    if (includePaths.length > 0 && needEmulateSassResolver) {\n      // The order of import precedence is as follows:\n      //\n      // 1. Filesystem imports relative to the base file.\n      // 2. Custom importer imports.\n      // 3. Filesystem imports relative to the working directory.\n      // 4. Filesystem imports relative to an `includePaths` path.\n      // 5. Filesystem imports relative to a `SASS_PATH` path.\n      //\n      // `sass` run custom importers before `3`, `4` and `5` points, we need to emulate this behavior to avoid wrong resolution.\n      const sassPossibleRequests = getPossibleRequests(request, false, fromImport); // `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`, so we need emulate this too\n\n      if (!isDartSass) {\n        resolutionMap = resolutionMap.concat({\n          resolve: fromImport ? sassImportResolve : sassModuleResolve,\n          context: _path.default.dirname(context),\n          possibleRequests: sassPossibleRequests\n        });\n      }\n\n      resolutionMap = resolutionMap.concat( // eslint-disable-next-line no-shadow\n      includePaths.map(context => {\n        return {\n          resolve: fromImport ? sassImportResolve : sassModuleResolve,\n          context,\n          possibleRequests: sassPossibleRequests\n        };\n      }));\n    }\n\n    const webpackPossibleRequests = getPossibleRequests(request, true, fromImport);\n    resolutionMap = resolutionMap.concat({\n      resolve: fromImport ? webpackImportResolve : webpackModuleResolve,\n      context: _path.default.dirname(context),\n      possibleRequests: webpackPossibleRequests\n    });\n    return startResolving(resolutionMap);\n  };\n}\n\nconst MATCH_CSS = /\\.css$/i;\n\nfunction getWebpackImporter(loaderContext, implementation, includePaths) {\n  const resolve = getWebpackResolver(loaderContext.getResolve, implementation, includePaths);\n  return function importer(originalUrl, prev, done) {\n    const {\n      fromImport\n    } = this;\n    resolve(prev, originalUrl, fromImport).then(result => {\n      // Add the result as dependency.\n      // Although we're also using stats.includedFiles, this might come in handy when an error occurs.\n      // In this case, we don't get stats.includedFiles from node-sass/sass.\n      loaderContext.addDependency(_path.default.normalize(result)); // By removing the CSS file extension, we trigger node-sass to include the CSS file instead of just linking it.\n\n      done({\n        file: result.replace(MATCH_CSS, \"\")\n      });\n    }) // Catch all resolving errors, return the original file and pass responsibility back to other custom importers\n    .catch(() => {\n      done({\n        file: originalUrl\n      });\n    });\n  };\n}\n\nlet nodeSassJobQueue = null;\n/**\n * Verifies that the implementation and version of Sass is supported by this loader.\n *\n * @param {Object} implementation\n * @returns {Function}\n */\n\nfunction getRenderFunctionFromSassImplementation(implementation) {\n  const isDartSass = implementation.info.includes(\"dart-sass\");\n\n  if (isDartSass) {\n    return implementation.render.bind(implementation);\n  } // There is an issue with node-sass when async custom importers are used\n  // See https://github.com/sass/node-sass/issues/857#issuecomment-93594360\n  // We need to use a job queue to make sure that one thread is always available to the UV lib\n\n\n  if (nodeSassJobQueue === null) {\n    const threadPoolSize = Number(process.env.UV_THREADPOOL_SIZE || 4);\n    nodeSassJobQueue = _neoAsync.default.queue(implementation.render.bind(implementation), threadPoolSize - 1);\n  }\n\n  return nodeSassJobQueue.push.bind(nodeSassJobQueue);\n}\n\nconst ABSOLUTE_SCHEME = /^[A-Za-z0-9+\\-.]+:/;\n/**\n * @param {string} source\n * @returns {\"absolute\" | \"scheme-relative\" | \"path-absolute\" | \"path-absolute\"}\n */\n\nfunction getURLType(source) {\n  if (source[0] === \"/\") {\n    if (source[1] === \"/\") {\n      return \"scheme-relative\";\n    }\n\n    return \"path-absolute\";\n  }\n\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return \"path-absolute\";\n  }\n\n  return ABSOLUTE_SCHEME.test(source) ? \"absolute\" : \"path-relative\";\n}\n\nfunction normalizeSourceMap(map, rootContext) {\n  const newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  delete newMap.file; // eslint-disable-next-line no-param-reassign\n\n  newMap.sourceRoot = \"\"; // node-sass returns POSIX paths, that's why we need to transform them back to native paths.\n  // This fixes an error on windows where the source-map module cannot resolve the source maps.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/366#issuecomment-279460722\n  // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => {\n    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types\n\n    if (sourceType === \"path-relative\") {\n      return _path.default.resolve(rootContext, _path.default.normalize(source));\n    }\n\n    return source;\n  });\n  return newMap;\n}","map":{"version":3,"sources":["E:/M7ProyectoAngular/node_modules/sass-loader/dist/utils.js"],"names":["Object","defineProperty","exports","value","getRenderFunctionFromSassImplementation","getSassImplementation","getSassOptions","getWebpackImporter","getWebpackResolver","isSupportedFibers","normalizeSourceMap","_url","_interopRequireDefault","require","_path","_full","_neoAsync","_SassWarning","obj","__esModule","default","getDefaultSassImplementation","sassImplPkg","resolve","error","ignoreError","loaderContext","implementation","resolvedImplementation","emitError","info","Error","infoParts","split","length","implementationName","isProductionLikeMode","mode","proxyCustomImporters","importers","concat","map","importer","proxyImporter","args","self","webpackLoaderContext","apply","nodeVersion","process","versions","node","Number","loaderOptions","content","useSourceMap","options","klona","sassOptions","isDartSass","includes","shouldTryToResolveFibers","fiber","fibers","_error","file","resourcePath","data","additionalData","outputStyle","sourceMap","outFile","join","rootContext","sourceMapContents","omitSourceMapUrl","sourceMapEmbed","ext","extname","toLowerCase","indentedSyntax","Boolean","Array","isArray","includePaths","cwd","includePath","isAbsolute","env","SASS_PATH","platform","charset","logger","needEmitWarning","warnRuleAsWarning","getLogger","formatSpan","span","url","start","line","column","debug","message","loggerOptions","builtMessage","warn","deprecation","stack","emitWarning","MODULE_REQUEST_REGEX","IS_MODULE_IMPORT","getPossibleRequests","forWebpackResolver","fromImport","request","test","replace","Set","extension","dirname","normalizedDirname","basename","basenameWithoutExtension","promiseResolve","callbackResolve","context","Promise","reject","result","IS_SPECIAL_MODULE_IMPORT","IS_NATIVE_WIN32_PATH","resolverFactory","startResolving","resolutionMap","possibleRequests","_ignoreError","tailResult","tailResolutionMap","sassModuleResolve","alias","aliasFields","conditionNames","descriptionFiles","extensions","exportsFields","mainFields","mainFiles","modules","restrictions","preferRelative","sassImportResolve","webpackModuleResolve","dependencyType","webpackImportResolve","originalRequest","isFileScheme","slice","fileURLToPath","needEmulateSassResolver","startsWith","sassPossibleRequests","webpackPossibleRequests","MATCH_CSS","getResolve","originalUrl","prev","done","then","addDependency","normalize","catch","nodeSassJobQueue","render","bind","threadPoolSize","UV_THREADPOOL_SIZE","queue","push","ABSOLUTE_SCHEME","getURLType","source","newMap","sourceRoot","sources","sourceType"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRenderFunctionFromSassImplementation = getRenderFunctionFromSassImplementation;\nexports.getSassImplementation = getSassImplementation;\nexports.getSassOptions = getSassOptions;\nexports.getWebpackImporter = getWebpackImporter;\nexports.getWebpackResolver = getWebpackResolver;\nexports.isSupportedFibers = isSupportedFibers;\nexports.normalizeSourceMap = normalizeSourceMap;\n\nvar _url = _interopRequireDefault(require(\"url\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _full = require(\"klona/full\");\n\nvar _neoAsync = _interopRequireDefault(require(\"neo-async\"));\n\nvar _SassWarning = _interopRequireDefault(require(\"./SassWarning\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getDefaultSassImplementation() {\n  let sassImplPkg = \"sass\";\n\n  try {\n    require.resolve(\"sass\");\n  } catch (error) {\n    try {\n      require.resolve(\"node-sass\");\n\n      sassImplPkg = \"node-sass\";\n    } catch (ignoreError) {\n      sassImplPkg = \"sass\";\n    }\n  } // eslint-disable-next-line import/no-dynamic-require, global-require\n\n\n  return require(sassImplPkg);\n}\n/**\n * This function is not Webpack-specific and can be used by tools wishing to mimic `sass-loader`'s behaviour, so its signature should not be changed.\n */\n\n\nfunction getSassImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n\n  if (!resolvedImplementation) {\n    try {\n      resolvedImplementation = getDefaultSassImplementation();\n    } catch (error) {\n      loaderContext.emitError(error);\n      return;\n    }\n  }\n\n  if (typeof resolvedImplementation === \"string\") {\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(resolvedImplementation);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  }\n\n  const {\n    info\n  } = resolvedImplementation;\n\n  if (!info) {\n    loaderContext.emitError(new Error(\"Unknown Sass implementation.\"));\n    return;\n  }\n\n  const infoParts = info.split(\"\\t\");\n\n  if (infoParts.length < 2) {\n    loaderContext.emitError(new Error(`Unknown Sass implementation \"${info}\".`));\n    return;\n  }\n\n  const [implementationName] = infoParts;\n\n  if (implementationName === \"dart-sass\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  } else if (implementationName === \"node-sass\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  }\n\n  loaderContext.emitError(new Error(`Unknown Sass implementation \"${implementationName}\".`));\n}\n/**\n * @param {any} loaderContext\n * @returns {boolean}\n */\n\n\nfunction isProductionLikeMode(loaderContext) {\n  return loaderContext.mode === \"production\" || !loaderContext.mode;\n}\n\nfunction proxyCustomImporters(importers, loaderContext) {\n  return [].concat(importers).map(importer => function proxyImporter(...args) {\n    const self = { ...this,\n      webpackLoaderContext: loaderContext\n    };\n    return importer.apply(self, args);\n  });\n}\n\nfunction isSupportedFibers() {\n  const [nodeVersion] = process.versions.node.split(\".\");\n  return Number(nodeVersion) < 16;\n}\n/**\n * Derives the sass options from the loader context and normalizes its values with sane defaults.\n *\n * @param {object} loaderContext\n * @param {object} loaderOptions\n * @param {string} content\n * @param {object} implementation\n * @param {boolean} useSourceMap\n * @returns {Object}\n */\n\n\nasync function getSassOptions(loaderContext, loaderOptions, content, implementation, useSourceMap) {\n  const options = (0, _full.klona)(loaderOptions.sassOptions ? typeof loaderOptions.sassOptions === \"function\" ? loaderOptions.sassOptions(loaderContext) || {} : loaderOptions.sassOptions : {});\n  const isDartSass = implementation.info.includes(\"dart-sass\");\n\n  if (isDartSass && isSupportedFibers()) {\n    const shouldTryToResolveFibers = !options.fiber && options.fiber !== false;\n\n    if (shouldTryToResolveFibers) {\n      let fibers;\n\n      try {\n        fibers = require.resolve(\"fibers\");\n      } catch (_error) {// Nothing\n      }\n\n      if (fibers) {\n        // eslint-disable-next-line global-require, import/no-dynamic-require\n        options.fiber = require(fibers);\n      }\n    } else if (options.fiber === false) {\n      // Don't pass the `fiber` option for `sass` (`Dart Sass`)\n      delete options.fiber;\n    }\n  } else {\n    // Don't pass the `fiber` option for `node-sass`\n    delete options.fiber;\n  }\n\n  options.file = loaderContext.resourcePath;\n  options.data = loaderOptions.additionalData ? typeof loaderOptions.additionalData === \"function\" ? await loaderOptions.additionalData(content, loaderContext) : `${loaderOptions.additionalData}\\n${content}` : content; // opt.outputStyle\n\n  if (!options.outputStyle && isProductionLikeMode(loaderContext)) {\n    options.outputStyle = \"compressed\";\n  }\n\n  if (useSourceMap) {\n    // Deliberately overriding the sourceMap option here.\n    // node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\n    // In case it is a string, options.sourceMap should be a path where the source map is written.\n    // But since we're using the data option, the source map will not actually be written, but\n    // all paths in sourceMap.sources will be relative to that path.\n    // Pretty complicated... :(\n    options.sourceMap = true;\n    options.outFile = _path.default.join(loaderContext.rootContext, \"style.css.map\");\n    options.sourceMapContents = true;\n    options.omitSourceMapUrl = true;\n    options.sourceMapEmbed = false;\n  }\n\n  const {\n    resourcePath\n  } = loaderContext;\n\n  const ext = _path.default.extname(resourcePath); // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n\n  if (ext && ext.toLowerCase() === \".sass\" && typeof options.indentedSyntax === \"undefined\") {\n    options.indentedSyntax = true;\n  } else {\n    options.indentedSyntax = Boolean(options.indentedSyntax);\n  } // Allow passing custom importers to `sass`/`node-sass`. Accepts `Function` or an array of `Function`s.\n\n\n  options.importer = options.importer ? proxyCustomImporters(Array.isArray(options.importer) ? options.importer : [options.importer], loaderContext) : [];\n  options.includePaths = [].concat(process.cwd()).concat( // We use `includePaths` in context for resolver, so it should be always absolute\n  (options.includePaths || []).map(includePath => _path.default.isAbsolute(includePath) ? includePath : _path.default.join(process.cwd(), includePath))).concat(process.env.SASS_PATH ? process.env.SASS_PATH.split(process.platform === \"win32\" ? \";\" : \":\") : []);\n\n  if (typeof options.charset === \"undefined\") {\n    options.charset = true;\n  }\n\n  if (!options.logger) {\n    // TODO set me to `true` by default in the next major release\n    const needEmitWarning = loaderOptions.warnRuleAsWarning === true;\n    const logger = loaderContext.getLogger(\"sass-loader\");\n\n    const formatSpan = span => `${span.url || \"-\"}:${span.start.line}:${span.start.column}: `;\n\n    options.logger = {\n      debug(message, loggerOptions) {\n        let builtMessage = \"\";\n\n        if (loggerOptions.span) {\n          builtMessage = formatSpan(loggerOptions.span);\n        }\n\n        builtMessage += message;\n        logger.debug(builtMessage);\n      },\n\n      warn(message, loggerOptions) {\n        let builtMessage = \"\";\n\n        if (loggerOptions.deprecation) {\n          builtMessage += \"Deprecation \";\n        }\n\n        if (loggerOptions.span && !loggerOptions.stack) {\n          builtMessage = formatSpan(loggerOptions.span);\n        }\n\n        builtMessage += message;\n\n        if (loggerOptions.stack) {\n          builtMessage += `\\n\\n${loggerOptions.stack}`;\n        }\n\n        if (needEmitWarning) {\n          loaderContext.emitWarning(new _SassWarning.default(builtMessage, loggerOptions));\n        } else {\n          logger.warn(builtMessage);\n        }\n      }\n\n    };\n  }\n\n  return options;\n}\n\nconst MODULE_REQUEST_REGEX = /^[^?]*~/; // Examples:\n// - ~package\n// - ~package/\n// - ~@org\n// - ~@org/\n// - ~@org/package\n// - ~@org/package/\n\nconst IS_MODULE_IMPORT = /^~([^/]+|[^/]+\\/|@[^/]+[/][^/]+|@[^/]+\\/?|@[^/]+[/][^/]+\\/)$/;\n/**\n * When `sass`/`node-sass` tries to resolve an import, it uses a special algorithm.\n * Since the `sass-loader` uses webpack to resolve the modules, we need to simulate that algorithm.\n * This function returns an array of import paths to try.\n * The last entry in the array is always the original url to enable straight-forward webpack.config aliases.\n *\n * We don't need emulate `dart-sass` \"It's not clear which file to import.\" errors (when \"file.ext\" and \"_file.ext\" files are present simultaneously in the same directory).\n * This reduces performance and `dart-sass` always do it on own side.\n *\n * @param {string} url\n * @param {boolean} forWebpackResolver\n * @param {boolean} fromImport\n * @returns {Array<string>}\n */\n\nfunction getPossibleRequests( // eslint-disable-next-line no-shadow\nurl, forWebpackResolver = false, fromImport = false) {\n  let request = url; // In case there is module request, send this to webpack resolver\n\n  if (forWebpackResolver) {\n    if (MODULE_REQUEST_REGEX.test(url)) {\n      request = request.replace(MODULE_REQUEST_REGEX, \"\");\n    }\n\n    if (IS_MODULE_IMPORT.test(url)) {\n      request = request[request.length - 1] === \"/\" ? request : `${request}/`;\n      return [...new Set([request, url])];\n    }\n  } // Keep in mind: ext can also be something like '.datepicker' when the true extension is omitted and the filename contains a dot.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/167\n\n\n  const extension = _path.default.extname(request).toLowerCase(); // Because @import is also defined in CSS, Sass needs a way of compiling plain CSS @imports without trying to import the files at compile time.\n  // To accomplish this, and to ensure SCSS is as much of a superset of CSS as possible, Sass will compile any @imports with the following characteristics to plain CSS imports:\n  //  - imports where the URL ends with .css.\n  //  - imports where the URL begins http:// or https://.\n  //  - imports where the URL is written as a url().\n  //  - imports that have media queries.\n  //\n  // The `node-sass` package sends `@import` ending on `.css` to importer, it is bug, so we skip resolve\n\n\n  if (extension === \".css\") {\n    return [];\n  }\n\n  const dirname = _path.default.dirname(request);\n\n  const normalizedDirname = dirname === \".\" ? \"\" : `${dirname}/`;\n\n  const basename = _path.default.basename(request);\n\n  const basenameWithoutExtension = _path.default.basename(request, extension);\n\n  return [...new Set([].concat(fromImport ? [`${normalizedDirname}_${basenameWithoutExtension}.import${extension}`, `${normalizedDirname}${basenameWithoutExtension}.import${extension}`] : []).concat([`${normalizedDirname}_${basename}`, `${normalizedDirname}${basename}`]).concat(forWebpackResolver ? [url] : []))];\n}\n\nfunction promiseResolve(callbackResolve) {\n  return (context, request) => new Promise((resolve, reject) => {\n    callbackResolve(context, request, (error, result) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\nconst IS_SPECIAL_MODULE_IMPORT = /^~[^/]+$/; // `[drive_letter]:\\` + `\\\\[server]\\[sharename]\\`\n\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\n/**\n * @public\n * Create the resolve function used in the custom Sass importer.\n *\n * Can be used by external tools to mimic how `sass-loader` works, for example\n * in a Jest transform. Such usages will want to wrap `resolve.create` from\n * [`enhanced-resolve`]{@link https://github.com/webpack/enhanced-resolve} to\n * pass as the `resolverFactory` argument.\n *\n * @param {Function} resolverFactory - A factory function for creating a Webpack\n *   resolver.\n * @param {Object} implementation - The imported Sass implementation, both\n *   `sass` (Dart Sass) and `node-sass` are supported.\n * @param {string[]} [includePaths] - The list of include paths passed to Sass.\n *\n * @throws If a compatible Sass implementation cannot be found.\n */\n\nfunction getWebpackResolver(resolverFactory, implementation, includePaths = []) {\n  async function startResolving(resolutionMap) {\n    if (resolutionMap.length === 0) {\n      return Promise.reject();\n    }\n\n    const [{\n      possibleRequests\n    }] = resolutionMap;\n\n    if (possibleRequests.length === 0) {\n      return Promise.reject();\n    }\n\n    const [{\n      resolve,\n      context\n    }] = resolutionMap;\n\n    try {\n      return await resolve(context, possibleRequests[0]);\n    } catch (_ignoreError) {\n      const [, ...tailResult] = possibleRequests;\n\n      if (tailResult.length === 0) {\n        const [, ...tailResolutionMap] = resolutionMap;\n        return startResolving(tailResolutionMap);\n      } // eslint-disable-next-line no-param-reassign\n\n\n      resolutionMap[0].possibleRequests = tailResult;\n      return startResolving(resolutionMap);\n    }\n  }\n\n  const isDartSass = implementation.info.includes(\"dart-sass\"); // We only have one difference with the built-in sass resolution logic and out resolution logic:\n  // First, we look at the files starting with `_`, then without `_` (i.e. `_name.sass`, `_name.scss`, `_name.css`, `name.sass`, `name.scss`, `name.css`),\n  // although `sass` look together by extensions (i.e. `_name.sass`/`name.sass`/`_name.scss`/`name.scss`/`_name.css`/`name.css`).\n  // It shouldn't be a problem because `sass` throw errors:\n  // - on having `_name.sass` and `name.sass` (extension can be `sass`, `scss` or `css`) in the same directory\n  // - on having `_name.sass` and `_name.scss` in the same directory\n  //\n  // Also `sass` prefer `sass`/`scss` over `css`.\n\n  const sassModuleResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: [\"_index\", \"index\"],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const sassImportResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: [\"_index.import\", \"_index\", \"index.import\", \"index\"],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const webpackModuleResolve = promiseResolve(resolverFactory({\n    dependencyType: \"sass\",\n    conditionNames: [\"sass\", \"style\"],\n    mainFields: [\"sass\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"_index\", \"index\", \"...\"],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const webpackImportResolve = promiseResolve(resolverFactory({\n    dependencyType: \"sass\",\n    conditionNames: [\"sass\", \"style\"],\n    mainFields: [\"sass\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"_index.import\", \"_index\", \"index.import\", \"index\", \"...\"],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  return (context, request, fromImport) => {\n    // See https://github.com/webpack/webpack/issues/12340\n    // Because `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`\n    // custom importer may not return `{ file: '/path/to/name.ext' }` and therefore our `context` will be relative\n    if (!isDartSass && !_path.default.isAbsolute(context)) {\n      return Promise.reject();\n    }\n\n    const originalRequest = request;\n    const isFileScheme = originalRequest.slice(0, 5).toLowerCase() === \"file:\";\n\n    if (isFileScheme) {\n      try {\n        // eslint-disable-next-line no-param-reassign\n        request = _url.default.fileURLToPath(originalRequest);\n      } catch (ignoreError) {\n        // eslint-disable-next-line no-param-reassign\n        request = request.slice(7);\n      }\n    }\n\n    let resolutionMap = [];\n    const needEmulateSassResolver = // `sass` doesn't support module import\n    !IS_SPECIAL_MODULE_IMPORT.test(request) && // We need improve absolute paths handling.\n    // Absolute paths should be resolved:\n    // - Server-relative URLs - `<context>/path/to/file.ext` (where `<context>` is root context)\n    // - Absolute path - `/full/path/to/file.ext` or `C:\\\\full\\path\\to\\file.ext`\n    !isFileScheme && !originalRequest.startsWith(\"/\") && !IS_NATIVE_WIN32_PATH.test(originalRequest);\n\n    if (includePaths.length > 0 && needEmulateSassResolver) {\n      // The order of import precedence is as follows:\n      //\n      // 1. Filesystem imports relative to the base file.\n      // 2. Custom importer imports.\n      // 3. Filesystem imports relative to the working directory.\n      // 4. Filesystem imports relative to an `includePaths` path.\n      // 5. Filesystem imports relative to a `SASS_PATH` path.\n      //\n      // `sass` run custom importers before `3`, `4` and `5` points, we need to emulate this behavior to avoid wrong resolution.\n      const sassPossibleRequests = getPossibleRequests(request, false, fromImport); // `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`, so we need emulate this too\n\n      if (!isDartSass) {\n        resolutionMap = resolutionMap.concat({\n          resolve: fromImport ? sassImportResolve : sassModuleResolve,\n          context: _path.default.dirname(context),\n          possibleRequests: sassPossibleRequests\n        });\n      }\n\n      resolutionMap = resolutionMap.concat( // eslint-disable-next-line no-shadow\n      includePaths.map(context => {\n        return {\n          resolve: fromImport ? sassImportResolve : sassModuleResolve,\n          context,\n          possibleRequests: sassPossibleRequests\n        };\n      }));\n    }\n\n    const webpackPossibleRequests = getPossibleRequests(request, true, fromImport);\n    resolutionMap = resolutionMap.concat({\n      resolve: fromImport ? webpackImportResolve : webpackModuleResolve,\n      context: _path.default.dirname(context),\n      possibleRequests: webpackPossibleRequests\n    });\n    return startResolving(resolutionMap);\n  };\n}\n\nconst MATCH_CSS = /\\.css$/i;\n\nfunction getWebpackImporter(loaderContext, implementation, includePaths) {\n  const resolve = getWebpackResolver(loaderContext.getResolve, implementation, includePaths);\n  return function importer(originalUrl, prev, done) {\n    const {\n      fromImport\n    } = this;\n    resolve(prev, originalUrl, fromImport).then(result => {\n      // Add the result as dependency.\n      // Although we're also using stats.includedFiles, this might come in handy when an error occurs.\n      // In this case, we don't get stats.includedFiles from node-sass/sass.\n      loaderContext.addDependency(_path.default.normalize(result)); // By removing the CSS file extension, we trigger node-sass to include the CSS file instead of just linking it.\n\n      done({\n        file: result.replace(MATCH_CSS, \"\")\n      });\n    }) // Catch all resolving errors, return the original file and pass responsibility back to other custom importers\n    .catch(() => {\n      done({\n        file: originalUrl\n      });\n    });\n  };\n}\n\nlet nodeSassJobQueue = null;\n/**\n * Verifies that the implementation and version of Sass is supported by this loader.\n *\n * @param {Object} implementation\n * @returns {Function}\n */\n\nfunction getRenderFunctionFromSassImplementation(implementation) {\n  const isDartSass = implementation.info.includes(\"dart-sass\");\n\n  if (isDartSass) {\n    return implementation.render.bind(implementation);\n  } // There is an issue with node-sass when async custom importers are used\n  // See https://github.com/sass/node-sass/issues/857#issuecomment-93594360\n  // We need to use a job queue to make sure that one thread is always available to the UV lib\n\n\n  if (nodeSassJobQueue === null) {\n    const threadPoolSize = Number(process.env.UV_THREADPOOL_SIZE || 4);\n    nodeSassJobQueue = _neoAsync.default.queue(implementation.render.bind(implementation), threadPoolSize - 1);\n  }\n\n  return nodeSassJobQueue.push.bind(nodeSassJobQueue);\n}\n\nconst ABSOLUTE_SCHEME = /^[A-Za-z0-9+\\-.]+:/;\n/**\n * @param {string} source\n * @returns {\"absolute\" | \"scheme-relative\" | \"path-absolute\" | \"path-absolute\"}\n */\n\nfunction getURLType(source) {\n  if (source[0] === \"/\") {\n    if (source[1] === \"/\") {\n      return \"scheme-relative\";\n    }\n\n    return \"path-absolute\";\n  }\n\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return \"path-absolute\";\n  }\n\n  return ABSOLUTE_SCHEME.test(source) ? \"absolute\" : \"path-relative\";\n}\n\nfunction normalizeSourceMap(map, rootContext) {\n  const newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  delete newMap.file; // eslint-disable-next-line no-param-reassign\n\n  newMap.sourceRoot = \"\"; // node-sass returns POSIX paths, that's why we need to transform them back to native paths.\n  // This fixes an error on windows where the source-map module cannot resolve the source maps.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/366#issuecomment-279460722\n  // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => {\n    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types\n\n    if (sourceType === \"path-relative\") {\n      return _path.default.resolve(rootContext, _path.default.normalize(source));\n    }\n\n    return source;\n  });\n  return newMap;\n}"]},"metadata":{},"sourceType":"script"}